/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const XED_GIT_VERSION: &'static [u8; 19usize] = b"v10.0-180-g6151e64\x00";
pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201605;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 24;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const XED_FMT_X: &'static [u8; 3usize] = b"%x\x00";
pub const XED_FMT_08X: &'static [u8; 5usize] = b"%08x\x00";
pub const XED_FMT_D: &'static [u8; 3usize] = b"%d\x00";
pub const XED_FMT_U: &'static [u8; 3usize] = b"%u\x00";
pub const XED_FMT_9U: &'static [u8; 4usize] = b"%9u\x00";
pub const XED_FMT_SIZET: &'static [u8; 4usize] = b"%lu\x00";
pub const XED_FMT_LX: &'static [u8; 4usize] = b"%lx\x00";
pub const XED_FMT_LX_UPPER: &'static [u8; 4usize] = b"%lX\x00";
pub const XED_FMT_LU: &'static [u8; 4usize] = b"%lu\x00";
pub const XED_FMT_LU12: &'static [u8; 6usize] = b"%12lu\x00";
pub const XED_FMT_LD: &'static [u8; 4usize] = b"%ld\x00";
pub const XED_FMT_LX16: &'static [u8; 7usize] = b"%016lx\x00";
pub const XED_FMT_LX16_UPPER: &'static [u8; 7usize] = b"%016lX\x00";
pub const XED_64B: ::std::os::raw::c_uint = 1;
pub const XED_MAX_DISPLACEMENT_BYTES: ::std::os::raw::c_uint = 8;
pub const XED_MAX_IMMEDIATE_BYTES: ::std::os::raw::c_uint = 8;
pub const XED_MAX_INSTRUCTION_BYTES: ::std::os::raw::c_uint = 15;
pub const XED_EMIT_MESSAGES: ::std::os::raw::c_uint = 0;
pub const XED_INFO_VERBOSE: ::std::os::raw::c_uint = 0;
pub const XED_INFO2_VERBOSE: ::std::os::raw::c_uint = 0;
pub const XED_VERBOSE: ::std::os::raw::c_uint = 0;
pub const XED_MORE_VERBOSE: ::std::os::raw::c_uint = 0;
pub const XED_VERY_VERBOSE: ::std::os::raw::c_uint = 0;
pub const XED_ICLASS_NAME_STR_MAX: ::std::os::raw::c_uint = 108;
pub const XED_MAX_ATTRIBUTE_COUNT: ::std::os::raw::c_uint = 87;
pub const XED_MAX_INST_TABLE_NODES: ::std::os::raw::c_uint = 6480;
pub const XED_MAX_OPERAND_TABLE_NODES: ::std::os::raw::c_uint = 1342;
pub const XED_MAX_OPERAND_SEQUENCES: ::std::os::raw::c_uint = 7815;
pub const XED_MAX_REQUIRED_SIMPLE_FLAGS_ENTRIES: ::std::os::raw::c_uint = 96;
pub const XED_MAX_REQUIRED_COMPLEX_FLAGS_ENTRIES: ::std::os::raw::c_uint = 37;
pub const XED_MAX_GLOBAL_FLAG_ACTIONS: ::std::os::raw::c_uint = 434;
pub const XED_MAX_IFORMS_PER_ICLASS: ::std::os::raw::c_uint = 28;
pub const XED_MAX_REQUIRED_ATTRIBUTES: ::std::os::raw::c_uint = 182;
pub const XED_MAX_CONVERT_PATTERNS: ::std::os::raw::c_uint = 5;
pub const XED_MAX_DECORATIONS_PER_OPERAND: ::std::os::raw::c_uint = 3;
pub const XED_ENCODE_ORDER_MAX_ENTRIES: ::std::os::raw::c_uint = 32;
pub const XED_ENCODE_ORDER_MAX_OPERANDS: ::std::os::raw::c_uint = 5;
pub const XED_ENCODE_MAX_FB_PATTERNS: ::std::os::raw::c_uint = 111;
pub const XED_ENCODE_MAX_EMIT_PATTERNS: ::std::os::raw::c_uint = 170;
pub const XED_ENCODE_FB_VALUES_TABLE_SIZE: ::std::os::raw::c_uint = 5488;
pub const XED_ENCODE_MAX_IFORMS: ::std::os::raw::c_uint = 6502;
pub const XED_ENC_GROUPS: ::std::os::raw::c_uint = 472;
pub const XED_FEATURE_VECTOR_MAX: ::std::os::raw::c_uint = 4;
pub const XED_ENCODER_OPERANDS_MAX: ::std::os::raw::c_uint = 5;
pub const XED_MAX_CPUID_BITS_PER_ISA_SET: ::std::os::raw::c_uint = 4;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type xed_uint_t = ::std::os::raw::c_uint;
pub type xed_int_t = ::std::os::raw::c_int;
pub type xed_bits_t = ::std::os::raw::c_uint;
pub type xed_bool_t = ::std::os::raw::c_uint;
pub type xed_addr_t = u64;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_union16_t {
    pub byte: __BindgenUnionField<[u8; 2usize]>,
    pub s_byte: __BindgenUnionField<[i8; 2usize]>,
    pub b: __BindgenUnionField<xed_union16_t__bindgen_ty_1>,
    pub i16: __BindgenUnionField<i16>,
    pub u16: __BindgenUnionField<u16>,
    pub bindgen_union_field: u16,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_union16_t__bindgen_ty_1 {
    pub b0: u8,
    pub b1: u8,
}
#[test]
fn bindgen_test_layout_xed_union16_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<xed_union16_t__bindgen_ty_1>() , 2usize ,
               concat ! (
               "Size of: " , stringify ! ( xed_union16_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<xed_union16_t__bindgen_ty_1>() , 1usize
                , concat ! (
                "Alignment of " , stringify ! ( xed_union16_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union16_t__bindgen_ty_1 ) ) . b0 as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union16_t__bindgen_ty_1 ) , "::" , stringify ! ( b0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union16_t__bindgen_ty_1 ) ) . b1 as *
                const _ as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union16_t__bindgen_ty_1 ) , "::" , stringify ! ( b1 ) ));
}
impl Clone for xed_union16_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_xed_union16_t() {
    assert_eq!(::std::mem::size_of::<xed_union16_t>() , 2usize , concat ! (
               "Size of: " , stringify ! ( xed_union16_t ) ));
    assert_eq! (::std::mem::align_of::<xed_union16_t>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( xed_union16_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union16_t ) ) . byte as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union16_t ) , "::"
                , stringify ! ( byte ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union16_t ) ) . s_byte as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union16_t ) , "::"
                , stringify ! ( s_byte ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union16_t ) ) . b as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union16_t ) , "::"
                , stringify ! ( b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union16_t ) ) . i16 as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union16_t ) , "::"
                , stringify ! ( i16 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union16_t ) ) . u16 as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union16_t ) , "::"
                , stringify ! ( u16 ) ));
}
impl Clone for xed_union16_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_union32_t {
    pub byte: __BindgenUnionField<[u8; 4usize]>,
    pub word: __BindgenUnionField<[u16; 2usize]>,
    pub s_byte: __BindgenUnionField<[i8; 4usize]>,
    pub s_word: __BindgenUnionField<[i16; 2usize]>,
    pub b: __BindgenUnionField<xed_union32_t__bindgen_ty_1>,
    pub w: __BindgenUnionField<xed_union32_t__bindgen_ty_2>,
    pub i32: __BindgenUnionField<i32>,
    pub u32: __BindgenUnionField<u32>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_union32_t__bindgen_ty_1 {
    pub b0: u8,
    pub b1: u8,
    pub b2: u8,
    pub b3: u8,
}
#[test]
fn bindgen_test_layout_xed_union32_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<xed_union32_t__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( xed_union32_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<xed_union32_t__bindgen_ty_1>() , 1usize
                , concat ! (
                "Alignment of " , stringify ! ( xed_union32_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t__bindgen_ty_1 ) ) . b0 as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union32_t__bindgen_ty_1 ) , "::" , stringify ! ( b0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t__bindgen_ty_1 ) ) . b1 as *
                const _ as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union32_t__bindgen_ty_1 ) , "::" , stringify ! ( b1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t__bindgen_ty_1 ) ) . b2 as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union32_t__bindgen_ty_1 ) , "::" , stringify ! ( b2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t__bindgen_ty_1 ) ) . b3 as *
                const _ as usize } , 3usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union32_t__bindgen_ty_1 ) , "::" , stringify ! ( b3 ) ));
}
impl Clone for xed_union32_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_union32_t__bindgen_ty_2 {
    pub w0: u16,
    pub w1: u16,
}
#[test]
fn bindgen_test_layout_xed_union32_t__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<xed_union32_t__bindgen_ty_2>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( xed_union32_t__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<xed_union32_t__bindgen_ty_2>() , 2usize
                , concat ! (
                "Alignment of " , stringify ! ( xed_union32_t__bindgen_ty_2 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t__bindgen_ty_2 ) ) . w0 as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union32_t__bindgen_ty_2 ) , "::" , stringify ! ( w0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t__bindgen_ty_2 ) ) . w1 as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union32_t__bindgen_ty_2 ) , "::" , stringify ! ( w1 ) ));
}
impl Clone for xed_union32_t__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_xed_union32_t() {
    assert_eq!(::std::mem::size_of::<xed_union32_t>() , 4usize , concat ! (
               "Size of: " , stringify ! ( xed_union32_t ) ));
    assert_eq! (::std::mem::align_of::<xed_union32_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( xed_union32_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t ) ) . byte as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union32_t ) , "::"
                , stringify ! ( byte ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t ) ) . word as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union32_t ) , "::"
                , stringify ! ( word ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t ) ) . s_byte as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union32_t ) , "::"
                , stringify ! ( s_byte ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t ) ) . s_word as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union32_t ) , "::"
                , stringify ! ( s_word ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t ) ) . b as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union32_t ) , "::"
                , stringify ! ( b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t ) ) . w as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union32_t ) , "::"
                , stringify ! ( w ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t ) ) . i32 as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union32_t ) , "::"
                , stringify ! ( i32 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union32_t ) ) . u32 as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union32_t ) , "::"
                , stringify ! ( u32 ) ));
}
impl Clone for xed_union32_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_union64_t {
    pub byte: __BindgenUnionField<[u8; 8usize]>,
    pub word: __BindgenUnionField<[u16; 4usize]>,
    pub dword: __BindgenUnionField<[u32; 2usize]>,
    pub s_byte: __BindgenUnionField<[i8; 8usize]>,
    pub s_word: __BindgenUnionField<[i16; 4usize]>,
    pub s_dword: __BindgenUnionField<[i32; 2usize]>,
    pub b: __BindgenUnionField<xed_union64_t__bindgen_ty_1>,
    pub w: __BindgenUnionField<xed_union64_t__bindgen_ty_2>,
    pub s: __BindgenUnionField<xed_union64_t__bindgen_ty_3>,
    pub u64: __BindgenUnionField<u64>,
    pub i64: __BindgenUnionField<i64>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_union64_t__bindgen_ty_1 {
    pub b0: u8,
    pub b1: u8,
    pub b2: u8,
    pub b3: u8,
    pub b4: u8,
    pub b5: u8,
    pub b6: u8,
    pub b7: u8,
}
#[test]
fn bindgen_test_layout_xed_union64_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<xed_union64_t__bindgen_ty_1>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( xed_union64_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<xed_union64_t__bindgen_ty_1>() , 1usize
                , concat ! (
                "Alignment of " , stringify ! ( xed_union64_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_1 ) ) . b0 as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_1 ) , "::" , stringify ! ( b0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_1 ) ) . b1 as *
                const _ as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_1 ) , "::" , stringify ! ( b1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_1 ) ) . b2 as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_1 ) , "::" , stringify ! ( b2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_1 ) ) . b3 as *
                const _ as usize } , 3usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_1 ) , "::" , stringify ! ( b3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_1 ) ) . b4 as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_1 ) , "::" , stringify ! ( b4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_1 ) ) . b5 as *
                const _ as usize } , 5usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_1 ) , "::" , stringify ! ( b5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_1 ) ) . b6 as *
                const _ as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_1 ) , "::" , stringify ! ( b6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_1 ) ) . b7 as *
                const _ as usize } , 7usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_1 ) , "::" , stringify ! ( b7 ) ));
}
impl Clone for xed_union64_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_union64_t__bindgen_ty_2 {
    pub w0: u16,
    pub w1: u16,
    pub w2: u16,
    pub w3: u16,
}
#[test]
fn bindgen_test_layout_xed_union64_t__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<xed_union64_t__bindgen_ty_2>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( xed_union64_t__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<xed_union64_t__bindgen_ty_2>() , 2usize
                , concat ! (
                "Alignment of " , stringify ! ( xed_union64_t__bindgen_ty_2 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_2 ) ) . w0 as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_2 ) , "::" , stringify ! ( w0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_2 ) ) . w1 as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_2 ) , "::" , stringify ! ( w1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_2 ) ) . w2 as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_2 ) , "::" , stringify ! ( w2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_2 ) ) . w3 as *
                const _ as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_2 ) , "::" , stringify ! ( w3 ) ));
}
impl Clone for xed_union64_t__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_union64_t__bindgen_ty_3 {
    pub lo32: u32,
    pub hi32: u32,
}
#[test]
fn bindgen_test_layout_xed_union64_t__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<xed_union64_t__bindgen_ty_3>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( xed_union64_t__bindgen_ty_3 ) ));
    assert_eq! (::std::mem::align_of::<xed_union64_t__bindgen_ty_3>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( xed_union64_t__bindgen_ty_3 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_3 ) ) . lo32 as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_3 ) , "::" , stringify ! ( lo32 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t__bindgen_ty_3 ) ) . hi32 as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_union64_t__bindgen_ty_3 ) , "::" , stringify ! ( hi32 )
                ));
}
impl Clone for xed_union64_t__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_xed_union64_t() {
    assert_eq!(::std::mem::size_of::<xed_union64_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( xed_union64_t ) ));
    assert_eq! (::std::mem::align_of::<xed_union64_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( xed_union64_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t ) ) . byte as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union64_t ) , "::"
                , stringify ! ( byte ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t ) ) . word as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union64_t ) , "::"
                , stringify ! ( word ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t ) ) . dword as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union64_t ) , "::"
                , stringify ! ( dword ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t ) ) . s_byte as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union64_t ) , "::"
                , stringify ! ( s_byte ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t ) ) . s_word as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union64_t ) , "::"
                , stringify ! ( s_word ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t ) ) . s_dword as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union64_t ) , "::"
                , stringify ! ( s_dword ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t ) ) . b as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union64_t ) , "::"
                , stringify ! ( b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t ) ) . w as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union64_t ) , "::"
                , stringify ! ( w ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t ) ) . s as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union64_t ) , "::"
                , stringify ! ( s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t ) ) . u64 as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union64_t ) , "::"
                , stringify ! ( u64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_union64_t ) ) . i64 as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_union64_t ) , "::"
                , stringify ! ( i64 ) ));
}
impl Clone for xed_union64_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn xed_strlen(s: *const ::std::os::raw::c_char) -> xed_uint_t;
}
extern "C" {
    pub fn xed_strcat(dst: *mut ::std::os::raw::c_char,
                      src: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn xed_strcpy(dst: *mut ::std::os::raw::c_char,
                      src: *const ::std::os::raw::c_char);
}
extern "C" {
    /// returns the number of bytes remaining for the next use of
/// #xed_strncpy() or #xed_strncat() .
    pub fn xed_strncpy(dst: *mut ::std::os::raw::c_char,
                       src: *const ::std::os::raw::c_char,
                       len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    /// returns the number of bytes remaining for the next use of
/// #xed_strncpy() or #xed_strncat() .
    pub fn xed_strncat(dst: *mut ::std::os::raw::c_char,
                       src: *const ::std::os::raw::c_char,
                       len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_operand_enum_t {
    XED_OPERAND_INVALID = 0,
    XED_OPERAND_AGEN = 1,
    XED_OPERAND_AMD3DNOW = 2,
    XED_OPERAND_ASZ = 3,
    XED_OPERAND_BASE0 = 4,
    XED_OPERAND_BASE1 = 5,
    XED_OPERAND_BCAST = 6,
    XED_OPERAND_BCRC = 7,
    XED_OPERAND_BRDISP_WIDTH = 8,
    XED_OPERAND_CET = 9,
    XED_OPERAND_CHIP = 10,
    XED_OPERAND_DEFAULT_SEG = 11,
    XED_OPERAND_DF32 = 12,
    XED_OPERAND_DF64 = 13,
    XED_OPERAND_DISP = 14,
    XED_OPERAND_DISP_WIDTH = 15,
    XED_OPERAND_DUMMY = 16,
    XED_OPERAND_EASZ = 17,
    XED_OPERAND_ELEMENT_SIZE = 18,
    XED_OPERAND_ENCODER_PREFERRED = 19,
    XED_OPERAND_EOSZ = 20,
    XED_OPERAND_ERROR = 21,
    XED_OPERAND_ESRC = 22,
    XED_OPERAND_EVEXRR = 23,
    XED_OPERAND_FIRST_F2F3 = 24,
    XED_OPERAND_HAS_MODRM = 25,
    XED_OPERAND_HAS_SIB = 26,
    XED_OPERAND_HINT = 27,
    XED_OPERAND_ICLASS = 28,
    XED_OPERAND_ILD_F2 = 29,
    XED_OPERAND_ILD_F3 = 30,
    XED_OPERAND_ILD_SEG = 31,
    XED_OPERAND_IMM0 = 32,
    XED_OPERAND_IMM0SIGNED = 33,
    XED_OPERAND_IMM1 = 34,
    XED_OPERAND_IMM1_BYTES = 35,
    XED_OPERAND_IMM_WIDTH = 36,
    XED_OPERAND_INDEX = 37,
    XED_OPERAND_LAST_F2F3 = 38,
    XED_OPERAND_LLRC = 39,
    XED_OPERAND_LOCK = 40,
    XED_OPERAND_LZCNT = 41,
    XED_OPERAND_MAP = 42,
    XED_OPERAND_MASK = 43,
    XED_OPERAND_MAX_BYTES = 44,
    XED_OPERAND_MEM0 = 45,
    XED_OPERAND_MEM1 = 46,
    XED_OPERAND_MEM_WIDTH = 47,
    XED_OPERAND_MOD = 48,
    XED_OPERAND_MODE = 49,
    XED_OPERAND_MODEP5 = 50,
    XED_OPERAND_MODEP55C = 51,
    XED_OPERAND_MODE_FIRST_PREFIX = 52,
    XED_OPERAND_MODRM_BYTE = 53,
    XED_OPERAND_MPXMODE = 54,
    XED_OPERAND_NEEDREX = 55,
    XED_OPERAND_NEED_MEMDISP = 56,
    XED_OPERAND_NELEM = 57,
    XED_OPERAND_NOMINAL_OPCODE = 58,
    XED_OPERAND_NOREX = 59,
    XED_OPERAND_NO_SCALE_DISP8 = 60,
    XED_OPERAND_NPREFIXES = 61,
    XED_OPERAND_NREXES = 62,
    XED_OPERAND_NSEG_PREFIXES = 63,
    XED_OPERAND_OSZ = 64,
    XED_OPERAND_OUTREG = 65,
    XED_OPERAND_OUT_OF_BYTES = 66,
    XED_OPERAND_P4 = 67,
    XED_OPERAND_POS_DISP = 68,
    XED_OPERAND_POS_IMM = 69,
    XED_OPERAND_POS_IMM1 = 70,
    XED_OPERAND_POS_MODRM = 71,
    XED_OPERAND_POS_NOMINAL_OPCODE = 72,
    XED_OPERAND_POS_SIB = 73,
    XED_OPERAND_PREFIX66 = 74,
    XED_OPERAND_PTR = 75,
    XED_OPERAND_REALMODE = 76,
    XED_OPERAND_REG = 77,
    XED_OPERAND_REG0 = 78,
    XED_OPERAND_REG1 = 79,
    XED_OPERAND_REG2 = 80,
    XED_OPERAND_REG3 = 81,
    XED_OPERAND_REG4 = 82,
    XED_OPERAND_REG5 = 83,
    XED_OPERAND_REG6 = 84,
    XED_OPERAND_REG7 = 85,
    XED_OPERAND_REG8 = 86,
    XED_OPERAND_RELBR = 87,
    XED_OPERAND_REP = 88,
    XED_OPERAND_REX = 89,
    XED_OPERAND_REXB = 90,
    XED_OPERAND_REXR = 91,
    XED_OPERAND_REXRR = 92,
    XED_OPERAND_REXW = 93,
    XED_OPERAND_REXX = 94,
    XED_OPERAND_RM = 95,
    XED_OPERAND_ROUNDC = 96,
    XED_OPERAND_SAE = 97,
    XED_OPERAND_SCALE = 98,
    XED_OPERAND_SEG0 = 99,
    XED_OPERAND_SEG1 = 100,
    XED_OPERAND_SEG_OVD = 101,
    XED_OPERAND_SIB = 102,
    XED_OPERAND_SIBBASE = 103,
    XED_OPERAND_SIBINDEX = 104,
    XED_OPERAND_SIBSCALE = 105,
    XED_OPERAND_SKIP_OSZ = 106,
    XED_OPERAND_SMODE = 107,
    XED_OPERAND_SRM = 108,
    XED_OPERAND_TYPE = 109,
    XED_OPERAND_TZCNT = 110,
    XED_OPERAND_UBIT = 111,
    XED_OPERAND_UIMM0 = 112,
    XED_OPERAND_UIMM1 = 113,
    XED_OPERAND_USING_DEFAULT_SEGMENT0 = 114,
    XED_OPERAND_USING_DEFAULT_SEGMENT1 = 115,
    XED_OPERAND_VEXDEST210 = 116,
    XED_OPERAND_VEXDEST3 = 117,
    XED_OPERAND_VEXDEST4 = 118,
    XED_OPERAND_VEXVALID = 119,
    XED_OPERAND_VEX_C4 = 120,
    XED_OPERAND_VEX_PREFIX = 121,
    XED_OPERAND_VL = 122,
    XED_OPERAND_ZEROING = 123,
    XED_OPERAND_LAST = 124,
}
extern "C" {
    pub fn str2xed_operand_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_operand_enum_t;
}
extern "C" {
    pub fn xed_operand_enum_t2str(p: xed_operand_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_operand_enum_t_last() -> xed_operand_enum_t;
}
extern "C" {
    /// @ingroup INIT
///   This is the call to initialize the XED encode and decode tables. It
///   must be called once before using XED.
    pub fn xed_tables_init();
}
extern "C" {
    #[link_name = "xed_verbose"]
    pub static mut xed_verbose: ::std::os::raw::c_int;
}
extern "C" {
    pub fn xed_internal_assert(s: *const ::std::os::raw::c_char,
                               file: *const ::std::os::raw::c_char,
                               line: ::std::os::raw::c_int);
}
pub type xed_user_abort_function_t =
    ::std::option::Option<unsafe extern "C" fn(msg:
                                                   *const ::std::os::raw::c_char,
                                               file:
                                                   *const ::std::os::raw::c_char,
                                               line: ::std::os::raw::c_int,
                                               other:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    /// @ingroup INIT
/// This is for registering a function to be called during XED's assert
/// processing. If you do not register an abort function, then the system's
/// abort function will be called. If your supplied function returns, then
/// abort() will still be called.
///
/// @param fn This is a function pointer for a function that should handle the
///        assertion reporting. The function pointer points to  a function that
///        takes 4 arguments: 
///                     (1) msg, the assertion message, 
///                     (2) file, the file name,
///                     (3) line, the line number (as an integer), and
///                     (4) other, a void pointer that is supplied as thei
///                         2nd argument to this registration.
/// @param other This is a void* that is passed back to your supplied function  fn
///        as its 4th argument. It can be zero if you don't need this
///        feature. You can used this to convey whatever additional context
///        to your assertion handler (like FILE* pointers etc.).
///
    pub fn xed_register_abort_function(fn_: xed_user_abort_function_t,
                                       other: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn xed_itoa(buf: *mut ::std::os::raw::c_char, f: u64,
                    buflen: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    /// defaults to lowercase
    pub fn xed_itoa_hex_zeros(buf: *mut ::std::os::raw::c_char, f: u64,
                              bits_to_print: xed_uint_t,
                              leading_zeros: xed_bool_t,
                              buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /// defaults to lowercase
    pub fn xed_itoa_hex(buf: *mut ::std::os::raw::c_char, f: u64,
                        bits_to_print: xed_uint_t,
                        buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xed_itoa_hex_ul(buf: *mut ::std::os::raw::c_char, f: u64,
                           bits_to_print: xed_uint_t,
                           leading_zeros: xed_bool_t,
                           buflen: ::std::os::raw::c_int,
                           lowercase: xed_bool_t) -> ::std::os::raw::c_int;
}
extern "C" {
    /// Set the FILE* for XED's log msgs. This takes a FILE* as a void* because
/// some software defines their own FILE* types creating conflicts.
    pub fn xed_set_log_file(o: *mut ::std::os::raw::c_void);
}
extern "C" {
    /// Set the verbosity level for XED
    pub fn xed_set_verbosity(v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xed_sign_extend32_64(x: i32) -> i64;
}
extern "C" {
    pub fn xed_sign_extend16_64(x: i16) -> i64;
}
extern "C" {
    pub fn xed_sign_extend8_64(x: i8) -> i64;
}
extern "C" {
    pub fn xed_sign_extend16_32(x: i16) -> i32;
}
extern "C" {
    pub fn xed_sign_extend8_32(x: i8) -> i32;
}
extern "C" {
    pub fn xed_sign_extend8_16(x: i8) -> i16;
}
extern "C" {
    ///arbitrary sign extension from a qty of "bits" length to 32b 
    pub fn xed_sign_extend_arbitrary_to_32(x: u32,
                                           bits: ::std::os::raw::c_uint)
     -> i32;
}
extern "C" {
    ///arbitrary sign extension from a qty of "bits" length to 64b 
    pub fn xed_sign_extend_arbitrary_to_64(x: u64,
                                           bits: ::std::os::raw::c_uint)
     -> i64;
}
extern "C" {
    pub fn xed_zero_extend32_64(x: u32) -> u64;
}
extern "C" {
    pub fn xed_zero_extend16_64(x: u16) -> u64;
}
extern "C" {
    pub fn xed_zero_extend8_64(x: u8) -> u64;
}
extern "C" {
    pub fn xed_zero_extend16_32(x: u16) -> u32;
}
extern "C" {
    pub fn xed_zero_extend8_32(x: u8) -> u32;
}
extern "C" {
    pub fn xed_zero_extend8_16(x: u8) -> u16;
}
extern "C" {
    pub fn xed_get_byte(x: u64, i: ::std::os::raw::c_uint,
                        len: ::std::os::raw::c_uint) -> u8;
}
extern "C" {
    /// returns the number of bytes required to store the UNSIGNED number x
/// given a mask of legal lengths. For the legal_widths argument, bit 0
/// implies 1 byte is a legal return width, bit 1 implies that 2 bytes is a
/// legal return width, bit 2 implies that 4 bytes is a legal return width.
/// This returns 8 (indicating 8B) if none of the provided legal widths
/// applies.
    pub fn xed_shortest_width_unsigned(x: u64, legal_widths: u8)
     -> xed_uint_t;
}
extern "C" {
    /// returns the number of bytes required to store the SIGNED number x
/// given a mask of legal lengths. For the legal_widths argument, bit 0 implies 1
/// byte is a legal return width, bit 1 implies that 2 bytes is a legal
/// return width, bit 2 implies that 4 bytes is a legal return width.  This
/// returns 8 (indicating 8B) if none of the provided legal widths applies.
    pub fn xed_shortest_width_signed(x: i64, legal_widths: u8) -> xed_uint_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_category_enum_t {
    XED_CATEGORY_INVALID = 0,
    XED_CATEGORY_3DNOW = 1,
    XED_CATEGORY_AES = 2,
    XED_CATEGORY_AVX = 3,
    XED_CATEGORY_AVX2 = 4,
    XED_CATEGORY_AVX2GATHER = 5,
    XED_CATEGORY_AVX512 = 6,
    XED_CATEGORY_AVX512_4FMAPS = 7,
    XED_CATEGORY_AVX512_4VNNIW = 8,
    XED_CATEGORY_AVX512_VBMI = 9,
    XED_CATEGORY_BDW = 10,
    XED_CATEGORY_BINARY = 11,
    XED_CATEGORY_BITBYTE = 12,
    XED_CATEGORY_BLEND = 13,
    XED_CATEGORY_BMI1 = 14,
    XED_CATEGORY_BMI2 = 15,
    XED_CATEGORY_BROADCAST = 16,
    XED_CATEGORY_CALL = 17,
    XED_CATEGORY_CET = 18,
    XED_CATEGORY_CLFLUSHOPT = 19,
    XED_CATEGORY_CLWB = 20,
    XED_CATEGORY_CLZERO = 21,
    XED_CATEGORY_CMOV = 22,
    XED_CATEGORY_COMPRESS = 23,
    XED_CATEGORY_COND_BR = 24,
    XED_CATEGORY_CONFLICT = 25,
    XED_CATEGORY_CONVERT = 26,
    XED_CATEGORY_DATAXFER = 27,
    XED_CATEGORY_DECIMAL = 28,
    XED_CATEGORY_EXPAND = 29,
    XED_CATEGORY_FCMOV = 30,
    XED_CATEGORY_FLAGOP = 31,
    XED_CATEGORY_FMA4 = 32,
    XED_CATEGORY_GATHER = 33,
    XED_CATEGORY_IFMA = 34,
    XED_CATEGORY_INTERRUPT = 35,
    XED_CATEGORY_IO = 36,
    XED_CATEGORY_IOSTRINGOP = 37,
    XED_CATEGORY_KMASK = 38,
    XED_CATEGORY_LOGICAL = 39,
    XED_CATEGORY_LOGICAL_FP = 40,
    XED_CATEGORY_LZCNT = 41,
    XED_CATEGORY_MISC = 42,
    XED_CATEGORY_MMX = 43,
    XED_CATEGORY_MPX = 44,
    XED_CATEGORY_NOP = 45,
    XED_CATEGORY_PCLMULQDQ = 46,
    XED_CATEGORY_PKU = 47,
    XED_CATEGORY_POP = 48,
    XED_CATEGORY_PREFETCH = 49,
    XED_CATEGORY_PREFETCHWT1 = 50,
    XED_CATEGORY_PT = 51,
    XED_CATEGORY_PUSH = 52,
    XED_CATEGORY_RDRAND = 53,
    XED_CATEGORY_RDSEED = 54,
    XED_CATEGORY_RDWRFSGS = 55,
    XED_CATEGORY_RET = 56,
    XED_CATEGORY_ROTATE = 57,
    XED_CATEGORY_SCATTER = 58,
    XED_CATEGORY_SEGOP = 59,
    XED_CATEGORY_SEMAPHORE = 60,
    XED_CATEGORY_SETCC = 61,
    XED_CATEGORY_SGX = 62,
    XED_CATEGORY_SHA = 63,
    XED_CATEGORY_SHIFT = 64,
    XED_CATEGORY_SMAP = 65,
    XED_CATEGORY_SSE = 66,
    XED_CATEGORY_STRINGOP = 67,
    XED_CATEGORY_STTNI = 68,
    XED_CATEGORY_SYSCALL = 69,
    XED_CATEGORY_SYSRET = 70,
    XED_CATEGORY_SYSTEM = 71,
    XED_CATEGORY_TBM = 72,
    XED_CATEGORY_UNCOND_BR = 73,
    XED_CATEGORY_VFMA = 74,
    XED_CATEGORY_VTX = 75,
    XED_CATEGORY_WIDENOP = 76,
    XED_CATEGORY_X87_ALU = 77,
    XED_CATEGORY_XOP = 78,
    XED_CATEGORY_XSAVE = 79,
    XED_CATEGORY_XSAVEOPT = 80,
    XED_CATEGORY_LAST = 81,
}
extern "C" {
    pub fn str2xed_category_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_category_enum_t;
}
extern "C" {
    pub fn xed_category_enum_t2str(p: xed_category_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_category_enum_t_last() -> xed_category_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_extension_enum_t {
    XED_EXTENSION_INVALID = 0,
    XED_EXTENSION_3DNOW = 1,
    XED_EXTENSION_AES = 2,
    XED_EXTENSION_AVX = 3,
    XED_EXTENSION_AVX2 = 4,
    XED_EXTENSION_AVX2GATHER = 5,
    XED_EXTENSION_AVX512EVEX = 6,
    XED_EXTENSION_AVX512VEX = 7,
    XED_EXTENSION_AVXAES = 8,
    XED_EXTENSION_BASE = 9,
    XED_EXTENSION_BDW = 10,
    XED_EXTENSION_BMI1 = 11,
    XED_EXTENSION_BMI2 = 12,
    XED_EXTENSION_CET = 13,
    XED_EXTENSION_CLFLUSHOPT = 14,
    XED_EXTENSION_CLFSH = 15,
    XED_EXTENSION_CLWB = 16,
    XED_EXTENSION_CLZERO = 17,
    XED_EXTENSION_F16C = 18,
    XED_EXTENSION_FMA = 19,
    XED_EXTENSION_FMA4 = 20,
    XED_EXTENSION_INVPCID = 21,
    XED_EXTENSION_LONGMODE = 22,
    XED_EXTENSION_LZCNT = 23,
    XED_EXTENSION_MMX = 24,
    XED_EXTENSION_MONITOR = 25,
    XED_EXTENSION_MOVBE = 26,
    XED_EXTENSION_MPX = 27,
    XED_EXTENSION_PAUSE = 28,
    XED_EXTENSION_PCLMULQDQ = 29,
    XED_EXTENSION_PKU = 30,
    XED_EXTENSION_PREFETCHWT1 = 31,
    XED_EXTENSION_PT = 32,
    XED_EXTENSION_RDRAND = 33,
    XED_EXTENSION_RDSEED = 34,
    XED_EXTENSION_RDTSCP = 35,
    XED_EXTENSION_RDWRFSGS = 36,
    XED_EXTENSION_RTM = 37,
    XED_EXTENSION_SGX = 38,
    XED_EXTENSION_SHA = 39,
    XED_EXTENSION_SMAP = 40,
    XED_EXTENSION_SMX = 41,
    XED_EXTENSION_SSE = 42,
    XED_EXTENSION_SSE2 = 43,
    XED_EXTENSION_SSE3 = 44,
    XED_EXTENSION_SSE4 = 45,
    XED_EXTENSION_SSE4A = 46,
    XED_EXTENSION_SSSE3 = 47,
    XED_EXTENSION_SVM = 48,
    XED_EXTENSION_TBM = 49,
    XED_EXTENSION_VMFUNC = 50,
    XED_EXTENSION_VTX = 51,
    XED_EXTENSION_X87 = 52,
    XED_EXTENSION_XOP = 53,
    XED_EXTENSION_XSAVE = 54,
    XED_EXTENSION_XSAVEC = 55,
    XED_EXTENSION_XSAVEOPT = 56,
    XED_EXTENSION_XSAVES = 57,
    XED_EXTENSION_LAST = 58,
}
extern "C" {
    pub fn str2xed_extension_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_extension_enum_t;
}
extern "C" {
    pub fn xed_extension_enum_t2str(p: xed_extension_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_extension_enum_t_last() -> xed_extension_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_iclass_enum_t {
    XED_ICLASS_INVALID = 0,
    XED_ICLASS_AAA = 1,
    XED_ICLASS_AAD = 2,
    XED_ICLASS_AAM = 3,
    XED_ICLASS_AAS = 4,
    XED_ICLASS_ADC = 5,
    XED_ICLASS_ADCX = 6,
    XED_ICLASS_ADC_LOCK = 7,
    XED_ICLASS_ADD = 8,
    XED_ICLASS_ADDPD = 9,
    XED_ICLASS_ADDPS = 10,
    XED_ICLASS_ADDSD = 11,
    XED_ICLASS_ADDSS = 12,
    XED_ICLASS_ADDSUBPD = 13,
    XED_ICLASS_ADDSUBPS = 14,
    XED_ICLASS_ADD_LOCK = 15,
    XED_ICLASS_ADOX = 16,
    XED_ICLASS_AESDEC = 17,
    XED_ICLASS_AESDECLAST = 18,
    XED_ICLASS_AESENC = 19,
    XED_ICLASS_AESENCLAST = 20,
    XED_ICLASS_AESIMC = 21,
    XED_ICLASS_AESKEYGENASSIST = 22,
    XED_ICLASS_AND = 23,
    XED_ICLASS_ANDN = 24,
    XED_ICLASS_ANDNPD = 25,
    XED_ICLASS_ANDNPS = 26,
    XED_ICLASS_ANDPD = 27,
    XED_ICLASS_ANDPS = 28,
    XED_ICLASS_AND_LOCK = 29,
    XED_ICLASS_ARPL = 30,
    XED_ICLASS_BEXTR = 31,
    XED_ICLASS_BEXTR_XOP = 32,
    XED_ICLASS_BLCFILL = 33,
    XED_ICLASS_BLCI = 34,
    XED_ICLASS_BLCIC = 35,
    XED_ICLASS_BLCMSK = 36,
    XED_ICLASS_BLCS = 37,
    XED_ICLASS_BLENDPD = 38,
    XED_ICLASS_BLENDPS = 39,
    XED_ICLASS_BLENDVPD = 40,
    XED_ICLASS_BLENDVPS = 41,
    XED_ICLASS_BLSFILL = 42,
    XED_ICLASS_BLSI = 43,
    XED_ICLASS_BLSIC = 44,
    XED_ICLASS_BLSMSK = 45,
    XED_ICLASS_BLSR = 46,
    XED_ICLASS_BNDCL = 47,
    XED_ICLASS_BNDCN = 48,
    XED_ICLASS_BNDCU = 49,
    XED_ICLASS_BNDLDX = 50,
    XED_ICLASS_BNDMK = 51,
    XED_ICLASS_BNDMOV = 52,
    XED_ICLASS_BNDSTX = 53,
    XED_ICLASS_BOUND = 54,
    XED_ICLASS_BSF = 55,
    XED_ICLASS_BSR = 56,
    XED_ICLASS_BSWAP = 57,
    XED_ICLASS_BT = 58,
    XED_ICLASS_BTC = 59,
    XED_ICLASS_BTC_LOCK = 60,
    XED_ICLASS_BTR = 61,
    XED_ICLASS_BTR_LOCK = 62,
    XED_ICLASS_BTS = 63,
    XED_ICLASS_BTS_LOCK = 64,
    XED_ICLASS_BZHI = 65,
    XED_ICLASS_CALL_FAR = 66,
    XED_ICLASS_CALL_NEAR = 67,
    XED_ICLASS_CBW = 68,
    XED_ICLASS_CDQ = 69,
    XED_ICLASS_CDQE = 70,
    XED_ICLASS_CLAC = 71,
    XED_ICLASS_CLC = 72,
    XED_ICLASS_CLD = 73,
    XED_ICLASS_CLFLUSH = 74,
    XED_ICLASS_CLFLUSHOPT = 75,
    XED_ICLASS_CLGI = 76,
    XED_ICLASS_CLI = 77,
    XED_ICLASS_CLRSSBSY = 78,
    XED_ICLASS_CLTS = 79,
    XED_ICLASS_CLWB = 80,
    XED_ICLASS_CLZERO = 81,
    XED_ICLASS_CMC = 82,
    XED_ICLASS_CMOVB = 83,
    XED_ICLASS_CMOVBE = 84,
    XED_ICLASS_CMOVL = 85,
    XED_ICLASS_CMOVLE = 86,
    XED_ICLASS_CMOVNB = 87,
    XED_ICLASS_CMOVNBE = 88,
    XED_ICLASS_CMOVNL = 89,
    XED_ICLASS_CMOVNLE = 90,
    XED_ICLASS_CMOVNO = 91,
    XED_ICLASS_CMOVNP = 92,
    XED_ICLASS_CMOVNS = 93,
    XED_ICLASS_CMOVNZ = 94,
    XED_ICLASS_CMOVO = 95,
    XED_ICLASS_CMOVP = 96,
    XED_ICLASS_CMOVS = 97,
    XED_ICLASS_CMOVZ = 98,
    XED_ICLASS_CMP = 99,
    XED_ICLASS_CMPPD = 100,
    XED_ICLASS_CMPPS = 101,
    XED_ICLASS_CMPSB = 102,
    XED_ICLASS_CMPSD = 103,
    XED_ICLASS_CMPSD_XMM = 104,
    XED_ICLASS_CMPSQ = 105,
    XED_ICLASS_CMPSS = 106,
    XED_ICLASS_CMPSW = 107,
    XED_ICLASS_CMPXCHG = 108,
    XED_ICLASS_CMPXCHG16B = 109,
    XED_ICLASS_CMPXCHG16B_LOCK = 110,
    XED_ICLASS_CMPXCHG8B = 111,
    XED_ICLASS_CMPXCHG8B_LOCK = 112,
    XED_ICLASS_CMPXCHG_LOCK = 113,
    XED_ICLASS_COMISD = 114,
    XED_ICLASS_COMISS = 115,
    XED_ICLASS_CPUID = 116,
    XED_ICLASS_CQO = 117,
    XED_ICLASS_CRC32 = 118,
    XED_ICLASS_CVTDQ2PD = 119,
    XED_ICLASS_CVTDQ2PS = 120,
    XED_ICLASS_CVTPD2DQ = 121,
    XED_ICLASS_CVTPD2PI = 122,
    XED_ICLASS_CVTPD2PS = 123,
    XED_ICLASS_CVTPI2PD = 124,
    XED_ICLASS_CVTPI2PS = 125,
    XED_ICLASS_CVTPS2DQ = 126,
    XED_ICLASS_CVTPS2PD = 127,
    XED_ICLASS_CVTPS2PI = 128,
    XED_ICLASS_CVTSD2SI = 129,
    XED_ICLASS_CVTSD2SS = 130,
    XED_ICLASS_CVTSI2SD = 131,
    XED_ICLASS_CVTSI2SS = 132,
    XED_ICLASS_CVTSS2SD = 133,
    XED_ICLASS_CVTSS2SI = 134,
    XED_ICLASS_CVTTPD2DQ = 135,
    XED_ICLASS_CVTTPD2PI = 136,
    XED_ICLASS_CVTTPS2DQ = 137,
    XED_ICLASS_CVTTPS2PI = 138,
    XED_ICLASS_CVTTSD2SI = 139,
    XED_ICLASS_CVTTSS2SI = 140,
    XED_ICLASS_CWD = 141,
    XED_ICLASS_CWDE = 142,
    XED_ICLASS_DAA = 143,
    XED_ICLASS_DAS = 144,
    XED_ICLASS_DEC = 145,
    XED_ICLASS_DEC_LOCK = 146,
    XED_ICLASS_DIV = 147,
    XED_ICLASS_DIVPD = 148,
    XED_ICLASS_DIVPS = 149,
    XED_ICLASS_DIVSD = 150,
    XED_ICLASS_DIVSS = 151,
    XED_ICLASS_DPPD = 152,
    XED_ICLASS_DPPS = 153,
    XED_ICLASS_EMMS = 154,
    XED_ICLASS_ENCLS = 155,
    XED_ICLASS_ENCLU = 156,
    XED_ICLASS_ENDBR32 = 157,
    XED_ICLASS_ENDBR64 = 158,
    XED_ICLASS_ENTER = 159,
    XED_ICLASS_EXTRACTPS = 160,
    XED_ICLASS_EXTRQ = 161,
    XED_ICLASS_F2XM1 = 162,
    XED_ICLASS_FABS = 163,
    XED_ICLASS_FADD = 164,
    XED_ICLASS_FADDP = 165,
    XED_ICLASS_FBLD = 166,
    XED_ICLASS_FBSTP = 167,
    XED_ICLASS_FCHS = 168,
    XED_ICLASS_FCMOVB = 169,
    XED_ICLASS_FCMOVBE = 170,
    XED_ICLASS_FCMOVE = 171,
    XED_ICLASS_FCMOVNB = 172,
    XED_ICLASS_FCMOVNBE = 173,
    XED_ICLASS_FCMOVNE = 174,
    XED_ICLASS_FCMOVNU = 175,
    XED_ICLASS_FCMOVU = 176,
    XED_ICLASS_FCOM = 177,
    XED_ICLASS_FCOMI = 178,
    XED_ICLASS_FCOMIP = 179,
    XED_ICLASS_FCOMP = 180,
    XED_ICLASS_FCOMPP = 181,
    XED_ICLASS_FCOS = 182,
    XED_ICLASS_FDECSTP = 183,
    XED_ICLASS_FDISI8087_NOP = 184,
    XED_ICLASS_FDIV = 185,
    XED_ICLASS_FDIVP = 186,
    XED_ICLASS_FDIVR = 187,
    XED_ICLASS_FDIVRP = 188,
    XED_ICLASS_FEMMS = 189,
    XED_ICLASS_FENI8087_NOP = 190,
    XED_ICLASS_FFREE = 191,
    XED_ICLASS_FFREEP = 192,
    XED_ICLASS_FIADD = 193,
    XED_ICLASS_FICOM = 194,
    XED_ICLASS_FICOMP = 195,
    XED_ICLASS_FIDIV = 196,
    XED_ICLASS_FIDIVR = 197,
    XED_ICLASS_FILD = 198,
    XED_ICLASS_FIMUL = 199,
    XED_ICLASS_FINCSTP = 200,
    XED_ICLASS_FIST = 201,
    XED_ICLASS_FISTP = 202,
    XED_ICLASS_FISTTP = 203,
    XED_ICLASS_FISUB = 204,
    XED_ICLASS_FISUBR = 205,
    XED_ICLASS_FLD = 206,
    XED_ICLASS_FLD1 = 207,
    XED_ICLASS_FLDCW = 208,
    XED_ICLASS_FLDENV = 209,
    XED_ICLASS_FLDL2E = 210,
    XED_ICLASS_FLDL2T = 211,
    XED_ICLASS_FLDLG2 = 212,
    XED_ICLASS_FLDLN2 = 213,
    XED_ICLASS_FLDPI = 214,
    XED_ICLASS_FLDZ = 215,
    XED_ICLASS_FMUL = 216,
    XED_ICLASS_FMULP = 217,
    XED_ICLASS_FNCLEX = 218,
    XED_ICLASS_FNINIT = 219,
    XED_ICLASS_FNOP = 220,
    XED_ICLASS_FNSAVE = 221,
    XED_ICLASS_FNSTCW = 222,
    XED_ICLASS_FNSTENV = 223,
    XED_ICLASS_FNSTSW = 224,
    XED_ICLASS_FPATAN = 225,
    XED_ICLASS_FPREM = 226,
    XED_ICLASS_FPREM1 = 227,
    XED_ICLASS_FPTAN = 228,
    XED_ICLASS_FRNDINT = 229,
    XED_ICLASS_FRSTOR = 230,
    XED_ICLASS_FSCALE = 231,
    XED_ICLASS_FSETPM287_NOP = 232,
    XED_ICLASS_FSIN = 233,
    XED_ICLASS_FSINCOS = 234,
    XED_ICLASS_FSQRT = 235,
    XED_ICLASS_FST = 236,
    XED_ICLASS_FSTP = 237,
    XED_ICLASS_FSTPNCE = 238,
    XED_ICLASS_FSUB = 239,
    XED_ICLASS_FSUBP = 240,
    XED_ICLASS_FSUBR = 241,
    XED_ICLASS_FSUBRP = 242,
    XED_ICLASS_FTST = 243,
    XED_ICLASS_FUCOM = 244,
    XED_ICLASS_FUCOMI = 245,
    XED_ICLASS_FUCOMIP = 246,
    XED_ICLASS_FUCOMP = 247,
    XED_ICLASS_FUCOMPP = 248,
    XED_ICLASS_FWAIT = 249,
    XED_ICLASS_FXAM = 250,
    XED_ICLASS_FXCH = 251,
    XED_ICLASS_FXRSTOR = 252,
    XED_ICLASS_FXRSTOR64 = 253,
    XED_ICLASS_FXSAVE = 254,
    XED_ICLASS_FXSAVE64 = 255,
    XED_ICLASS_FXTRACT = 256,
    XED_ICLASS_FYL2X = 257,
    XED_ICLASS_FYL2XP1 = 258,
    XED_ICLASS_GETSEC = 259,
    XED_ICLASS_HADDPD = 260,
    XED_ICLASS_HADDPS = 261,
    XED_ICLASS_HLT = 262,
    XED_ICLASS_HSUBPD = 263,
    XED_ICLASS_HSUBPS = 264,
    XED_ICLASS_IDIV = 265,
    XED_ICLASS_IMUL = 266,
    XED_ICLASS_IN = 267,
    XED_ICLASS_INC = 268,
    XED_ICLASS_INCSSPD = 269,
    XED_ICLASS_INCSSPQ = 270,
    XED_ICLASS_INC_LOCK = 271,
    XED_ICLASS_INSB = 272,
    XED_ICLASS_INSD = 273,
    XED_ICLASS_INSERTPS = 274,
    XED_ICLASS_INSERTQ = 275,
    XED_ICLASS_INSW = 276,
    XED_ICLASS_INT = 277,
    XED_ICLASS_INT1 = 278,
    XED_ICLASS_INT3 = 279,
    XED_ICLASS_INTO = 280,
    XED_ICLASS_INVD = 281,
    XED_ICLASS_INVEPT = 282,
    XED_ICLASS_INVLPG = 283,
    XED_ICLASS_INVLPGA = 284,
    XED_ICLASS_INVPCID = 285,
    XED_ICLASS_INVVPID = 286,
    XED_ICLASS_IRET = 287,
    XED_ICLASS_IRETD = 288,
    XED_ICLASS_IRETQ = 289,
    XED_ICLASS_JB = 290,
    XED_ICLASS_JBE = 291,
    XED_ICLASS_JCXZ = 292,
    XED_ICLASS_JECXZ = 293,
    XED_ICLASS_JL = 294,
    XED_ICLASS_JLE = 295,
    XED_ICLASS_JMP = 296,
    XED_ICLASS_JMP_FAR = 297,
    XED_ICLASS_JNB = 298,
    XED_ICLASS_JNBE = 299,
    XED_ICLASS_JNL = 300,
    XED_ICLASS_JNLE = 301,
    XED_ICLASS_JNO = 302,
    XED_ICLASS_JNP = 303,
    XED_ICLASS_JNS = 304,
    XED_ICLASS_JNZ = 305,
    XED_ICLASS_JO = 306,
    XED_ICLASS_JP = 307,
    XED_ICLASS_JRCXZ = 308,
    XED_ICLASS_JS = 309,
    XED_ICLASS_JZ = 310,
    XED_ICLASS_KADDB = 311,
    XED_ICLASS_KADDD = 312,
    XED_ICLASS_KADDQ = 313,
    XED_ICLASS_KADDW = 314,
    XED_ICLASS_KANDB = 315,
    XED_ICLASS_KANDD = 316,
    XED_ICLASS_KANDNB = 317,
    XED_ICLASS_KANDND = 318,
    XED_ICLASS_KANDNQ = 319,
    XED_ICLASS_KANDNW = 320,
    XED_ICLASS_KANDQ = 321,
    XED_ICLASS_KANDW = 322,
    XED_ICLASS_KMOVB = 323,
    XED_ICLASS_KMOVD = 324,
    XED_ICLASS_KMOVQ = 325,
    XED_ICLASS_KMOVW = 326,
    XED_ICLASS_KNOTB = 327,
    XED_ICLASS_KNOTD = 328,
    XED_ICLASS_KNOTQ = 329,
    XED_ICLASS_KNOTW = 330,
    XED_ICLASS_KORB = 331,
    XED_ICLASS_KORD = 332,
    XED_ICLASS_KORQ = 333,
    XED_ICLASS_KORTESTB = 334,
    XED_ICLASS_KORTESTD = 335,
    XED_ICLASS_KORTESTQ = 336,
    XED_ICLASS_KORTESTW = 337,
    XED_ICLASS_KORW = 338,
    XED_ICLASS_KSHIFTLB = 339,
    XED_ICLASS_KSHIFTLD = 340,
    XED_ICLASS_KSHIFTLQ = 341,
    XED_ICLASS_KSHIFTLW = 342,
    XED_ICLASS_KSHIFTRB = 343,
    XED_ICLASS_KSHIFTRD = 344,
    XED_ICLASS_KSHIFTRQ = 345,
    XED_ICLASS_KSHIFTRW = 346,
    XED_ICLASS_KTESTB = 347,
    XED_ICLASS_KTESTD = 348,
    XED_ICLASS_KTESTQ = 349,
    XED_ICLASS_KTESTW = 350,
    XED_ICLASS_KUNPCKBW = 351,
    XED_ICLASS_KUNPCKDQ = 352,
    XED_ICLASS_KUNPCKWD = 353,
    XED_ICLASS_KXNORB = 354,
    XED_ICLASS_KXNORD = 355,
    XED_ICLASS_KXNORQ = 356,
    XED_ICLASS_KXNORW = 357,
    XED_ICLASS_KXORB = 358,
    XED_ICLASS_KXORD = 359,
    XED_ICLASS_KXORQ = 360,
    XED_ICLASS_KXORW = 361,
    XED_ICLASS_LAHF = 362,
    XED_ICLASS_LAR = 363,
    XED_ICLASS_LDDQU = 364,
    XED_ICLASS_LDMXCSR = 365,
    XED_ICLASS_LDS = 366,
    XED_ICLASS_LEA = 367,
    XED_ICLASS_LEAVE = 368,
    XED_ICLASS_LES = 369,
    XED_ICLASS_LFENCE = 370,
    XED_ICLASS_LFS = 371,
    XED_ICLASS_LGDT = 372,
    XED_ICLASS_LGS = 373,
    XED_ICLASS_LIDT = 374,
    XED_ICLASS_LLDT = 375,
    XED_ICLASS_LLWPCB = 376,
    XED_ICLASS_LMSW = 377,
    XED_ICLASS_LODSB = 378,
    XED_ICLASS_LODSD = 379,
    XED_ICLASS_LODSQ = 380,
    XED_ICLASS_LODSW = 381,
    XED_ICLASS_LOOP = 382,
    XED_ICLASS_LOOPE = 383,
    XED_ICLASS_LOOPNE = 384,
    XED_ICLASS_LSL = 385,
    XED_ICLASS_LSS = 386,
    XED_ICLASS_LTR = 387,
    XED_ICLASS_LWPINS = 388,
    XED_ICLASS_LWPVAL = 389,
    XED_ICLASS_LZCNT = 390,
    XED_ICLASS_MASKMOVDQU = 391,
    XED_ICLASS_MASKMOVQ = 392,
    XED_ICLASS_MAXPD = 393,
    XED_ICLASS_MAXPS = 394,
    XED_ICLASS_MAXSD = 395,
    XED_ICLASS_MAXSS = 396,
    XED_ICLASS_MFENCE = 397,
    XED_ICLASS_MINPD = 398,
    XED_ICLASS_MINPS = 399,
    XED_ICLASS_MINSD = 400,
    XED_ICLASS_MINSS = 401,
    XED_ICLASS_MONITOR = 402,
    XED_ICLASS_MOV = 403,
    XED_ICLASS_MOVAPD = 404,
    XED_ICLASS_MOVAPS = 405,
    XED_ICLASS_MOVBE = 406,
    XED_ICLASS_MOVD = 407,
    XED_ICLASS_MOVDDUP = 408,
    XED_ICLASS_MOVDQ2Q = 409,
    XED_ICLASS_MOVDQA = 410,
    XED_ICLASS_MOVDQU = 411,
    XED_ICLASS_MOVHLPS = 412,
    XED_ICLASS_MOVHPD = 413,
    XED_ICLASS_MOVHPS = 414,
    XED_ICLASS_MOVLHPS = 415,
    XED_ICLASS_MOVLPD = 416,
    XED_ICLASS_MOVLPS = 417,
    XED_ICLASS_MOVMSKPD = 418,
    XED_ICLASS_MOVMSKPS = 419,
    XED_ICLASS_MOVNTDQ = 420,
    XED_ICLASS_MOVNTDQA = 421,
    XED_ICLASS_MOVNTI = 422,
    XED_ICLASS_MOVNTPD = 423,
    XED_ICLASS_MOVNTPS = 424,
    XED_ICLASS_MOVNTQ = 425,
    XED_ICLASS_MOVNTSD = 426,
    XED_ICLASS_MOVNTSS = 427,
    XED_ICLASS_MOVQ = 428,
    XED_ICLASS_MOVQ2DQ = 429,
    XED_ICLASS_MOVSB = 430,
    XED_ICLASS_MOVSD = 431,
    XED_ICLASS_MOVSD_XMM = 432,
    XED_ICLASS_MOVSHDUP = 433,
    XED_ICLASS_MOVSLDUP = 434,
    XED_ICLASS_MOVSQ = 435,
    XED_ICLASS_MOVSS = 436,
    XED_ICLASS_MOVSW = 437,
    XED_ICLASS_MOVSX = 438,
    XED_ICLASS_MOVSXD = 439,
    XED_ICLASS_MOVUPD = 440,
    XED_ICLASS_MOVUPS = 441,
    XED_ICLASS_MOVZX = 442,
    XED_ICLASS_MOV_CR = 443,
    XED_ICLASS_MOV_DR = 444,
    XED_ICLASS_MPSADBW = 445,
    XED_ICLASS_MUL = 446,
    XED_ICLASS_MULPD = 447,
    XED_ICLASS_MULPS = 448,
    XED_ICLASS_MULSD = 449,
    XED_ICLASS_MULSS = 450,
    XED_ICLASS_MULX = 451,
    XED_ICLASS_MWAIT = 452,
    XED_ICLASS_NEG = 453,
    XED_ICLASS_NEG_LOCK = 454,
    XED_ICLASS_NOP = 455,
    XED_ICLASS_NOP2 = 456,
    XED_ICLASS_NOP3 = 457,
    XED_ICLASS_NOP4 = 458,
    XED_ICLASS_NOP5 = 459,
    XED_ICLASS_NOP6 = 460,
    XED_ICLASS_NOP7 = 461,
    XED_ICLASS_NOP8 = 462,
    XED_ICLASS_NOP9 = 463,
    XED_ICLASS_NOT = 464,
    XED_ICLASS_NOT_LOCK = 465,
    XED_ICLASS_OR = 466,
    XED_ICLASS_ORPD = 467,
    XED_ICLASS_ORPS = 468,
    XED_ICLASS_OR_LOCK = 469,
    XED_ICLASS_OUT = 470,
    XED_ICLASS_OUTSB = 471,
    XED_ICLASS_OUTSD = 472,
    XED_ICLASS_OUTSW = 473,
    XED_ICLASS_PABSB = 474,
    XED_ICLASS_PABSD = 475,
    XED_ICLASS_PABSW = 476,
    XED_ICLASS_PACKSSDW = 477,
    XED_ICLASS_PACKSSWB = 478,
    XED_ICLASS_PACKUSDW = 479,
    XED_ICLASS_PACKUSWB = 480,
    XED_ICLASS_PADDB = 481,
    XED_ICLASS_PADDD = 482,
    XED_ICLASS_PADDQ = 483,
    XED_ICLASS_PADDSB = 484,
    XED_ICLASS_PADDSW = 485,
    XED_ICLASS_PADDUSB = 486,
    XED_ICLASS_PADDUSW = 487,
    XED_ICLASS_PADDW = 488,
    XED_ICLASS_PALIGNR = 489,
    XED_ICLASS_PAND = 490,
    XED_ICLASS_PANDN = 491,
    XED_ICLASS_PAUSE = 492,
    XED_ICLASS_PAVGB = 493,
    XED_ICLASS_PAVGUSB = 494,
    XED_ICLASS_PAVGW = 495,
    XED_ICLASS_PBLENDVB = 496,
    XED_ICLASS_PBLENDW = 497,
    XED_ICLASS_PCLMULQDQ = 498,
    XED_ICLASS_PCMPEQB = 499,
    XED_ICLASS_PCMPEQD = 500,
    XED_ICLASS_PCMPEQQ = 501,
    XED_ICLASS_PCMPEQW = 502,
    XED_ICLASS_PCMPESTRI = 503,
    XED_ICLASS_PCMPESTRM = 504,
    XED_ICLASS_PCMPGTB = 505,
    XED_ICLASS_PCMPGTD = 506,
    XED_ICLASS_PCMPGTQ = 507,
    XED_ICLASS_PCMPGTW = 508,
    XED_ICLASS_PCMPISTRI = 509,
    XED_ICLASS_PCMPISTRM = 510,
    XED_ICLASS_PDEP = 511,
    XED_ICLASS_PEXT = 512,
    XED_ICLASS_PEXTRB = 513,
    XED_ICLASS_PEXTRD = 514,
    XED_ICLASS_PEXTRQ = 515,
    XED_ICLASS_PEXTRW = 516,
    XED_ICLASS_PEXTRW_SSE4 = 517,
    XED_ICLASS_PF2ID = 518,
    XED_ICLASS_PF2IW = 519,
    XED_ICLASS_PFACC = 520,
    XED_ICLASS_PFADD = 521,
    XED_ICLASS_PFCMPEQ = 522,
    XED_ICLASS_PFCMPGE = 523,
    XED_ICLASS_PFCMPGT = 524,
    XED_ICLASS_PFCPIT1 = 525,
    XED_ICLASS_PFMAX = 526,
    XED_ICLASS_PFMIN = 527,
    XED_ICLASS_PFMUL = 528,
    XED_ICLASS_PFNACC = 529,
    XED_ICLASS_PFPNACC = 530,
    XED_ICLASS_PFRCP = 531,
    XED_ICLASS_PFRCPIT2 = 532,
    XED_ICLASS_PFRSQIT1 = 533,
    XED_ICLASS_PFSQRT = 534,
    XED_ICLASS_PFSUB = 535,
    XED_ICLASS_PFSUBR = 536,
    XED_ICLASS_PHADDD = 537,
    XED_ICLASS_PHADDSW = 538,
    XED_ICLASS_PHADDW = 539,
    XED_ICLASS_PHMINPOSUW = 540,
    XED_ICLASS_PHSUBD = 541,
    XED_ICLASS_PHSUBSW = 542,
    XED_ICLASS_PHSUBW = 543,
    XED_ICLASS_PI2FD = 544,
    XED_ICLASS_PI2FW = 545,
    XED_ICLASS_PINSRB = 546,
    XED_ICLASS_PINSRD = 547,
    XED_ICLASS_PINSRQ = 548,
    XED_ICLASS_PINSRW = 549,
    XED_ICLASS_PMADDUBSW = 550,
    XED_ICLASS_PMADDWD = 551,
    XED_ICLASS_PMAXSB = 552,
    XED_ICLASS_PMAXSD = 553,
    XED_ICLASS_PMAXSW = 554,
    XED_ICLASS_PMAXUB = 555,
    XED_ICLASS_PMAXUD = 556,
    XED_ICLASS_PMAXUW = 557,
    XED_ICLASS_PMINSB = 558,
    XED_ICLASS_PMINSD = 559,
    XED_ICLASS_PMINSW = 560,
    XED_ICLASS_PMINUB = 561,
    XED_ICLASS_PMINUD = 562,
    XED_ICLASS_PMINUW = 563,
    XED_ICLASS_PMOVMSKB = 564,
    XED_ICLASS_PMOVSXBD = 565,
    XED_ICLASS_PMOVSXBQ = 566,
    XED_ICLASS_PMOVSXBW = 567,
    XED_ICLASS_PMOVSXDQ = 568,
    XED_ICLASS_PMOVSXWD = 569,
    XED_ICLASS_PMOVSXWQ = 570,
    XED_ICLASS_PMOVZXBD = 571,
    XED_ICLASS_PMOVZXBQ = 572,
    XED_ICLASS_PMOVZXBW = 573,
    XED_ICLASS_PMOVZXDQ = 574,
    XED_ICLASS_PMOVZXWD = 575,
    XED_ICLASS_PMOVZXWQ = 576,
    XED_ICLASS_PMULDQ = 577,
    XED_ICLASS_PMULHRSW = 578,
    XED_ICLASS_PMULHRW = 579,
    XED_ICLASS_PMULHUW = 580,
    XED_ICLASS_PMULHW = 581,
    XED_ICLASS_PMULLD = 582,
    XED_ICLASS_PMULLW = 583,
    XED_ICLASS_PMULUDQ = 584,
    XED_ICLASS_POP = 585,
    XED_ICLASS_POPA = 586,
    XED_ICLASS_POPAD = 587,
    XED_ICLASS_POPCNT = 588,
    XED_ICLASS_POPF = 589,
    XED_ICLASS_POPFD = 590,
    XED_ICLASS_POPFQ = 591,
    XED_ICLASS_POR = 592,
    XED_ICLASS_PREFETCHNTA = 593,
    XED_ICLASS_PREFETCHT0 = 594,
    XED_ICLASS_PREFETCHT1 = 595,
    XED_ICLASS_PREFETCHT2 = 596,
    XED_ICLASS_PREFETCHW = 597,
    XED_ICLASS_PREFETCHWT1 = 598,
    XED_ICLASS_PREFETCH_EXCLUSIVE = 599,
    XED_ICLASS_PREFETCH_RESERVED = 600,
    XED_ICLASS_PSADBW = 601,
    XED_ICLASS_PSHUFB = 602,
    XED_ICLASS_PSHUFD = 603,
    XED_ICLASS_PSHUFHW = 604,
    XED_ICLASS_PSHUFLW = 605,
    XED_ICLASS_PSHUFW = 606,
    XED_ICLASS_PSIGNB = 607,
    XED_ICLASS_PSIGND = 608,
    XED_ICLASS_PSIGNW = 609,
    XED_ICLASS_PSLLD = 610,
    XED_ICLASS_PSLLDQ = 611,
    XED_ICLASS_PSLLQ = 612,
    XED_ICLASS_PSLLW = 613,
    XED_ICLASS_PSRAD = 614,
    XED_ICLASS_PSRAW = 615,
    XED_ICLASS_PSRLD = 616,
    XED_ICLASS_PSRLDQ = 617,
    XED_ICLASS_PSRLQ = 618,
    XED_ICLASS_PSRLW = 619,
    XED_ICLASS_PSUBB = 620,
    XED_ICLASS_PSUBD = 621,
    XED_ICLASS_PSUBQ = 622,
    XED_ICLASS_PSUBSB = 623,
    XED_ICLASS_PSUBSW = 624,
    XED_ICLASS_PSUBUSB = 625,
    XED_ICLASS_PSUBUSW = 626,
    XED_ICLASS_PSUBW = 627,
    XED_ICLASS_PSWAPD = 628,
    XED_ICLASS_PTEST = 629,
    XED_ICLASS_PTWRITE = 630,
    XED_ICLASS_PUNPCKHBW = 631,
    XED_ICLASS_PUNPCKHDQ = 632,
    XED_ICLASS_PUNPCKHQDQ = 633,
    XED_ICLASS_PUNPCKHWD = 634,
    XED_ICLASS_PUNPCKLBW = 635,
    XED_ICLASS_PUNPCKLDQ = 636,
    XED_ICLASS_PUNPCKLQDQ = 637,
    XED_ICLASS_PUNPCKLWD = 638,
    XED_ICLASS_PUSH = 639,
    XED_ICLASS_PUSHA = 640,
    XED_ICLASS_PUSHAD = 641,
    XED_ICLASS_PUSHF = 642,
    XED_ICLASS_PUSHFD = 643,
    XED_ICLASS_PUSHFQ = 644,
    XED_ICLASS_PXOR = 645,
    XED_ICLASS_RCL = 646,
    XED_ICLASS_RCPPS = 647,
    XED_ICLASS_RCPSS = 648,
    XED_ICLASS_RCR = 649,
    XED_ICLASS_RDFSBASE = 650,
    XED_ICLASS_RDGSBASE = 651,
    XED_ICLASS_RDMSR = 652,
    XED_ICLASS_RDPKRU = 653,
    XED_ICLASS_RDPMC = 654,
    XED_ICLASS_RDRAND = 655,
    XED_ICLASS_RDSEED = 656,
    XED_ICLASS_RDSSPD = 657,
    XED_ICLASS_RDSSPQ = 658,
    XED_ICLASS_RDTSC = 659,
    XED_ICLASS_RDTSCP = 660,
    XED_ICLASS_REPE_CMPSB = 661,
    XED_ICLASS_REPE_CMPSD = 662,
    XED_ICLASS_REPE_CMPSQ = 663,
    XED_ICLASS_REPE_CMPSW = 664,
    XED_ICLASS_REPE_SCASB = 665,
    XED_ICLASS_REPE_SCASD = 666,
    XED_ICLASS_REPE_SCASQ = 667,
    XED_ICLASS_REPE_SCASW = 668,
    XED_ICLASS_REPNE_CMPSB = 669,
    XED_ICLASS_REPNE_CMPSD = 670,
    XED_ICLASS_REPNE_CMPSQ = 671,
    XED_ICLASS_REPNE_CMPSW = 672,
    XED_ICLASS_REPNE_SCASB = 673,
    XED_ICLASS_REPNE_SCASD = 674,
    XED_ICLASS_REPNE_SCASQ = 675,
    XED_ICLASS_REPNE_SCASW = 676,
    XED_ICLASS_REP_INSB = 677,
    XED_ICLASS_REP_INSD = 678,
    XED_ICLASS_REP_INSW = 679,
    XED_ICLASS_REP_LODSB = 680,
    XED_ICLASS_REP_LODSD = 681,
    XED_ICLASS_REP_LODSQ = 682,
    XED_ICLASS_REP_LODSW = 683,
    XED_ICLASS_REP_MOVSB = 684,
    XED_ICLASS_REP_MOVSD = 685,
    XED_ICLASS_REP_MOVSQ = 686,
    XED_ICLASS_REP_MOVSW = 687,
    XED_ICLASS_REP_OUTSB = 688,
    XED_ICLASS_REP_OUTSD = 689,
    XED_ICLASS_REP_OUTSW = 690,
    XED_ICLASS_REP_STOSB = 691,
    XED_ICLASS_REP_STOSD = 692,
    XED_ICLASS_REP_STOSQ = 693,
    XED_ICLASS_REP_STOSW = 694,
    XED_ICLASS_RET_FAR = 695,
    XED_ICLASS_RET_NEAR = 696,
    XED_ICLASS_ROL = 697,
    XED_ICLASS_ROR = 698,
    XED_ICLASS_RORX = 699,
    XED_ICLASS_ROUNDPD = 700,
    XED_ICLASS_ROUNDPS = 701,
    XED_ICLASS_ROUNDSD = 702,
    XED_ICLASS_ROUNDSS = 703,
    XED_ICLASS_RSM = 704,
    XED_ICLASS_RSQRTPS = 705,
    XED_ICLASS_RSQRTSS = 706,
    XED_ICLASS_RSTORSSP = 707,
    XED_ICLASS_SAHF = 708,
    XED_ICLASS_SALC = 709,
    XED_ICLASS_SAR = 710,
    XED_ICLASS_SARX = 711,
    XED_ICLASS_SAVESSP = 712,
    XED_ICLASS_SBB = 713,
    XED_ICLASS_SBB_LOCK = 714,
    XED_ICLASS_SCASB = 715,
    XED_ICLASS_SCASD = 716,
    XED_ICLASS_SCASQ = 717,
    XED_ICLASS_SCASW = 718,
    XED_ICLASS_SETB = 719,
    XED_ICLASS_SETBE = 720,
    XED_ICLASS_SETL = 721,
    XED_ICLASS_SETLE = 722,
    XED_ICLASS_SETNB = 723,
    XED_ICLASS_SETNBE = 724,
    XED_ICLASS_SETNL = 725,
    XED_ICLASS_SETNLE = 726,
    XED_ICLASS_SETNO = 727,
    XED_ICLASS_SETNP = 728,
    XED_ICLASS_SETNS = 729,
    XED_ICLASS_SETNZ = 730,
    XED_ICLASS_SETO = 731,
    XED_ICLASS_SETP = 732,
    XED_ICLASS_SETS = 733,
    XED_ICLASS_SETSSBSY = 734,
    XED_ICLASS_SETZ = 735,
    XED_ICLASS_SFENCE = 736,
    XED_ICLASS_SGDT = 737,
    XED_ICLASS_SHA1MSG1 = 738,
    XED_ICLASS_SHA1MSG2 = 739,
    XED_ICLASS_SHA1NEXTE = 740,
    XED_ICLASS_SHA1RNDS4 = 741,
    XED_ICLASS_SHA256MSG1 = 742,
    XED_ICLASS_SHA256MSG2 = 743,
    XED_ICLASS_SHA256RNDS2 = 744,
    XED_ICLASS_SHL = 745,
    XED_ICLASS_SHLD = 746,
    XED_ICLASS_SHLX = 747,
    XED_ICLASS_SHR = 748,
    XED_ICLASS_SHRD = 749,
    XED_ICLASS_SHRX = 750,
    XED_ICLASS_SHUFPD = 751,
    XED_ICLASS_SHUFPS = 752,
    XED_ICLASS_SIDT = 753,
    XED_ICLASS_SKINIT = 754,
    XED_ICLASS_SLDT = 755,
    XED_ICLASS_SLWPCB = 756,
    XED_ICLASS_SMSW = 757,
    XED_ICLASS_SQRTPD = 758,
    XED_ICLASS_SQRTPS = 759,
    XED_ICLASS_SQRTSD = 760,
    XED_ICLASS_SQRTSS = 761,
    XED_ICLASS_STAC = 762,
    XED_ICLASS_STC = 763,
    XED_ICLASS_STD = 764,
    XED_ICLASS_STGI = 765,
    XED_ICLASS_STI = 766,
    XED_ICLASS_STMXCSR = 767,
    XED_ICLASS_STOSB = 768,
    XED_ICLASS_STOSD = 769,
    XED_ICLASS_STOSQ = 770,
    XED_ICLASS_STOSW = 771,
    XED_ICLASS_STR = 772,
    XED_ICLASS_SUB = 773,
    XED_ICLASS_SUBPD = 774,
    XED_ICLASS_SUBPS = 775,
    XED_ICLASS_SUBSD = 776,
    XED_ICLASS_SUBSS = 777,
    XED_ICLASS_SUB_LOCK = 778,
    XED_ICLASS_SWAPGS = 779,
    XED_ICLASS_SYSCALL = 780,
    XED_ICLASS_SYSCALL_AMD = 781,
    XED_ICLASS_SYSENTER = 782,
    XED_ICLASS_SYSEXIT = 783,
    XED_ICLASS_SYSRET = 784,
    XED_ICLASS_SYSRET_AMD = 785,
    XED_ICLASS_T1MSKC = 786,
    XED_ICLASS_TEST = 787,
    XED_ICLASS_TZCNT = 788,
    XED_ICLASS_TZMSK = 789,
    XED_ICLASS_UCOMISD = 790,
    XED_ICLASS_UCOMISS = 791,
    XED_ICLASS_UD0 = 792,
    XED_ICLASS_UD1 = 793,
    XED_ICLASS_UD2 = 794,
    XED_ICLASS_UNPCKHPD = 795,
    XED_ICLASS_UNPCKHPS = 796,
    XED_ICLASS_UNPCKLPD = 797,
    XED_ICLASS_UNPCKLPS = 798,
    XED_ICLASS_V4FMADDPS = 799,
    XED_ICLASS_V4FMADDSS = 800,
    XED_ICLASS_V4FNMADDPS = 801,
    XED_ICLASS_V4FNMADDSS = 802,
    XED_ICLASS_VADDPD = 803,
    XED_ICLASS_VADDPS = 804,
    XED_ICLASS_VADDSD = 805,
    XED_ICLASS_VADDSS = 806,
    XED_ICLASS_VADDSUBPD = 807,
    XED_ICLASS_VADDSUBPS = 808,
    XED_ICLASS_VAESDEC = 809,
    XED_ICLASS_VAESDECLAST = 810,
    XED_ICLASS_VAESENC = 811,
    XED_ICLASS_VAESENCLAST = 812,
    XED_ICLASS_VAESIMC = 813,
    XED_ICLASS_VAESKEYGENASSIST = 814,
    XED_ICLASS_VALIGND = 815,
    XED_ICLASS_VALIGNQ = 816,
    XED_ICLASS_VANDNPD = 817,
    XED_ICLASS_VANDNPS = 818,
    XED_ICLASS_VANDPD = 819,
    XED_ICLASS_VANDPS = 820,
    XED_ICLASS_VBLENDMPD = 821,
    XED_ICLASS_VBLENDMPS = 822,
    XED_ICLASS_VBLENDPD = 823,
    XED_ICLASS_VBLENDPS = 824,
    XED_ICLASS_VBLENDVPD = 825,
    XED_ICLASS_VBLENDVPS = 826,
    XED_ICLASS_VBROADCASTF128 = 827,
    XED_ICLASS_VBROADCASTF32X2 = 828,
    XED_ICLASS_VBROADCASTF32X4 = 829,
    XED_ICLASS_VBROADCASTF32X8 = 830,
    XED_ICLASS_VBROADCASTF64X2 = 831,
    XED_ICLASS_VBROADCASTF64X4 = 832,
    XED_ICLASS_VBROADCASTI128 = 833,
    XED_ICLASS_VBROADCASTI32X2 = 834,
    XED_ICLASS_VBROADCASTI32X4 = 835,
    XED_ICLASS_VBROADCASTI32X8 = 836,
    XED_ICLASS_VBROADCASTI64X2 = 837,
    XED_ICLASS_VBROADCASTI64X4 = 838,
    XED_ICLASS_VBROADCASTSD = 839,
    XED_ICLASS_VBROADCASTSS = 840,
    XED_ICLASS_VCMPPD = 841,
    XED_ICLASS_VCMPPS = 842,
    XED_ICLASS_VCMPSD = 843,
    XED_ICLASS_VCMPSS = 844,
    XED_ICLASS_VCOMISD = 845,
    XED_ICLASS_VCOMISS = 846,
    XED_ICLASS_VCOMPRESSPD = 847,
    XED_ICLASS_VCOMPRESSPS = 848,
    XED_ICLASS_VCVTDQ2PD = 849,
    XED_ICLASS_VCVTDQ2PS = 850,
    XED_ICLASS_VCVTPD2DQ = 851,
    XED_ICLASS_VCVTPD2PS = 852,
    XED_ICLASS_VCVTPD2QQ = 853,
    XED_ICLASS_VCVTPD2UDQ = 854,
    XED_ICLASS_VCVTPD2UQQ = 855,
    XED_ICLASS_VCVTPH2PS = 856,
    XED_ICLASS_VCVTPS2DQ = 857,
    XED_ICLASS_VCVTPS2PD = 858,
    XED_ICLASS_VCVTPS2PH = 859,
    XED_ICLASS_VCVTPS2QQ = 860,
    XED_ICLASS_VCVTPS2UDQ = 861,
    XED_ICLASS_VCVTPS2UQQ = 862,
    XED_ICLASS_VCVTQQ2PD = 863,
    XED_ICLASS_VCVTQQ2PS = 864,
    XED_ICLASS_VCVTSD2SI = 865,
    XED_ICLASS_VCVTSD2SS = 866,
    XED_ICLASS_VCVTSD2USI = 867,
    XED_ICLASS_VCVTSI2SD = 868,
    XED_ICLASS_VCVTSI2SS = 869,
    XED_ICLASS_VCVTSS2SD = 870,
    XED_ICLASS_VCVTSS2SI = 871,
    XED_ICLASS_VCVTSS2USI = 872,
    XED_ICLASS_VCVTTPD2DQ = 873,
    XED_ICLASS_VCVTTPD2QQ = 874,
    XED_ICLASS_VCVTTPD2UDQ = 875,
    XED_ICLASS_VCVTTPD2UQQ = 876,
    XED_ICLASS_VCVTTPS2DQ = 877,
    XED_ICLASS_VCVTTPS2QQ = 878,
    XED_ICLASS_VCVTTPS2UDQ = 879,
    XED_ICLASS_VCVTTPS2UQQ = 880,
    XED_ICLASS_VCVTTSD2SI = 881,
    XED_ICLASS_VCVTTSD2USI = 882,
    XED_ICLASS_VCVTTSS2SI = 883,
    XED_ICLASS_VCVTTSS2USI = 884,
    XED_ICLASS_VCVTUDQ2PD = 885,
    XED_ICLASS_VCVTUDQ2PS = 886,
    XED_ICLASS_VCVTUQQ2PD = 887,
    XED_ICLASS_VCVTUQQ2PS = 888,
    XED_ICLASS_VCVTUSI2SD = 889,
    XED_ICLASS_VCVTUSI2SS = 890,
    XED_ICLASS_VDBPSADBW = 891,
    XED_ICLASS_VDIVPD = 892,
    XED_ICLASS_VDIVPS = 893,
    XED_ICLASS_VDIVSD = 894,
    XED_ICLASS_VDIVSS = 895,
    XED_ICLASS_VDPPD = 896,
    XED_ICLASS_VDPPS = 897,
    XED_ICLASS_VERR = 898,
    XED_ICLASS_VERW = 899,
    XED_ICLASS_VEXP2PD = 900,
    XED_ICLASS_VEXP2PS = 901,
    XED_ICLASS_VEXPANDPD = 902,
    XED_ICLASS_VEXPANDPS = 903,
    XED_ICLASS_VEXTRACTF128 = 904,
    XED_ICLASS_VEXTRACTF32X4 = 905,
    XED_ICLASS_VEXTRACTF32X8 = 906,
    XED_ICLASS_VEXTRACTF64X2 = 907,
    XED_ICLASS_VEXTRACTF64X4 = 908,
    XED_ICLASS_VEXTRACTI128 = 909,
    XED_ICLASS_VEXTRACTI32X4 = 910,
    XED_ICLASS_VEXTRACTI32X8 = 911,
    XED_ICLASS_VEXTRACTI64X2 = 912,
    XED_ICLASS_VEXTRACTI64X4 = 913,
    XED_ICLASS_VEXTRACTPS = 914,
    XED_ICLASS_VFIXUPIMMPD = 915,
    XED_ICLASS_VFIXUPIMMPS = 916,
    XED_ICLASS_VFIXUPIMMSD = 917,
    XED_ICLASS_VFIXUPIMMSS = 918,
    XED_ICLASS_VFMADD132PD = 919,
    XED_ICLASS_VFMADD132PS = 920,
    XED_ICLASS_VFMADD132SD = 921,
    XED_ICLASS_VFMADD132SS = 922,
    XED_ICLASS_VFMADD213PD = 923,
    XED_ICLASS_VFMADD213PS = 924,
    XED_ICLASS_VFMADD213SD = 925,
    XED_ICLASS_VFMADD213SS = 926,
    XED_ICLASS_VFMADD231PD = 927,
    XED_ICLASS_VFMADD231PS = 928,
    XED_ICLASS_VFMADD231SD = 929,
    XED_ICLASS_VFMADD231SS = 930,
    XED_ICLASS_VFMADDPD = 931,
    XED_ICLASS_VFMADDPS = 932,
    XED_ICLASS_VFMADDSD = 933,
    XED_ICLASS_VFMADDSS = 934,
    XED_ICLASS_VFMADDSUB132PD = 935,
    XED_ICLASS_VFMADDSUB132PS = 936,
    XED_ICLASS_VFMADDSUB213PD = 937,
    XED_ICLASS_VFMADDSUB213PS = 938,
    XED_ICLASS_VFMADDSUB231PD = 939,
    XED_ICLASS_VFMADDSUB231PS = 940,
    XED_ICLASS_VFMADDSUBPD = 941,
    XED_ICLASS_VFMADDSUBPS = 942,
    XED_ICLASS_VFMSUB132PD = 943,
    XED_ICLASS_VFMSUB132PS = 944,
    XED_ICLASS_VFMSUB132SD = 945,
    XED_ICLASS_VFMSUB132SS = 946,
    XED_ICLASS_VFMSUB213PD = 947,
    XED_ICLASS_VFMSUB213PS = 948,
    XED_ICLASS_VFMSUB213SD = 949,
    XED_ICLASS_VFMSUB213SS = 950,
    XED_ICLASS_VFMSUB231PD = 951,
    XED_ICLASS_VFMSUB231PS = 952,
    XED_ICLASS_VFMSUB231SD = 953,
    XED_ICLASS_VFMSUB231SS = 954,
    XED_ICLASS_VFMSUBADD132PD = 955,
    XED_ICLASS_VFMSUBADD132PS = 956,
    XED_ICLASS_VFMSUBADD213PD = 957,
    XED_ICLASS_VFMSUBADD213PS = 958,
    XED_ICLASS_VFMSUBADD231PD = 959,
    XED_ICLASS_VFMSUBADD231PS = 960,
    XED_ICLASS_VFMSUBADDPD = 961,
    XED_ICLASS_VFMSUBADDPS = 962,
    XED_ICLASS_VFMSUBPD = 963,
    XED_ICLASS_VFMSUBPS = 964,
    XED_ICLASS_VFMSUBSD = 965,
    XED_ICLASS_VFMSUBSS = 966,
    XED_ICLASS_VFNMADD132PD = 967,
    XED_ICLASS_VFNMADD132PS = 968,
    XED_ICLASS_VFNMADD132SD = 969,
    XED_ICLASS_VFNMADD132SS = 970,
    XED_ICLASS_VFNMADD213PD = 971,
    XED_ICLASS_VFNMADD213PS = 972,
    XED_ICLASS_VFNMADD213SD = 973,
    XED_ICLASS_VFNMADD213SS = 974,
    XED_ICLASS_VFNMADD231PD = 975,
    XED_ICLASS_VFNMADD231PS = 976,
    XED_ICLASS_VFNMADD231SD = 977,
    XED_ICLASS_VFNMADD231SS = 978,
    XED_ICLASS_VFNMADDPD = 979,
    XED_ICLASS_VFNMADDPS = 980,
    XED_ICLASS_VFNMADDSD = 981,
    XED_ICLASS_VFNMADDSS = 982,
    XED_ICLASS_VFNMSUB132PD = 983,
    XED_ICLASS_VFNMSUB132PS = 984,
    XED_ICLASS_VFNMSUB132SD = 985,
    XED_ICLASS_VFNMSUB132SS = 986,
    XED_ICLASS_VFNMSUB213PD = 987,
    XED_ICLASS_VFNMSUB213PS = 988,
    XED_ICLASS_VFNMSUB213SD = 989,
    XED_ICLASS_VFNMSUB213SS = 990,
    XED_ICLASS_VFNMSUB231PD = 991,
    XED_ICLASS_VFNMSUB231PS = 992,
    XED_ICLASS_VFNMSUB231SD = 993,
    XED_ICLASS_VFNMSUB231SS = 994,
    XED_ICLASS_VFNMSUBPD = 995,
    XED_ICLASS_VFNMSUBPS = 996,
    XED_ICLASS_VFNMSUBSD = 997,
    XED_ICLASS_VFNMSUBSS = 998,
    XED_ICLASS_VFPCLASSPD = 999,
    XED_ICLASS_VFPCLASSPS = 1000,
    XED_ICLASS_VFPCLASSSD = 1001,
    XED_ICLASS_VFPCLASSSS = 1002,
    XED_ICLASS_VFRCZPD = 1003,
    XED_ICLASS_VFRCZPS = 1004,
    XED_ICLASS_VFRCZSD = 1005,
    XED_ICLASS_VFRCZSS = 1006,
    XED_ICLASS_VGATHERDPD = 1007,
    XED_ICLASS_VGATHERDPS = 1008,
    XED_ICLASS_VGATHERPF0DPD = 1009,
    XED_ICLASS_VGATHERPF0DPS = 1010,
    XED_ICLASS_VGATHERPF0QPD = 1011,
    XED_ICLASS_VGATHERPF0QPS = 1012,
    XED_ICLASS_VGATHERPF1DPD = 1013,
    XED_ICLASS_VGATHERPF1DPS = 1014,
    XED_ICLASS_VGATHERPF1QPD = 1015,
    XED_ICLASS_VGATHERPF1QPS = 1016,
    XED_ICLASS_VGATHERQPD = 1017,
    XED_ICLASS_VGATHERQPS = 1018,
    XED_ICLASS_VGETEXPPD = 1019,
    XED_ICLASS_VGETEXPPS = 1020,
    XED_ICLASS_VGETEXPSD = 1021,
    XED_ICLASS_VGETEXPSS = 1022,
    XED_ICLASS_VGETMANTPD = 1023,
    XED_ICLASS_VGETMANTPS = 1024,
    XED_ICLASS_VGETMANTSD = 1025,
    XED_ICLASS_VGETMANTSS = 1026,
    XED_ICLASS_VHADDPD = 1027,
    XED_ICLASS_VHADDPS = 1028,
    XED_ICLASS_VHSUBPD = 1029,
    XED_ICLASS_VHSUBPS = 1030,
    XED_ICLASS_VINSERTF128 = 1031,
    XED_ICLASS_VINSERTF32X4 = 1032,
    XED_ICLASS_VINSERTF32X8 = 1033,
    XED_ICLASS_VINSERTF64X2 = 1034,
    XED_ICLASS_VINSERTF64X4 = 1035,
    XED_ICLASS_VINSERTI128 = 1036,
    XED_ICLASS_VINSERTI32X4 = 1037,
    XED_ICLASS_VINSERTI32X8 = 1038,
    XED_ICLASS_VINSERTI64X2 = 1039,
    XED_ICLASS_VINSERTI64X4 = 1040,
    XED_ICLASS_VINSERTPS = 1041,
    XED_ICLASS_VLDDQU = 1042,
    XED_ICLASS_VLDMXCSR = 1043,
    XED_ICLASS_VMASKMOVDQU = 1044,
    XED_ICLASS_VMASKMOVPD = 1045,
    XED_ICLASS_VMASKMOVPS = 1046,
    XED_ICLASS_VMAXPD = 1047,
    XED_ICLASS_VMAXPS = 1048,
    XED_ICLASS_VMAXSD = 1049,
    XED_ICLASS_VMAXSS = 1050,
    XED_ICLASS_VMCALL = 1051,
    XED_ICLASS_VMCLEAR = 1052,
    XED_ICLASS_VMFUNC = 1053,
    XED_ICLASS_VMINPD = 1054,
    XED_ICLASS_VMINPS = 1055,
    XED_ICLASS_VMINSD = 1056,
    XED_ICLASS_VMINSS = 1057,
    XED_ICLASS_VMLAUNCH = 1058,
    XED_ICLASS_VMLOAD = 1059,
    XED_ICLASS_VMMCALL = 1060,
    XED_ICLASS_VMOVAPD = 1061,
    XED_ICLASS_VMOVAPS = 1062,
    XED_ICLASS_VMOVD = 1063,
    XED_ICLASS_VMOVDDUP = 1064,
    XED_ICLASS_VMOVDQA = 1065,
    XED_ICLASS_VMOVDQA32 = 1066,
    XED_ICLASS_VMOVDQA64 = 1067,
    XED_ICLASS_VMOVDQU = 1068,
    XED_ICLASS_VMOVDQU16 = 1069,
    XED_ICLASS_VMOVDQU32 = 1070,
    XED_ICLASS_VMOVDQU64 = 1071,
    XED_ICLASS_VMOVDQU8 = 1072,
    XED_ICLASS_VMOVHLPS = 1073,
    XED_ICLASS_VMOVHPD = 1074,
    XED_ICLASS_VMOVHPS = 1075,
    XED_ICLASS_VMOVLHPS = 1076,
    XED_ICLASS_VMOVLPD = 1077,
    XED_ICLASS_VMOVLPS = 1078,
    XED_ICLASS_VMOVMSKPD = 1079,
    XED_ICLASS_VMOVMSKPS = 1080,
    XED_ICLASS_VMOVNTDQ = 1081,
    XED_ICLASS_VMOVNTDQA = 1082,
    XED_ICLASS_VMOVNTPD = 1083,
    XED_ICLASS_VMOVNTPS = 1084,
    XED_ICLASS_VMOVQ = 1085,
    XED_ICLASS_VMOVSD = 1086,
    XED_ICLASS_VMOVSHDUP = 1087,
    XED_ICLASS_VMOVSLDUP = 1088,
    XED_ICLASS_VMOVSS = 1089,
    XED_ICLASS_VMOVUPD = 1090,
    XED_ICLASS_VMOVUPS = 1091,
    XED_ICLASS_VMPSADBW = 1092,
    XED_ICLASS_VMPTRLD = 1093,
    XED_ICLASS_VMPTRST = 1094,
    XED_ICLASS_VMREAD = 1095,
    XED_ICLASS_VMRESUME = 1096,
    XED_ICLASS_VMRUN = 1097,
    XED_ICLASS_VMSAVE = 1098,
    XED_ICLASS_VMULPD = 1099,
    XED_ICLASS_VMULPS = 1100,
    XED_ICLASS_VMULSD = 1101,
    XED_ICLASS_VMULSS = 1102,
    XED_ICLASS_VMWRITE = 1103,
    XED_ICLASS_VMXOFF = 1104,
    XED_ICLASS_VMXON = 1105,
    XED_ICLASS_VORPD = 1106,
    XED_ICLASS_VORPS = 1107,
    XED_ICLASS_VP4DPWSSD = 1108,
    XED_ICLASS_VP4DPWSSDS = 1109,
    XED_ICLASS_VPABSB = 1110,
    XED_ICLASS_VPABSD = 1111,
    XED_ICLASS_VPABSQ = 1112,
    XED_ICLASS_VPABSW = 1113,
    XED_ICLASS_VPACKSSDW = 1114,
    XED_ICLASS_VPACKSSWB = 1115,
    XED_ICLASS_VPACKUSDW = 1116,
    XED_ICLASS_VPACKUSWB = 1117,
    XED_ICLASS_VPADDB = 1118,
    XED_ICLASS_VPADDD = 1119,
    XED_ICLASS_VPADDQ = 1120,
    XED_ICLASS_VPADDSB = 1121,
    XED_ICLASS_VPADDSW = 1122,
    XED_ICLASS_VPADDUSB = 1123,
    XED_ICLASS_VPADDUSW = 1124,
    XED_ICLASS_VPADDW = 1125,
    XED_ICLASS_VPALIGNR = 1126,
    XED_ICLASS_VPAND = 1127,
    XED_ICLASS_VPANDD = 1128,
    XED_ICLASS_VPANDN = 1129,
    XED_ICLASS_VPANDND = 1130,
    XED_ICLASS_VPANDNQ = 1131,
    XED_ICLASS_VPANDQ = 1132,
    XED_ICLASS_VPAVGB = 1133,
    XED_ICLASS_VPAVGW = 1134,
    XED_ICLASS_VPBLENDD = 1135,
    XED_ICLASS_VPBLENDMB = 1136,
    XED_ICLASS_VPBLENDMD = 1137,
    XED_ICLASS_VPBLENDMQ = 1138,
    XED_ICLASS_VPBLENDMW = 1139,
    XED_ICLASS_VPBLENDVB = 1140,
    XED_ICLASS_VPBLENDW = 1141,
    XED_ICLASS_VPBROADCASTB = 1142,
    XED_ICLASS_VPBROADCASTD = 1143,
    XED_ICLASS_VPBROADCASTMB2Q = 1144,
    XED_ICLASS_VPBROADCASTMW2D = 1145,
    XED_ICLASS_VPBROADCASTQ = 1146,
    XED_ICLASS_VPBROADCASTW = 1147,
    XED_ICLASS_VPCLMULQDQ = 1148,
    XED_ICLASS_VPCMOV = 1149,
    XED_ICLASS_VPCMPB = 1150,
    XED_ICLASS_VPCMPD = 1151,
    XED_ICLASS_VPCMPEQB = 1152,
    XED_ICLASS_VPCMPEQD = 1153,
    XED_ICLASS_VPCMPEQQ = 1154,
    XED_ICLASS_VPCMPEQW = 1155,
    XED_ICLASS_VPCMPESTRI = 1156,
    XED_ICLASS_VPCMPESTRM = 1157,
    XED_ICLASS_VPCMPGTB = 1158,
    XED_ICLASS_VPCMPGTD = 1159,
    XED_ICLASS_VPCMPGTQ = 1160,
    XED_ICLASS_VPCMPGTW = 1161,
    XED_ICLASS_VPCMPISTRI = 1162,
    XED_ICLASS_VPCMPISTRM = 1163,
    XED_ICLASS_VPCMPQ = 1164,
    XED_ICLASS_VPCMPUB = 1165,
    XED_ICLASS_VPCMPUD = 1166,
    XED_ICLASS_VPCMPUQ = 1167,
    XED_ICLASS_VPCMPUW = 1168,
    XED_ICLASS_VPCMPW = 1169,
    XED_ICLASS_VPCOMB = 1170,
    XED_ICLASS_VPCOMD = 1171,
    XED_ICLASS_VPCOMPRESSD = 1172,
    XED_ICLASS_VPCOMPRESSQ = 1173,
    XED_ICLASS_VPCOMQ = 1174,
    XED_ICLASS_VPCOMUB = 1175,
    XED_ICLASS_VPCOMUD = 1176,
    XED_ICLASS_VPCOMUQ = 1177,
    XED_ICLASS_VPCOMUW = 1178,
    XED_ICLASS_VPCOMW = 1179,
    XED_ICLASS_VPCONFLICTD = 1180,
    XED_ICLASS_VPCONFLICTQ = 1181,
    XED_ICLASS_VPERM2F128 = 1182,
    XED_ICLASS_VPERM2I128 = 1183,
    XED_ICLASS_VPERMB = 1184,
    XED_ICLASS_VPERMD = 1185,
    XED_ICLASS_VPERMI2B = 1186,
    XED_ICLASS_VPERMI2D = 1187,
    XED_ICLASS_VPERMI2PD = 1188,
    XED_ICLASS_VPERMI2PS = 1189,
    XED_ICLASS_VPERMI2Q = 1190,
    XED_ICLASS_VPERMI2W = 1191,
    XED_ICLASS_VPERMIL2PD = 1192,
    XED_ICLASS_VPERMIL2PS = 1193,
    XED_ICLASS_VPERMILPD = 1194,
    XED_ICLASS_VPERMILPS = 1195,
    XED_ICLASS_VPERMPD = 1196,
    XED_ICLASS_VPERMPS = 1197,
    XED_ICLASS_VPERMQ = 1198,
    XED_ICLASS_VPERMT2B = 1199,
    XED_ICLASS_VPERMT2D = 1200,
    XED_ICLASS_VPERMT2PD = 1201,
    XED_ICLASS_VPERMT2PS = 1202,
    XED_ICLASS_VPERMT2Q = 1203,
    XED_ICLASS_VPERMT2W = 1204,
    XED_ICLASS_VPERMW = 1205,
    XED_ICLASS_VPEXPANDD = 1206,
    XED_ICLASS_VPEXPANDQ = 1207,
    XED_ICLASS_VPEXTRB = 1208,
    XED_ICLASS_VPEXTRD = 1209,
    XED_ICLASS_VPEXTRQ = 1210,
    XED_ICLASS_VPEXTRW = 1211,
    XED_ICLASS_VPGATHERDD = 1212,
    XED_ICLASS_VPGATHERDQ = 1213,
    XED_ICLASS_VPGATHERQD = 1214,
    XED_ICLASS_VPGATHERQQ = 1215,
    XED_ICLASS_VPHADDBD = 1216,
    XED_ICLASS_VPHADDBQ = 1217,
    XED_ICLASS_VPHADDBW = 1218,
    XED_ICLASS_VPHADDD = 1219,
    XED_ICLASS_VPHADDDQ = 1220,
    XED_ICLASS_VPHADDSW = 1221,
    XED_ICLASS_VPHADDUBD = 1222,
    XED_ICLASS_VPHADDUBQ = 1223,
    XED_ICLASS_VPHADDUBW = 1224,
    XED_ICLASS_VPHADDUDQ = 1225,
    XED_ICLASS_VPHADDUWD = 1226,
    XED_ICLASS_VPHADDUWQ = 1227,
    XED_ICLASS_VPHADDW = 1228,
    XED_ICLASS_VPHADDWD = 1229,
    XED_ICLASS_VPHADDWQ = 1230,
    XED_ICLASS_VPHMINPOSUW = 1231,
    XED_ICLASS_VPHSUBBW = 1232,
    XED_ICLASS_VPHSUBD = 1233,
    XED_ICLASS_VPHSUBDQ = 1234,
    XED_ICLASS_VPHSUBSW = 1235,
    XED_ICLASS_VPHSUBW = 1236,
    XED_ICLASS_VPHSUBWD = 1237,
    XED_ICLASS_VPINSRB = 1238,
    XED_ICLASS_VPINSRD = 1239,
    XED_ICLASS_VPINSRQ = 1240,
    XED_ICLASS_VPINSRW = 1241,
    XED_ICLASS_VPLZCNTD = 1242,
    XED_ICLASS_VPLZCNTQ = 1243,
    XED_ICLASS_VPMACSDD = 1244,
    XED_ICLASS_VPMACSDQH = 1245,
    XED_ICLASS_VPMACSDQL = 1246,
    XED_ICLASS_VPMACSSDD = 1247,
    XED_ICLASS_VPMACSSDQH = 1248,
    XED_ICLASS_VPMACSSDQL = 1249,
    XED_ICLASS_VPMACSSWD = 1250,
    XED_ICLASS_VPMACSSWW = 1251,
    XED_ICLASS_VPMACSWD = 1252,
    XED_ICLASS_VPMACSWW = 1253,
    XED_ICLASS_VPMADCSSWD = 1254,
    XED_ICLASS_VPMADCSWD = 1255,
    XED_ICLASS_VPMADD52HUQ = 1256,
    XED_ICLASS_VPMADD52LUQ = 1257,
    XED_ICLASS_VPMADDUBSW = 1258,
    XED_ICLASS_VPMADDWD = 1259,
    XED_ICLASS_VPMASKMOVD = 1260,
    XED_ICLASS_VPMASKMOVQ = 1261,
    XED_ICLASS_VPMAXSB = 1262,
    XED_ICLASS_VPMAXSD = 1263,
    XED_ICLASS_VPMAXSQ = 1264,
    XED_ICLASS_VPMAXSW = 1265,
    XED_ICLASS_VPMAXUB = 1266,
    XED_ICLASS_VPMAXUD = 1267,
    XED_ICLASS_VPMAXUQ = 1268,
    XED_ICLASS_VPMAXUW = 1269,
    XED_ICLASS_VPMINSB = 1270,
    XED_ICLASS_VPMINSD = 1271,
    XED_ICLASS_VPMINSQ = 1272,
    XED_ICLASS_VPMINSW = 1273,
    XED_ICLASS_VPMINUB = 1274,
    XED_ICLASS_VPMINUD = 1275,
    XED_ICLASS_VPMINUQ = 1276,
    XED_ICLASS_VPMINUW = 1277,
    XED_ICLASS_VPMOVB2M = 1278,
    XED_ICLASS_VPMOVD2M = 1279,
    XED_ICLASS_VPMOVDB = 1280,
    XED_ICLASS_VPMOVDW = 1281,
    XED_ICLASS_VPMOVM2B = 1282,
    XED_ICLASS_VPMOVM2D = 1283,
    XED_ICLASS_VPMOVM2Q = 1284,
    XED_ICLASS_VPMOVM2W = 1285,
    XED_ICLASS_VPMOVMSKB = 1286,
    XED_ICLASS_VPMOVQ2M = 1287,
    XED_ICLASS_VPMOVQB = 1288,
    XED_ICLASS_VPMOVQD = 1289,
    XED_ICLASS_VPMOVQW = 1290,
    XED_ICLASS_VPMOVSDB = 1291,
    XED_ICLASS_VPMOVSDW = 1292,
    XED_ICLASS_VPMOVSQB = 1293,
    XED_ICLASS_VPMOVSQD = 1294,
    XED_ICLASS_VPMOVSQW = 1295,
    XED_ICLASS_VPMOVSWB = 1296,
    XED_ICLASS_VPMOVSXBD = 1297,
    XED_ICLASS_VPMOVSXBQ = 1298,
    XED_ICLASS_VPMOVSXBW = 1299,
    XED_ICLASS_VPMOVSXDQ = 1300,
    XED_ICLASS_VPMOVSXWD = 1301,
    XED_ICLASS_VPMOVSXWQ = 1302,
    XED_ICLASS_VPMOVUSDB = 1303,
    XED_ICLASS_VPMOVUSDW = 1304,
    XED_ICLASS_VPMOVUSQB = 1305,
    XED_ICLASS_VPMOVUSQD = 1306,
    XED_ICLASS_VPMOVUSQW = 1307,
    XED_ICLASS_VPMOVUSWB = 1308,
    XED_ICLASS_VPMOVW2M = 1309,
    XED_ICLASS_VPMOVWB = 1310,
    XED_ICLASS_VPMOVZXBD = 1311,
    XED_ICLASS_VPMOVZXBQ = 1312,
    XED_ICLASS_VPMOVZXBW = 1313,
    XED_ICLASS_VPMOVZXDQ = 1314,
    XED_ICLASS_VPMOVZXWD = 1315,
    XED_ICLASS_VPMOVZXWQ = 1316,
    XED_ICLASS_VPMULDQ = 1317,
    XED_ICLASS_VPMULHRSW = 1318,
    XED_ICLASS_VPMULHUW = 1319,
    XED_ICLASS_VPMULHW = 1320,
    XED_ICLASS_VPMULLD = 1321,
    XED_ICLASS_VPMULLQ = 1322,
    XED_ICLASS_VPMULLW = 1323,
    XED_ICLASS_VPMULTISHIFTQB = 1324,
    XED_ICLASS_VPMULUDQ = 1325,
    XED_ICLASS_VPOPCNTD = 1326,
    XED_ICLASS_VPOPCNTQ = 1327,
    XED_ICLASS_VPOR = 1328,
    XED_ICLASS_VPORD = 1329,
    XED_ICLASS_VPORQ = 1330,
    XED_ICLASS_VPPERM = 1331,
    XED_ICLASS_VPROLD = 1332,
    XED_ICLASS_VPROLQ = 1333,
    XED_ICLASS_VPROLVD = 1334,
    XED_ICLASS_VPROLVQ = 1335,
    XED_ICLASS_VPRORD = 1336,
    XED_ICLASS_VPRORQ = 1337,
    XED_ICLASS_VPRORVD = 1338,
    XED_ICLASS_VPRORVQ = 1339,
    XED_ICLASS_VPROTB = 1340,
    XED_ICLASS_VPROTD = 1341,
    XED_ICLASS_VPROTQ = 1342,
    XED_ICLASS_VPROTW = 1343,
    XED_ICLASS_VPSADBW = 1344,
    XED_ICLASS_VPSCATTERDD = 1345,
    XED_ICLASS_VPSCATTERDQ = 1346,
    XED_ICLASS_VPSCATTERQD = 1347,
    XED_ICLASS_VPSCATTERQQ = 1348,
    XED_ICLASS_VPSHAB = 1349,
    XED_ICLASS_VPSHAD = 1350,
    XED_ICLASS_VPSHAQ = 1351,
    XED_ICLASS_VPSHAW = 1352,
    XED_ICLASS_VPSHLB = 1353,
    XED_ICLASS_VPSHLD = 1354,
    XED_ICLASS_VPSHLQ = 1355,
    XED_ICLASS_VPSHLW = 1356,
    XED_ICLASS_VPSHUFB = 1357,
    XED_ICLASS_VPSHUFD = 1358,
    XED_ICLASS_VPSHUFHW = 1359,
    XED_ICLASS_VPSHUFLW = 1360,
    XED_ICLASS_VPSIGNB = 1361,
    XED_ICLASS_VPSIGND = 1362,
    XED_ICLASS_VPSIGNW = 1363,
    XED_ICLASS_VPSLLD = 1364,
    XED_ICLASS_VPSLLDQ = 1365,
    XED_ICLASS_VPSLLQ = 1366,
    XED_ICLASS_VPSLLVD = 1367,
    XED_ICLASS_VPSLLVQ = 1368,
    XED_ICLASS_VPSLLVW = 1369,
    XED_ICLASS_VPSLLW = 1370,
    XED_ICLASS_VPSRAD = 1371,
    XED_ICLASS_VPSRAQ = 1372,
    XED_ICLASS_VPSRAVD = 1373,
    XED_ICLASS_VPSRAVQ = 1374,
    XED_ICLASS_VPSRAVW = 1375,
    XED_ICLASS_VPSRAW = 1376,
    XED_ICLASS_VPSRLD = 1377,
    XED_ICLASS_VPSRLDQ = 1378,
    XED_ICLASS_VPSRLQ = 1379,
    XED_ICLASS_VPSRLVD = 1380,
    XED_ICLASS_VPSRLVQ = 1381,
    XED_ICLASS_VPSRLVW = 1382,
    XED_ICLASS_VPSRLW = 1383,
    XED_ICLASS_VPSUBB = 1384,
    XED_ICLASS_VPSUBD = 1385,
    XED_ICLASS_VPSUBQ = 1386,
    XED_ICLASS_VPSUBSB = 1387,
    XED_ICLASS_VPSUBSW = 1388,
    XED_ICLASS_VPSUBUSB = 1389,
    XED_ICLASS_VPSUBUSW = 1390,
    XED_ICLASS_VPSUBW = 1391,
    XED_ICLASS_VPTERNLOGD = 1392,
    XED_ICLASS_VPTERNLOGQ = 1393,
    XED_ICLASS_VPTEST = 1394,
    XED_ICLASS_VPTESTMB = 1395,
    XED_ICLASS_VPTESTMD = 1396,
    XED_ICLASS_VPTESTMQ = 1397,
    XED_ICLASS_VPTESTMW = 1398,
    XED_ICLASS_VPTESTNMB = 1399,
    XED_ICLASS_VPTESTNMD = 1400,
    XED_ICLASS_VPTESTNMQ = 1401,
    XED_ICLASS_VPTESTNMW = 1402,
    XED_ICLASS_VPUNPCKHBW = 1403,
    XED_ICLASS_VPUNPCKHDQ = 1404,
    XED_ICLASS_VPUNPCKHQDQ = 1405,
    XED_ICLASS_VPUNPCKHWD = 1406,
    XED_ICLASS_VPUNPCKLBW = 1407,
    XED_ICLASS_VPUNPCKLDQ = 1408,
    XED_ICLASS_VPUNPCKLQDQ = 1409,
    XED_ICLASS_VPUNPCKLWD = 1410,
    XED_ICLASS_VPXOR = 1411,
    XED_ICLASS_VPXORD = 1412,
    XED_ICLASS_VPXORQ = 1413,
    XED_ICLASS_VRANGEPD = 1414,
    XED_ICLASS_VRANGEPS = 1415,
    XED_ICLASS_VRANGESD = 1416,
    XED_ICLASS_VRANGESS = 1417,
    XED_ICLASS_VRCP14PD = 1418,
    XED_ICLASS_VRCP14PS = 1419,
    XED_ICLASS_VRCP14SD = 1420,
    XED_ICLASS_VRCP14SS = 1421,
    XED_ICLASS_VRCP28PD = 1422,
    XED_ICLASS_VRCP28PS = 1423,
    XED_ICLASS_VRCP28SD = 1424,
    XED_ICLASS_VRCP28SS = 1425,
    XED_ICLASS_VRCPPS = 1426,
    XED_ICLASS_VRCPSS = 1427,
    XED_ICLASS_VREDUCEPD = 1428,
    XED_ICLASS_VREDUCEPS = 1429,
    XED_ICLASS_VREDUCESD = 1430,
    XED_ICLASS_VREDUCESS = 1431,
    XED_ICLASS_VRNDSCALEPD = 1432,
    XED_ICLASS_VRNDSCALEPS = 1433,
    XED_ICLASS_VRNDSCALESD = 1434,
    XED_ICLASS_VRNDSCALESS = 1435,
    XED_ICLASS_VROUNDPD = 1436,
    XED_ICLASS_VROUNDPS = 1437,
    XED_ICLASS_VROUNDSD = 1438,
    XED_ICLASS_VROUNDSS = 1439,
    XED_ICLASS_VRSQRT14PD = 1440,
    XED_ICLASS_VRSQRT14PS = 1441,
    XED_ICLASS_VRSQRT14SD = 1442,
    XED_ICLASS_VRSQRT14SS = 1443,
    XED_ICLASS_VRSQRT28PD = 1444,
    XED_ICLASS_VRSQRT28PS = 1445,
    XED_ICLASS_VRSQRT28SD = 1446,
    XED_ICLASS_VRSQRT28SS = 1447,
    XED_ICLASS_VRSQRTPS = 1448,
    XED_ICLASS_VRSQRTSS = 1449,
    XED_ICLASS_VSCALEFPD = 1450,
    XED_ICLASS_VSCALEFPS = 1451,
    XED_ICLASS_VSCALEFSD = 1452,
    XED_ICLASS_VSCALEFSS = 1453,
    XED_ICLASS_VSCATTERDPD = 1454,
    XED_ICLASS_VSCATTERDPS = 1455,
    XED_ICLASS_VSCATTERPF0DPD = 1456,
    XED_ICLASS_VSCATTERPF0DPS = 1457,
    XED_ICLASS_VSCATTERPF0QPD = 1458,
    XED_ICLASS_VSCATTERPF0QPS = 1459,
    XED_ICLASS_VSCATTERPF1DPD = 1460,
    XED_ICLASS_VSCATTERPF1DPS = 1461,
    XED_ICLASS_VSCATTERPF1QPD = 1462,
    XED_ICLASS_VSCATTERPF1QPS = 1463,
    XED_ICLASS_VSCATTERQPD = 1464,
    XED_ICLASS_VSCATTERQPS = 1465,
    XED_ICLASS_VSHUFF32X4 = 1466,
    XED_ICLASS_VSHUFF64X2 = 1467,
    XED_ICLASS_VSHUFI32X4 = 1468,
    XED_ICLASS_VSHUFI64X2 = 1469,
    XED_ICLASS_VSHUFPD = 1470,
    XED_ICLASS_VSHUFPS = 1471,
    XED_ICLASS_VSQRTPD = 1472,
    XED_ICLASS_VSQRTPS = 1473,
    XED_ICLASS_VSQRTSD = 1474,
    XED_ICLASS_VSQRTSS = 1475,
    XED_ICLASS_VSTMXCSR = 1476,
    XED_ICLASS_VSUBPD = 1477,
    XED_ICLASS_VSUBPS = 1478,
    XED_ICLASS_VSUBSD = 1479,
    XED_ICLASS_VSUBSS = 1480,
    XED_ICLASS_VTESTPD = 1481,
    XED_ICLASS_VTESTPS = 1482,
    XED_ICLASS_VUCOMISD = 1483,
    XED_ICLASS_VUCOMISS = 1484,
    XED_ICLASS_VUNPCKHPD = 1485,
    XED_ICLASS_VUNPCKHPS = 1486,
    XED_ICLASS_VUNPCKLPD = 1487,
    XED_ICLASS_VUNPCKLPS = 1488,
    XED_ICLASS_VXORPD = 1489,
    XED_ICLASS_VXORPS = 1490,
    XED_ICLASS_VZEROALL = 1491,
    XED_ICLASS_VZEROUPPER = 1492,
    XED_ICLASS_WBINVD = 1493,
    XED_ICLASS_WRFSBASE = 1494,
    XED_ICLASS_WRGSBASE = 1495,
    XED_ICLASS_WRMSR = 1496,
    XED_ICLASS_WRPKRU = 1497,
    XED_ICLASS_WRSSD = 1498,
    XED_ICLASS_WRSSQ = 1499,
    XED_ICLASS_WRUSSD = 1500,
    XED_ICLASS_WRUSSQ = 1501,
    XED_ICLASS_XABORT = 1502,
    XED_ICLASS_XADD = 1503,
    XED_ICLASS_XADD_LOCK = 1504,
    XED_ICLASS_XBEGIN = 1505,
    XED_ICLASS_XCHG = 1506,
    XED_ICLASS_XEND = 1507,
    XED_ICLASS_XGETBV = 1508,
    XED_ICLASS_XLAT = 1509,
    XED_ICLASS_XOR = 1510,
    XED_ICLASS_XORPD = 1511,
    XED_ICLASS_XORPS = 1512,
    XED_ICLASS_XOR_LOCK = 1513,
    XED_ICLASS_XRSTOR = 1514,
    XED_ICLASS_XRSTOR64 = 1515,
    XED_ICLASS_XRSTORS = 1516,
    XED_ICLASS_XRSTORS64 = 1517,
    XED_ICLASS_XSAVE = 1518,
    XED_ICLASS_XSAVE64 = 1519,
    XED_ICLASS_XSAVEC = 1520,
    XED_ICLASS_XSAVEC64 = 1521,
    XED_ICLASS_XSAVEOPT = 1522,
    XED_ICLASS_XSAVEOPT64 = 1523,
    XED_ICLASS_XSAVES = 1524,
    XED_ICLASS_XSAVES64 = 1525,
    XED_ICLASS_XSETBV = 1526,
    XED_ICLASS_XTEST = 1527,
    XED_ICLASS_LAST = 1528,
}
extern "C" {
    pub fn str2xed_iclass_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_iclass_enum_t;
}
extern "C" {
    pub fn xed_iclass_enum_t2str(p: xed_iclass_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_iclass_enum_t_last() -> xed_iclass_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_operand_visibility_enum_t {
    XED_OPVIS_INVALID = 0,
    XED_OPVIS_EXPLICIT = 1,
    XED_OPVIS_IMPLICIT = 2,
    XED_OPVIS_SUPPRESSED = 3,
    XED_OPVIS_LAST = 4,
}
extern "C" {
    pub fn str2xed_operand_visibility_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_operand_visibility_enum_t;
}
extern "C" {
    pub fn xed_operand_visibility_enum_t2str(p: xed_operand_visibility_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_operand_visibility_enum_t_last()
     -> xed_operand_visibility_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_operand_action_enum_t {
    XED_OPERAND_ACTION_INVALID = 0,
    XED_OPERAND_ACTION_RW = 1,
    XED_OPERAND_ACTION_R = 2,
    XED_OPERAND_ACTION_W = 3,
    XED_OPERAND_ACTION_RCW = 4,
    XED_OPERAND_ACTION_CW = 5,
    XED_OPERAND_ACTION_CRW = 6,
    XED_OPERAND_ACTION_CR = 7,
    XED_OPERAND_ACTION_LAST = 8,
}
extern "C" {
    pub fn str2xed_operand_action_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_operand_action_enum_t;
}
extern "C" {
    pub fn xed_operand_action_enum_t2str(p: xed_operand_action_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_operand_action_enum_t_last() -> xed_operand_action_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_operand_convert_enum_t {
    XED_OPERAND_CONVERT_INVALID = 0,
    XED_OPERAND_CONVERT_ZEROSTR = 1,
    XED_OPERAND_CONVERT_SAESTR = 2,
    XED_OPERAND_CONVERT_ROUNDC = 3,
    XED_OPERAND_CONVERT_BCASTSTR = 4,
    XED_OPERAND_CONVERT_LAST = 5,
}
extern "C" {
    pub fn str2xed_operand_convert_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_operand_convert_enum_t;
}
extern "C" {
    pub fn xed_operand_convert_enum_t2str(p: xed_operand_convert_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_operand_convert_enum_t_last() -> xed_operand_convert_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_operand_type_enum_t {
    XED_OPERAND_TYPE_INVALID = 0,
    XED_OPERAND_TYPE_ERROR = 1,
    XED_OPERAND_TYPE_IMM = 2,
    XED_OPERAND_TYPE_IMM_CONST = 3,
    XED_OPERAND_TYPE_NT_LOOKUP_FN = 4,
    XED_OPERAND_TYPE_NT_LOOKUP_FN4 = 5,
    XED_OPERAND_TYPE_REG = 6,
    XED_OPERAND_TYPE_LAST = 7,
}
extern "C" {
    pub fn str2xed_operand_type_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_operand_type_enum_t;
}
extern "C" {
    pub fn xed_operand_type_enum_t2str(p: xed_operand_type_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_operand_type_enum_t_last() -> xed_operand_type_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_nonterminal_enum_t {
    XED_NONTERMINAL_INVALID = 0,
    XED_NONTERMINAL_AR10 = 1,
    XED_NONTERMINAL_AR11 = 2,
    XED_NONTERMINAL_AR12 = 3,
    XED_NONTERMINAL_AR13 = 4,
    XED_NONTERMINAL_AR14 = 5,
    XED_NONTERMINAL_AR15 = 6,
    XED_NONTERMINAL_AR8 = 7,
    XED_NONTERMINAL_AR9 = 8,
    XED_NONTERMINAL_ARAX = 9,
    XED_NONTERMINAL_ARBP = 10,
    XED_NONTERMINAL_ARBX = 11,
    XED_NONTERMINAL_ARCX = 12,
    XED_NONTERMINAL_ARDI = 13,
    XED_NONTERMINAL_ARDX = 14,
    XED_NONTERMINAL_ARSI = 15,
    XED_NONTERMINAL_ARSP = 16,
    XED_NONTERMINAL_ASZ_NONTERM = 17,
    XED_NONTERMINAL_AVX512_ROUND = 18,
    XED_NONTERMINAL_AVX_INSTRUCTIONS = 19,
    XED_NONTERMINAL_AVX_SPLITTER = 20,
    XED_NONTERMINAL_BND_B = 21,
    XED_NONTERMINAL_BND_B_CHECK = 22,
    XED_NONTERMINAL_BND_R = 23,
    XED_NONTERMINAL_BND_R_CHECK = 24,
    XED_NONTERMINAL_BRANCH_HINT = 25,
    XED_NONTERMINAL_BRDISP32 = 26,
    XED_NONTERMINAL_BRDISP8 = 27,
    XED_NONTERMINAL_BRDISPZ = 28,
    XED_NONTERMINAL_CR_B = 29,
    XED_NONTERMINAL_CR_R = 30,
    XED_NONTERMINAL_CR_WIDTH = 31,
    XED_NONTERMINAL_DF64 = 32,
    XED_NONTERMINAL_DR_B = 33,
    XED_NONTERMINAL_DR_R = 34,
    XED_NONTERMINAL_ESIZE_128_BITS = 35,
    XED_NONTERMINAL_ESIZE_16_BITS = 36,
    XED_NONTERMINAL_ESIZE_1_BITS = 37,
    XED_NONTERMINAL_ESIZE_2_BITS = 38,
    XED_NONTERMINAL_ESIZE_32_BITS = 39,
    XED_NONTERMINAL_ESIZE_4_BITS = 40,
    XED_NONTERMINAL_ESIZE_64_BITS = 41,
    XED_NONTERMINAL_ESIZE_8_BITS = 42,
    XED_NONTERMINAL_EVEX_INSTRUCTIONS = 43,
    XED_NONTERMINAL_EVEX_SPLITTER = 44,
    XED_NONTERMINAL_FINAL_DSEG = 45,
    XED_NONTERMINAL_FINAL_DSEG1 = 46,
    XED_NONTERMINAL_FINAL_DSEG1_MODE64 = 47,
    XED_NONTERMINAL_FINAL_DSEG1_NOT64 = 48,
    XED_NONTERMINAL_FINAL_DSEG_MODE64 = 49,
    XED_NONTERMINAL_FINAL_DSEG_NOT64 = 50,
    XED_NONTERMINAL_FINAL_ESEG = 51,
    XED_NONTERMINAL_FINAL_ESEG1 = 52,
    XED_NONTERMINAL_FINAL_SSEG = 53,
    XED_NONTERMINAL_FINAL_SSEG0 = 54,
    XED_NONTERMINAL_FINAL_SSEG1 = 55,
    XED_NONTERMINAL_FINAL_SSEG_MODE64 = 56,
    XED_NONTERMINAL_FINAL_SSEG_NOT64 = 57,
    XED_NONTERMINAL_FIX_ROUND_LEN128 = 58,
    XED_NONTERMINAL_FIX_ROUND_LEN512 = 59,
    XED_NONTERMINAL_FORCE64 = 60,
    XED_NONTERMINAL_GPR16_B = 61,
    XED_NONTERMINAL_GPR16_R = 62,
    XED_NONTERMINAL_GPR16_SB = 63,
    XED_NONTERMINAL_GPR32_B = 64,
    XED_NONTERMINAL_GPR32_R = 65,
    XED_NONTERMINAL_GPR32_SB = 66,
    XED_NONTERMINAL_GPR32_X = 67,
    XED_NONTERMINAL_GPR64_B = 68,
    XED_NONTERMINAL_GPR64_R = 69,
    XED_NONTERMINAL_GPR64_SB = 70,
    XED_NONTERMINAL_GPR64_X = 71,
    XED_NONTERMINAL_GPR8_B = 72,
    XED_NONTERMINAL_GPR8_R = 73,
    XED_NONTERMINAL_GPR8_SB = 74,
    XED_NONTERMINAL_GPRM_B = 75,
    XED_NONTERMINAL_GPRM_R = 76,
    XED_NONTERMINAL_GPRV_B = 77,
    XED_NONTERMINAL_GPRV_R = 78,
    XED_NONTERMINAL_GPRV_SB = 79,
    XED_NONTERMINAL_GPRY_B = 80,
    XED_NONTERMINAL_GPRY_R = 81,
    XED_NONTERMINAL_GPRZ_B = 82,
    XED_NONTERMINAL_GPRZ_R = 83,
    XED_NONTERMINAL_IGNORE66 = 84,
    XED_NONTERMINAL_IMMUNE66 = 85,
    XED_NONTERMINAL_IMMUNE66_LOOP64 = 86,
    XED_NONTERMINAL_IMMUNE_REXW = 87,
    XED_NONTERMINAL_INSTRUCTIONS = 88,
    XED_NONTERMINAL_ISA = 89,
    XED_NONTERMINAL_MASK1 = 90,
    XED_NONTERMINAL_MASKNOT0 = 91,
    XED_NONTERMINAL_MASK_B = 92,
    XED_NONTERMINAL_MASK_N = 93,
    XED_NONTERMINAL_MASK_N32 = 94,
    XED_NONTERMINAL_MASK_N64 = 95,
    XED_NONTERMINAL_MASK_R = 96,
    XED_NONTERMINAL_MEMDISP = 97,
    XED_NONTERMINAL_MEMDISP16 = 98,
    XED_NONTERMINAL_MEMDISP32 = 99,
    XED_NONTERMINAL_MEMDISP8 = 100,
    XED_NONTERMINAL_MEMDISPV = 101,
    XED_NONTERMINAL_MMX_B = 102,
    XED_NONTERMINAL_MMX_R = 103,
    XED_NONTERMINAL_MODRM = 104,
    XED_NONTERMINAL_MODRM16 = 105,
    XED_NONTERMINAL_MODRM32 = 106,
    XED_NONTERMINAL_MODRM64ALT32 = 107,
    XED_NONTERMINAL_NELEM_EIGHTHMEM = 108,
    XED_NONTERMINAL_NELEM_FULL = 109,
    XED_NONTERMINAL_NELEM_FULLMEM = 110,
    XED_NONTERMINAL_NELEM_GPR_READER = 111,
    XED_NONTERMINAL_NELEM_GPR_READER_BYTE = 112,
    XED_NONTERMINAL_NELEM_GPR_READER_SUBDWORD = 113,
    XED_NONTERMINAL_NELEM_GPR_READER_WORD = 114,
    XED_NONTERMINAL_NELEM_GPR_WRITER_LDOP = 115,
    XED_NONTERMINAL_NELEM_GPR_WRITER_LDOP_D = 116,
    XED_NONTERMINAL_NELEM_GPR_WRITER_LDOP_Q = 117,
    XED_NONTERMINAL_NELEM_GPR_WRITER_STORE = 118,
    XED_NONTERMINAL_NELEM_GPR_WRITER_STORE_BYTE = 119,
    XED_NONTERMINAL_NELEM_GPR_WRITER_STORE_SUBDWORD = 120,
    XED_NONTERMINAL_NELEM_GPR_WRITER_STORE_WORD = 121,
    XED_NONTERMINAL_NELEM_GSCAT = 122,
    XED_NONTERMINAL_NELEM_HALF = 123,
    XED_NONTERMINAL_NELEM_HALFMEM = 124,
    XED_NONTERMINAL_NELEM_MEM128 = 125,
    XED_NONTERMINAL_NELEM_MOVDDUP = 126,
    XED_NONTERMINAL_NELEM_QUARTERMEM = 127,
    XED_NONTERMINAL_NELEM_SCALAR = 128,
    XED_NONTERMINAL_NELEM_TUPLE1 = 129,
    XED_NONTERMINAL_NELEM_TUPLE1_4X = 130,
    XED_NONTERMINAL_NELEM_TUPLE1_BYTE = 131,
    XED_NONTERMINAL_NELEM_TUPLE1_SUBDWORD = 132,
    XED_NONTERMINAL_NELEM_TUPLE1_WORD = 133,
    XED_NONTERMINAL_NELEM_TUPLE2 = 134,
    XED_NONTERMINAL_NELEM_TUPLE4 = 135,
    XED_NONTERMINAL_NELEM_TUPLE8 = 136,
    XED_NONTERMINAL_OEAX = 137,
    XED_NONTERMINAL_ONE = 138,
    XED_NONTERMINAL_ORAX = 139,
    XED_NONTERMINAL_ORBP = 140,
    XED_NONTERMINAL_ORDX = 141,
    XED_NONTERMINAL_ORSP = 142,
    XED_NONTERMINAL_OSZ_NONTERM = 143,
    XED_NONTERMINAL_OVERRIDE_SEG0 = 144,
    XED_NONTERMINAL_OVERRIDE_SEG1 = 145,
    XED_NONTERMINAL_PREFIXES = 146,
    XED_NONTERMINAL_REFINING66 = 147,
    XED_NONTERMINAL_REMOVE_SEGMENT = 148,
    XED_NONTERMINAL_RFLAGS = 149,
    XED_NONTERMINAL_RIP = 150,
    XED_NONTERMINAL_RIPA = 151,
    XED_NONTERMINAL_SAE = 152,
    XED_NONTERMINAL_SEG = 153,
    XED_NONTERMINAL_SEG_MOV = 154,
    XED_NONTERMINAL_SE_IMM8 = 155,
    XED_NONTERMINAL_SIB = 156,
    XED_NONTERMINAL_SIB_BASE0 = 157,
    XED_NONTERMINAL_SIMM8 = 158,
    XED_NONTERMINAL_SIMMZ = 159,
    XED_NONTERMINAL_SRBP = 160,
    XED_NONTERMINAL_SRSP = 161,
    XED_NONTERMINAL_UIMM16 = 162,
    XED_NONTERMINAL_UIMM32 = 163,
    XED_NONTERMINAL_UIMM8 = 164,
    XED_NONTERMINAL_UIMM8_1 = 165,
    XED_NONTERMINAL_UIMMV = 166,
    XED_NONTERMINAL_UISA_VMODRM_XMM = 167,
    XED_NONTERMINAL_UISA_VMODRM_YMM = 168,
    XED_NONTERMINAL_UISA_VMODRM_ZMM = 169,
    XED_NONTERMINAL_UISA_VSIB_BASE = 170,
    XED_NONTERMINAL_UISA_VSIB_INDEX_XMM = 171,
    XED_NONTERMINAL_UISA_VSIB_INDEX_YMM = 172,
    XED_NONTERMINAL_UISA_VSIB_INDEX_ZMM = 173,
    XED_NONTERMINAL_UISA_VSIB_XMM = 174,
    XED_NONTERMINAL_UISA_VSIB_YMM = 175,
    XED_NONTERMINAL_UISA_VSIB_ZMM = 176,
    XED_NONTERMINAL_VGPR32_B = 177,
    XED_NONTERMINAL_VGPR32_B_32 = 178,
    XED_NONTERMINAL_VGPR32_B_64 = 179,
    XED_NONTERMINAL_VGPR32_N = 180,
    XED_NONTERMINAL_VGPR32_N_32 = 181,
    XED_NONTERMINAL_VGPR32_N_64 = 182,
    XED_NONTERMINAL_VGPR32_R = 183,
    XED_NONTERMINAL_VGPR32_R_32 = 184,
    XED_NONTERMINAL_VGPR32_R_64 = 185,
    XED_NONTERMINAL_VGPR64_B = 186,
    XED_NONTERMINAL_VGPR64_N = 187,
    XED_NONTERMINAL_VGPR64_R = 188,
    XED_NONTERMINAL_VGPRY_N = 189,
    XED_NONTERMINAL_VMODRM_XMM = 190,
    XED_NONTERMINAL_VMODRM_YMM = 191,
    XED_NONTERMINAL_VSIB_BASE = 192,
    XED_NONTERMINAL_VSIB_INDEX_XMM = 193,
    XED_NONTERMINAL_VSIB_INDEX_YMM = 194,
    XED_NONTERMINAL_VSIB_XMM = 195,
    XED_NONTERMINAL_VSIB_YMM = 196,
    XED_NONTERMINAL_X87 = 197,
    XED_NONTERMINAL_XMM_B = 198,
    XED_NONTERMINAL_XMM_B3 = 199,
    XED_NONTERMINAL_XMM_B3_32 = 200,
    XED_NONTERMINAL_XMM_B3_64 = 201,
    XED_NONTERMINAL_XMM_B_32 = 202,
    XED_NONTERMINAL_XMM_B_64 = 203,
    XED_NONTERMINAL_XMM_N = 204,
    XED_NONTERMINAL_XMM_N3 = 205,
    XED_NONTERMINAL_XMM_N3_32 = 206,
    XED_NONTERMINAL_XMM_N3_64 = 207,
    XED_NONTERMINAL_XMM_N_32 = 208,
    XED_NONTERMINAL_XMM_N_64 = 209,
    XED_NONTERMINAL_XMM_R = 210,
    XED_NONTERMINAL_XMM_R3 = 211,
    XED_NONTERMINAL_XMM_R3_32 = 212,
    XED_NONTERMINAL_XMM_R3_64 = 213,
    XED_NONTERMINAL_XMM_R_32 = 214,
    XED_NONTERMINAL_XMM_R_64 = 215,
    XED_NONTERMINAL_XMM_SE = 216,
    XED_NONTERMINAL_XMM_SE32 = 217,
    XED_NONTERMINAL_XMM_SE64 = 218,
    XED_NONTERMINAL_XOP_INSTRUCTIONS = 219,
    XED_NONTERMINAL_YMM_B = 220,
    XED_NONTERMINAL_YMM_B3 = 221,
    XED_NONTERMINAL_YMM_B3_32 = 222,
    XED_NONTERMINAL_YMM_B3_64 = 223,
    XED_NONTERMINAL_YMM_B_32 = 224,
    XED_NONTERMINAL_YMM_B_64 = 225,
    XED_NONTERMINAL_YMM_N = 226,
    XED_NONTERMINAL_YMM_N3 = 227,
    XED_NONTERMINAL_YMM_N3_32 = 228,
    XED_NONTERMINAL_YMM_N3_64 = 229,
    XED_NONTERMINAL_YMM_N_32 = 230,
    XED_NONTERMINAL_YMM_N_64 = 231,
    XED_NONTERMINAL_YMM_R = 232,
    XED_NONTERMINAL_YMM_R3 = 233,
    XED_NONTERMINAL_YMM_R3_32 = 234,
    XED_NONTERMINAL_YMM_R3_64 = 235,
    XED_NONTERMINAL_YMM_R_32 = 236,
    XED_NONTERMINAL_YMM_R_64 = 237,
    XED_NONTERMINAL_YMM_SE = 238,
    XED_NONTERMINAL_YMM_SE32 = 239,
    XED_NONTERMINAL_YMM_SE64 = 240,
    XED_NONTERMINAL_ZMM_B3 = 241,
    XED_NONTERMINAL_ZMM_B3_32 = 242,
    XED_NONTERMINAL_ZMM_B3_64 = 243,
    XED_NONTERMINAL_ZMM_N3 = 244,
    XED_NONTERMINAL_ZMM_N3_32 = 245,
    XED_NONTERMINAL_ZMM_N3_64 = 246,
    XED_NONTERMINAL_ZMM_R3 = 247,
    XED_NONTERMINAL_ZMM_R3_32 = 248,
    XED_NONTERMINAL_ZMM_R3_64 = 249,
    XED_NONTERMINAL_LAST = 250,
}
extern "C" {
    pub fn str2xed_nonterminal_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_nonterminal_enum_t;
}
extern "C" {
    pub fn xed_nonterminal_enum_t2str(p: xed_nonterminal_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_nonterminal_enum_t_last() -> xed_nonterminal_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_operand_width_enum_t {
    XED_OPERAND_WIDTH_INVALID = 0,
    XED_OPERAND_WIDTH_ASZ = 1,
    XED_OPERAND_WIDTH_SSZ = 2,
    XED_OPERAND_WIDTH_PSEUDO = 3,
    XED_OPERAND_WIDTH_PSEUDOX87 = 4,
    XED_OPERAND_WIDTH_A16 = 5,
    XED_OPERAND_WIDTH_A32 = 6,
    XED_OPERAND_WIDTH_B = 7,
    XED_OPERAND_WIDTH_D = 8,
    XED_OPERAND_WIDTH_I8 = 9,
    XED_OPERAND_WIDTH_U8 = 10,
    XED_OPERAND_WIDTH_I16 = 11,
    XED_OPERAND_WIDTH_U16 = 12,
    XED_OPERAND_WIDTH_I32 = 13,
    XED_OPERAND_WIDTH_U32 = 14,
    XED_OPERAND_WIDTH_I64 = 15,
    XED_OPERAND_WIDTH_U64 = 16,
    XED_OPERAND_WIDTH_F16 = 17,
    XED_OPERAND_WIDTH_F32 = 18,
    XED_OPERAND_WIDTH_F64 = 19,
    XED_OPERAND_WIDTH_DQ = 20,
    XED_OPERAND_WIDTH_XUB = 21,
    XED_OPERAND_WIDTH_XUW = 22,
    XED_OPERAND_WIDTH_XUD = 23,
    XED_OPERAND_WIDTH_XUQ = 24,
    XED_OPERAND_WIDTH_X128 = 25,
    XED_OPERAND_WIDTH_XB = 26,
    XED_OPERAND_WIDTH_XW = 27,
    XED_OPERAND_WIDTH_XD = 28,
    XED_OPERAND_WIDTH_XQ = 29,
    XED_OPERAND_WIDTH_MB = 30,
    XED_OPERAND_WIDTH_MW = 31,
    XED_OPERAND_WIDTH_MD = 32,
    XED_OPERAND_WIDTH_MQ = 33,
    XED_OPERAND_WIDTH_M64INT = 34,
    XED_OPERAND_WIDTH_M64REAL = 35,
    XED_OPERAND_WIDTH_MEM108 = 36,
    XED_OPERAND_WIDTH_MEM14 = 37,
    XED_OPERAND_WIDTH_MEM16 = 38,
    XED_OPERAND_WIDTH_MEM16INT = 39,
    XED_OPERAND_WIDTH_MEM28 = 40,
    XED_OPERAND_WIDTH_MEM32INT = 41,
    XED_OPERAND_WIDTH_MEM32REAL = 42,
    XED_OPERAND_WIDTH_MEM80DEC = 43,
    XED_OPERAND_WIDTH_MEM80REAL = 44,
    XED_OPERAND_WIDTH_F80 = 45,
    XED_OPERAND_WIDTH_MEM94 = 46,
    XED_OPERAND_WIDTH_MFPXENV = 47,
    XED_OPERAND_WIDTH_MXSAVE = 48,
    XED_OPERAND_WIDTH_MPREFETCH = 49,
    XED_OPERAND_WIDTH_P = 50,
    XED_OPERAND_WIDTH_P2 = 51,
    XED_OPERAND_WIDTH_PD = 52,
    XED_OPERAND_WIDTH_PS = 53,
    XED_OPERAND_WIDTH_PI = 54,
    XED_OPERAND_WIDTH_Q = 55,
    XED_OPERAND_WIDTH_S = 56,
    XED_OPERAND_WIDTH_S64 = 57,
    XED_OPERAND_WIDTH_SD = 58,
    XED_OPERAND_WIDTH_SI = 59,
    XED_OPERAND_WIDTH_SS = 60,
    XED_OPERAND_WIDTH_V = 61,
    XED_OPERAND_WIDTH_Y = 62,
    XED_OPERAND_WIDTH_W = 63,
    XED_OPERAND_WIDTH_Z = 64,
    XED_OPERAND_WIDTH_SPW8 = 65,
    XED_OPERAND_WIDTH_SPW = 66,
    XED_OPERAND_WIDTH_SPW3 = 67,
    XED_OPERAND_WIDTH_SPW2 = 68,
    XED_OPERAND_WIDTH_I1 = 69,
    XED_OPERAND_WIDTH_I2 = 70,
    XED_OPERAND_WIDTH_I3 = 71,
    XED_OPERAND_WIDTH_I4 = 72,
    XED_OPERAND_WIDTH_I5 = 73,
    XED_OPERAND_WIDTH_I6 = 74,
    XED_OPERAND_WIDTH_I7 = 75,
    XED_OPERAND_WIDTH_VAR = 76,
    XED_OPERAND_WIDTH_BND32 = 77,
    XED_OPERAND_WIDTH_BND64 = 78,
    XED_OPERAND_WIDTH_QQ = 79,
    XED_OPERAND_WIDTH_YUB = 80,
    XED_OPERAND_WIDTH_YUW = 81,
    XED_OPERAND_WIDTH_YUD = 82,
    XED_OPERAND_WIDTH_YUQ = 83,
    XED_OPERAND_WIDTH_Y128 = 84,
    XED_OPERAND_WIDTH_YB = 85,
    XED_OPERAND_WIDTH_YW = 86,
    XED_OPERAND_WIDTH_YD = 87,
    XED_OPERAND_WIDTH_YQ = 88,
    XED_OPERAND_WIDTH_YPS = 89,
    XED_OPERAND_WIDTH_YPD = 90,
    XED_OPERAND_WIDTH_VV = 91,
    XED_OPERAND_WIDTH_ZV = 92,
    XED_OPERAND_WIDTH_WRD = 93,
    XED_OPERAND_WIDTH_MSKW = 94,
    XED_OPERAND_WIDTH_ZMSKW = 95,
    XED_OPERAND_WIDTH_ZF32 = 96,
    XED_OPERAND_WIDTH_ZF64 = 97,
    XED_OPERAND_WIDTH_ZB = 98,
    XED_OPERAND_WIDTH_ZW = 99,
    XED_OPERAND_WIDTH_ZD = 100,
    XED_OPERAND_WIDTH_ZQ = 101,
    XED_OPERAND_WIDTH_ZUB = 102,
    XED_OPERAND_WIDTH_ZUW = 103,
    XED_OPERAND_WIDTH_ZUD = 104,
    XED_OPERAND_WIDTH_ZUQ = 105,
    XED_OPERAND_WIDTH_ZI8 = 106,
    XED_OPERAND_WIDTH_ZI16 = 107,
    XED_OPERAND_WIDTH_ZI32 = 108,
    XED_OPERAND_WIDTH_ZI64 = 109,
    XED_OPERAND_WIDTH_ZU8 = 110,
    XED_OPERAND_WIDTH_ZU16 = 111,
    XED_OPERAND_WIDTH_ZU32 = 112,
    XED_OPERAND_WIDTH_ZU64 = 113,
    XED_OPERAND_WIDTH_ZU128 = 114,
    XED_OPERAND_WIDTH_LAST = 115,
}
extern "C" {
    pub fn str2xed_operand_width_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_operand_width_enum_t;
}
extern "C" {
    pub fn xed_operand_width_enum_t2str(p: xed_operand_width_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_operand_width_enum_t_last() -> xed_operand_width_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_operand_element_xtype_enum_t {
    XED_OPERAND_XTYPE_INVALID = 0,
    XED_OPERAND_XTYPE_B80 = 1,
    XED_OPERAND_XTYPE_F16 = 2,
    XED_OPERAND_XTYPE_F32 = 3,
    XED_OPERAND_XTYPE_F64 = 4,
    XED_OPERAND_XTYPE_F80 = 5,
    XED_OPERAND_XTYPE_I1 = 6,
    XED_OPERAND_XTYPE_I16 = 7,
    XED_OPERAND_XTYPE_I32 = 8,
    XED_OPERAND_XTYPE_I64 = 9,
    XED_OPERAND_XTYPE_I8 = 10,
    XED_OPERAND_XTYPE_INT = 11,
    XED_OPERAND_XTYPE_STRUCT = 12,
    XED_OPERAND_XTYPE_U128 = 13,
    XED_OPERAND_XTYPE_U16 = 14,
    XED_OPERAND_XTYPE_U256 = 15,
    XED_OPERAND_XTYPE_U32 = 16,
    XED_OPERAND_XTYPE_U64 = 17,
    XED_OPERAND_XTYPE_U8 = 18,
    XED_OPERAND_XTYPE_UINT = 19,
    XED_OPERAND_XTYPE_VAR = 20,
    XED_OPERAND_XTYPE_LAST = 21,
}
extern "C" {
    pub fn str2xed_operand_element_xtype_enum_t(s:
                                                    *const ::std::os::raw::c_char)
     -> xed_operand_element_xtype_enum_t;
}
extern "C" {
    pub fn xed_operand_element_xtype_enum_t2str(p:
                                                    xed_operand_element_xtype_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_operand_element_xtype_enum_t_last()
     -> xed_operand_element_xtype_enum_t;
}
pub const xed_reg_enum_t_XED_REG_BNDCFG_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_BNDCFGU;
pub const xed_reg_enum_t_XED_REG_BNDCFG_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_BNDCFGU;
pub const xed_reg_enum_t_XED_REG_BNDSTAT_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_BNDSTATUS;
pub const xed_reg_enum_t_XED_REG_BNDSTAT_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_BNDSTATUS;
pub const xed_reg_enum_t_XED_REG_BOUND_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_BND0;
pub const xed_reg_enum_t_XED_REG_BOUND_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_BND3;
pub const xed_reg_enum_t_XED_REG_CR_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_CR0;
pub const xed_reg_enum_t_XED_REG_CR_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_CR15;
pub const xed_reg_enum_t_XED_REG_DR_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_DR0;
pub const xed_reg_enum_t_XED_REG_DR_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_DR15;
pub const xed_reg_enum_t_XED_REG_FLAGS_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_FLAGS;
pub const xed_reg_enum_t_XED_REG_FLAGS_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_RFLAGS;
pub const xed_reg_enum_t_XED_REG_GPR16_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_AX;
pub const xed_reg_enum_t_XED_REG_GPR16_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_R15W;
pub const xed_reg_enum_t_XED_REG_GPR32_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_EAX;
pub const xed_reg_enum_t_XED_REG_GPR32_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_R15D;
pub const xed_reg_enum_t_XED_REG_GPR64_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_RAX;
pub const xed_reg_enum_t_XED_REG_GPR64_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_R15;
pub const xed_reg_enum_t_XED_REG_GPR8_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_AL;
pub const xed_reg_enum_t_XED_REG_GPR8_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_R15B;
pub const xed_reg_enum_t_XED_REG_GPR8h_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_AH;
pub const xed_reg_enum_t_XED_REG_GPR8h_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_BH;
pub const xed_reg_enum_t_XED_REG_INVALID_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_INVALID;
pub const xed_reg_enum_t_XED_REG_INVALID_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_ERROR;
pub const xed_reg_enum_t_XED_REG_IP_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_RIP;
pub const xed_reg_enum_t_XED_REG_IP_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_IP;
pub const xed_reg_enum_t_XED_REG_MASK_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_K0;
pub const xed_reg_enum_t_XED_REG_MASK_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_K7;
pub const xed_reg_enum_t_XED_REG_MMX_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_MMX0;
pub const xed_reg_enum_t_XED_REG_MMX_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_MMX7;
pub const xed_reg_enum_t_XED_REG_MSR_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_SSP;
pub const xed_reg_enum_t_XED_REG_MSR_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_IA32_U_CET;
pub const xed_reg_enum_t_XED_REG_MXCSR_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_MXCSR;
pub const xed_reg_enum_t_XED_REG_MXCSR_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_MXCSR;
pub const xed_reg_enum_t_XED_REG_PSEUDO_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_STACKPUSH;
pub const xed_reg_enum_t_XED_REG_PSEUDO_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_GSBASE;
pub const xed_reg_enum_t_XED_REG_PSEUDOX87_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_X87CONTROL;
pub const xed_reg_enum_t_XED_REG_PSEUDOX87_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_X87LASTDP;
pub const xed_reg_enum_t_XED_REG_SR_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_CS;
pub const xed_reg_enum_t_XED_REG_SR_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_GS;
pub const xed_reg_enum_t_XED_REG_TMP_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_TMP0;
pub const xed_reg_enum_t_XED_REG_TMP_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_TMP15;
pub const xed_reg_enum_t_XED_REG_X87_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_ST0;
pub const xed_reg_enum_t_XED_REG_X87_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_ST7;
pub const xed_reg_enum_t_XED_REG_XCR_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_XCR0;
pub const xed_reg_enum_t_XED_REG_XCR_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_XCR0;
pub const xed_reg_enum_t_XED_REG_XMM_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_XMM0;
pub const xed_reg_enum_t_XED_REG_XMM_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_XMM31;
pub const xed_reg_enum_t_XED_REG_YMM_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_YMM0;
pub const xed_reg_enum_t_XED_REG_YMM_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_YMM31;
pub const xed_reg_enum_t_XED_REG_ZMM_FIRST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_ZMM0;
pub const xed_reg_enum_t_XED_REG_ZMM_LAST: xed_reg_enum_t =
    xed_reg_enum_t::XED_REG_ZMM31;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_reg_enum_t {
    XED_REG_INVALID = 0,
    XED_REG_BNDCFGU = 1,
    XED_REG_BNDSTATUS = 2,
    XED_REG_BND0 = 3,
    XED_REG_BND1 = 4,
    XED_REG_BND2 = 5,
    XED_REG_BND3 = 6,
    XED_REG_CR0 = 7,
    XED_REG_CR1 = 8,
    XED_REG_CR2 = 9,
    XED_REG_CR3 = 10,
    XED_REG_CR4 = 11,
    XED_REG_CR5 = 12,
    XED_REG_CR6 = 13,
    XED_REG_CR7 = 14,
    XED_REG_CR8 = 15,
    XED_REG_CR9 = 16,
    XED_REG_CR10 = 17,
    XED_REG_CR11 = 18,
    XED_REG_CR12 = 19,
    XED_REG_CR13 = 20,
    XED_REG_CR14 = 21,
    XED_REG_CR15 = 22,
    XED_REG_DR0 = 23,
    XED_REG_DR1 = 24,
    XED_REG_DR2 = 25,
    XED_REG_DR3 = 26,
    XED_REG_DR4 = 27,
    XED_REG_DR5 = 28,
    XED_REG_DR6 = 29,
    XED_REG_DR7 = 30,
    XED_REG_DR8 = 31,
    XED_REG_DR9 = 32,
    XED_REG_DR10 = 33,
    XED_REG_DR11 = 34,
    XED_REG_DR12 = 35,
    XED_REG_DR13 = 36,
    XED_REG_DR14 = 37,
    XED_REG_DR15 = 38,
    XED_REG_FLAGS = 39,
    XED_REG_EFLAGS = 40,
    XED_REG_RFLAGS = 41,
    XED_REG_AX = 42,
    XED_REG_CX = 43,
    XED_REG_DX = 44,
    XED_REG_BX = 45,
    XED_REG_SP = 46,
    XED_REG_BP = 47,
    XED_REG_SI = 48,
    XED_REG_DI = 49,
    XED_REG_R8W = 50,
    XED_REG_R9W = 51,
    XED_REG_R10W = 52,
    XED_REG_R11W = 53,
    XED_REG_R12W = 54,
    XED_REG_R13W = 55,
    XED_REG_R14W = 56,
    XED_REG_R15W = 57,
    XED_REG_EAX = 58,
    XED_REG_ECX = 59,
    XED_REG_EDX = 60,
    XED_REG_EBX = 61,
    XED_REG_ESP = 62,
    XED_REG_EBP = 63,
    XED_REG_ESI = 64,
    XED_REG_EDI = 65,
    XED_REG_R8D = 66,
    XED_REG_R9D = 67,
    XED_REG_R10D = 68,
    XED_REG_R11D = 69,
    XED_REG_R12D = 70,
    XED_REG_R13D = 71,
    XED_REG_R14D = 72,
    XED_REG_R15D = 73,
    XED_REG_RAX = 74,
    XED_REG_RCX = 75,
    XED_REG_RDX = 76,
    XED_REG_RBX = 77,
    XED_REG_RSP = 78,
    XED_REG_RBP = 79,
    XED_REG_RSI = 80,
    XED_REG_RDI = 81,
    XED_REG_R8 = 82,
    XED_REG_R9 = 83,
    XED_REG_R10 = 84,
    XED_REG_R11 = 85,
    XED_REG_R12 = 86,
    XED_REG_R13 = 87,
    XED_REG_R14 = 88,
    XED_REG_R15 = 89,
    XED_REG_AL = 90,
    XED_REG_CL = 91,
    XED_REG_DL = 92,
    XED_REG_BL = 93,
    XED_REG_SPL = 94,
    XED_REG_BPL = 95,
    XED_REG_SIL = 96,
    XED_REG_DIL = 97,
    XED_REG_R8B = 98,
    XED_REG_R9B = 99,
    XED_REG_R10B = 100,
    XED_REG_R11B = 101,
    XED_REG_R12B = 102,
    XED_REG_R13B = 103,
    XED_REG_R14B = 104,
    XED_REG_R15B = 105,
    XED_REG_AH = 106,
    XED_REG_CH = 107,
    XED_REG_DH = 108,
    XED_REG_BH = 109,
    XED_REG_ERROR = 110,
    XED_REG_RIP = 111,
    XED_REG_EIP = 112,
    XED_REG_IP = 113,
    XED_REG_K0 = 114,
    XED_REG_K1 = 115,
    XED_REG_K2 = 116,
    XED_REG_K3 = 117,
    XED_REG_K4 = 118,
    XED_REG_K5 = 119,
    XED_REG_K6 = 120,
    XED_REG_K7 = 121,
    XED_REG_MMX0 = 122,
    XED_REG_MMX1 = 123,
    XED_REG_MMX2 = 124,
    XED_REG_MMX3 = 125,
    XED_REG_MMX4 = 126,
    XED_REG_MMX5 = 127,
    XED_REG_MMX6 = 128,
    XED_REG_MMX7 = 129,
    XED_REG_SSP = 130,
    XED_REG_IA32_U_CET = 131,
    XED_REG_MXCSR = 132,
    XED_REG_STACKPUSH = 133,
    XED_REG_STACKPOP = 134,
    XED_REG_GDTR = 135,
    XED_REG_LDTR = 136,
    XED_REG_IDTR = 137,
    XED_REG_TR = 138,
    XED_REG_TSC = 139,
    XED_REG_TSCAUX = 140,
    XED_REG_MSRS = 141,
    XED_REG_FSBASE = 142,
    XED_REG_GSBASE = 143,
    XED_REG_X87CONTROL = 144,
    XED_REG_X87STATUS = 145,
    XED_REG_X87TAG = 146,
    XED_REG_X87PUSH = 147,
    XED_REG_X87POP = 148,
    XED_REG_X87POP2 = 149,
    XED_REG_X87OPCODE = 150,
    XED_REG_X87LASTCS = 151,
    XED_REG_X87LASTIP = 152,
    XED_REG_X87LASTDS = 153,
    XED_REG_X87LASTDP = 154,
    XED_REG_CS = 155,
    XED_REG_DS = 156,
    XED_REG_ES = 157,
    XED_REG_SS = 158,
    XED_REG_FS = 159,
    XED_REG_GS = 160,
    XED_REG_TMP0 = 161,
    XED_REG_TMP1 = 162,
    XED_REG_TMP2 = 163,
    XED_REG_TMP3 = 164,
    XED_REG_TMP4 = 165,
    XED_REG_TMP5 = 166,
    XED_REG_TMP6 = 167,
    XED_REG_TMP7 = 168,
    XED_REG_TMP8 = 169,
    XED_REG_TMP9 = 170,
    XED_REG_TMP10 = 171,
    XED_REG_TMP11 = 172,
    XED_REG_TMP12 = 173,
    XED_REG_TMP13 = 174,
    XED_REG_TMP14 = 175,
    XED_REG_TMP15 = 176,
    XED_REG_ST0 = 177,
    XED_REG_ST1 = 178,
    XED_REG_ST2 = 179,
    XED_REG_ST3 = 180,
    XED_REG_ST4 = 181,
    XED_REG_ST5 = 182,
    XED_REG_ST6 = 183,
    XED_REG_ST7 = 184,
    XED_REG_XCR0 = 185,
    XED_REG_XMM0 = 186,
    XED_REG_XMM1 = 187,
    XED_REG_XMM2 = 188,
    XED_REG_XMM3 = 189,
    XED_REG_XMM4 = 190,
    XED_REG_XMM5 = 191,
    XED_REG_XMM6 = 192,
    XED_REG_XMM7 = 193,
    XED_REG_XMM8 = 194,
    XED_REG_XMM9 = 195,
    XED_REG_XMM10 = 196,
    XED_REG_XMM11 = 197,
    XED_REG_XMM12 = 198,
    XED_REG_XMM13 = 199,
    XED_REG_XMM14 = 200,
    XED_REG_XMM15 = 201,
    XED_REG_XMM16 = 202,
    XED_REG_XMM17 = 203,
    XED_REG_XMM18 = 204,
    XED_REG_XMM19 = 205,
    XED_REG_XMM20 = 206,
    XED_REG_XMM21 = 207,
    XED_REG_XMM22 = 208,
    XED_REG_XMM23 = 209,
    XED_REG_XMM24 = 210,
    XED_REG_XMM25 = 211,
    XED_REG_XMM26 = 212,
    XED_REG_XMM27 = 213,
    XED_REG_XMM28 = 214,
    XED_REG_XMM29 = 215,
    XED_REG_XMM30 = 216,
    XED_REG_XMM31 = 217,
    XED_REG_YMM0 = 218,
    XED_REG_YMM1 = 219,
    XED_REG_YMM2 = 220,
    XED_REG_YMM3 = 221,
    XED_REG_YMM4 = 222,
    XED_REG_YMM5 = 223,
    XED_REG_YMM6 = 224,
    XED_REG_YMM7 = 225,
    XED_REG_YMM8 = 226,
    XED_REG_YMM9 = 227,
    XED_REG_YMM10 = 228,
    XED_REG_YMM11 = 229,
    XED_REG_YMM12 = 230,
    XED_REG_YMM13 = 231,
    XED_REG_YMM14 = 232,
    XED_REG_YMM15 = 233,
    XED_REG_YMM16 = 234,
    XED_REG_YMM17 = 235,
    XED_REG_YMM18 = 236,
    XED_REG_YMM19 = 237,
    XED_REG_YMM20 = 238,
    XED_REG_YMM21 = 239,
    XED_REG_YMM22 = 240,
    XED_REG_YMM23 = 241,
    XED_REG_YMM24 = 242,
    XED_REG_YMM25 = 243,
    XED_REG_YMM26 = 244,
    XED_REG_YMM27 = 245,
    XED_REG_YMM28 = 246,
    XED_REG_YMM29 = 247,
    XED_REG_YMM30 = 248,
    XED_REG_YMM31 = 249,
    XED_REG_ZMM0 = 250,
    XED_REG_ZMM1 = 251,
    XED_REG_ZMM2 = 252,
    XED_REG_ZMM3 = 253,
    XED_REG_ZMM4 = 254,
    XED_REG_ZMM5 = 255,
    XED_REG_ZMM6 = 256,
    XED_REG_ZMM7 = 257,
    XED_REG_ZMM8 = 258,
    XED_REG_ZMM9 = 259,
    XED_REG_ZMM10 = 260,
    XED_REG_ZMM11 = 261,
    XED_REG_ZMM12 = 262,
    XED_REG_ZMM13 = 263,
    XED_REG_ZMM14 = 264,
    XED_REG_ZMM15 = 265,
    XED_REG_ZMM16 = 266,
    XED_REG_ZMM17 = 267,
    XED_REG_ZMM18 = 268,
    XED_REG_ZMM19 = 269,
    XED_REG_ZMM20 = 270,
    XED_REG_ZMM21 = 271,
    XED_REG_ZMM22 = 272,
    XED_REG_ZMM23 = 273,
    XED_REG_ZMM24 = 274,
    XED_REG_ZMM25 = 275,
    XED_REG_ZMM26 = 276,
    XED_REG_ZMM27 = 277,
    XED_REG_ZMM28 = 278,
    XED_REG_ZMM29 = 279,
    XED_REG_ZMM30 = 280,
    XED_REG_ZMM31 = 281,
    XED_REG_LAST = 282,
}
extern "C" {
    pub fn str2xed_reg_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_reg_enum_t;
}
extern "C" {
    pub fn xed_reg_enum_t2str(p: xed_reg_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_reg_enum_t_last() -> xed_reg_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_attribute_enum_t {
    XED_ATTRIBUTE_INVALID = 0,
    XED_ATTRIBUTE_ATT_OPERAND_ORDER_EXCEPTION = 1,
    XED_ATTRIBUTE_BROADCAST_ENABLED = 2,
    XED_ATTRIBUTE_BYTEOP = 3,
    XED_ATTRIBUTE_DISP8_EIGHTHMEM = 4,
    XED_ATTRIBUTE_DISP8_FULL = 5,
    XED_ATTRIBUTE_DISP8_FULLMEM = 6,
    XED_ATTRIBUTE_DISP8_GPR_READER = 7,
    XED_ATTRIBUTE_DISP8_GPR_READER_BYTE = 8,
    XED_ATTRIBUTE_DISP8_GPR_READER_WORD = 9,
    XED_ATTRIBUTE_DISP8_GPR_WRITER_LDOP_D = 10,
    XED_ATTRIBUTE_DISP8_GPR_WRITER_LDOP_Q = 11,
    XED_ATTRIBUTE_DISP8_GPR_WRITER_STORE = 12,
    XED_ATTRIBUTE_DISP8_GPR_WRITER_STORE_BYTE = 13,
    XED_ATTRIBUTE_DISP8_GPR_WRITER_STORE_WORD = 14,
    XED_ATTRIBUTE_DISP8_GSCAT = 15,
    XED_ATTRIBUTE_DISP8_HALF = 16,
    XED_ATTRIBUTE_DISP8_HALFMEM = 17,
    XED_ATTRIBUTE_DISP8_MEM128 = 18,
    XED_ATTRIBUTE_DISP8_MOVDDUP = 19,
    XED_ATTRIBUTE_DISP8_QUARTERMEM = 20,
    XED_ATTRIBUTE_DISP8_SCALAR = 21,
    XED_ATTRIBUTE_DISP8_TUPLE1 = 22,
    XED_ATTRIBUTE_DISP8_TUPLE1_4X = 23,
    XED_ATTRIBUTE_DISP8_TUPLE1_BYTE = 24,
    XED_ATTRIBUTE_DISP8_TUPLE1_WORD = 25,
    XED_ATTRIBUTE_DISP8_TUPLE2 = 26,
    XED_ATTRIBUTE_DISP8_TUPLE4 = 27,
    XED_ATTRIBUTE_DISP8_TUPLE8 = 28,
    XED_ATTRIBUTE_DOUBLE_WIDE_MEMOP = 29,
    XED_ATTRIBUTE_DOUBLE_WIDE_OUTPUT = 30,
    XED_ATTRIBUTE_DWORD_INDICES = 31,
    XED_ATTRIBUTE_ELEMENT_SIZE_D = 32,
    XED_ATTRIBUTE_ELEMENT_SIZE_Q = 33,
    XED_ATTRIBUTE_EXCEPTION_BR = 34,
    XED_ATTRIBUTE_FAR_XFER = 35,
    XED_ATTRIBUTE_FIXED_BASE0 = 36,
    XED_ATTRIBUTE_FIXED_BASE1 = 37,
    XED_ATTRIBUTE_GATHER = 38,
    XED_ATTRIBUTE_HALF_WIDE_OUTPUT = 39,
    XED_ATTRIBUTE_HLE_ACQ_ABLE = 40,
    XED_ATTRIBUTE_HLE_REL_ABLE = 41,
    XED_ATTRIBUTE_IGNORES_OSFXSR = 42,
    XED_ATTRIBUTE_IMPLICIT_ONE = 43,
    XED_ATTRIBUTE_INDEX_REG_IS_POINTER = 44,
    XED_ATTRIBUTE_INDIRECT_BRANCH = 45,
    XED_ATTRIBUTE_KMASK = 46,
    XED_ATTRIBUTE_LOCKABLE = 47,
    XED_ATTRIBUTE_LOCKED = 48,
    XED_ATTRIBUTE_MASKOP = 49,
    XED_ATTRIBUTE_MASKOP_EVEX = 50,
    XED_ATTRIBUTE_MASK_AS_CONTROL = 51,
    XED_ATTRIBUTE_MASK_VARIABLE_MEMOP = 52,
    XED_ATTRIBUTE_MEMORY_FAULT_SUPPRESSION = 53,
    XED_ATTRIBUTE_MMX_EXCEPT = 54,
    XED_ATTRIBUTE_MPX_PREFIX_ABLE = 55,
    XED_ATTRIBUTE_MULTISOURCE4 = 56,
    XED_ATTRIBUTE_MXCSR = 57,
    XED_ATTRIBUTE_MXCSR_RD = 58,
    XED_ATTRIBUTE_NONTEMPORAL = 59,
    XED_ATTRIBUTE_NOP = 60,
    XED_ATTRIBUTE_NOTSX = 61,
    XED_ATTRIBUTE_NOTSX_COND = 62,
    XED_ATTRIBUTE_NO_RIP_REL = 63,
    XED_ATTRIBUTE_PREFETCH = 64,
    XED_ATTRIBUTE_PROTECTED_MODE = 65,
    XED_ATTRIBUTE_QWORD_INDICES = 66,
    XED_ATTRIBUTE_REP = 67,
    XED_ATTRIBUTE_REQUIRES_ALIGNMENT = 68,
    XED_ATTRIBUTE_RING0 = 69,
    XED_ATTRIBUTE_SCALABLE = 70,
    XED_ATTRIBUTE_SCATTER = 71,
    XED_ATTRIBUTE_SIMD_SCALAR = 72,
    XED_ATTRIBUTE_SKIPLOW32 = 73,
    XED_ATTRIBUTE_SKIPLOW64 = 74,
    XED_ATTRIBUTE_SPECIAL_AGEN_REQUIRED = 75,
    XED_ATTRIBUTE_STACKPOP0 = 76,
    XED_ATTRIBUTE_STACKPOP1 = 77,
    XED_ATTRIBUTE_STACKPUSH0 = 78,
    XED_ATTRIBUTE_STACKPUSH1 = 79,
    XED_ATTRIBUTE_X87_CONTROL = 80,
    XED_ATTRIBUTE_X87_MMX_STATE_CW = 81,
    XED_ATTRIBUTE_X87_MMX_STATE_R = 82,
    XED_ATTRIBUTE_X87_MMX_STATE_W = 83,
    XED_ATTRIBUTE_X87_NOWAIT = 84,
    XED_ATTRIBUTE_XMM_STATE_CW = 85,
    XED_ATTRIBUTE_XMM_STATE_R = 86,
    XED_ATTRIBUTE_XMM_STATE_W = 87,
    XED_ATTRIBUTE_LAST = 88,
}
extern "C" {
    pub fn str2xed_attribute_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_attribute_enum_t;
}
extern "C" {
    pub fn xed_attribute_enum_t2str(p: xed_attribute_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_attribute_enum_t_last() -> xed_attribute_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_exception_enum_t {
    XED_EXCEPTION_INVALID = 0,
    XED_EXCEPTION_AVX512_E1 = 1,
    XED_EXCEPTION_AVX512_E10 = 2,
    XED_EXCEPTION_AVX512_E10NF = 3,
    XED_EXCEPTION_AVX512_E11 = 4,
    XED_EXCEPTION_AVX512_E11NF = 5,
    XED_EXCEPTION_AVX512_E12 = 6,
    XED_EXCEPTION_AVX512_E12NP = 7,
    XED_EXCEPTION_AVX512_E1NF = 8,
    XED_EXCEPTION_AVX512_E2 = 9,
    XED_EXCEPTION_AVX512_E3 = 10,
    XED_EXCEPTION_AVX512_E3NF = 11,
    XED_EXCEPTION_AVX512_E4 = 12,
    XED_EXCEPTION_AVX512_E4NF = 13,
    XED_EXCEPTION_AVX512_E5 = 14,
    XED_EXCEPTION_AVX512_E5NF = 15,
    XED_EXCEPTION_AVX512_E6 = 16,
    XED_EXCEPTION_AVX512_E6NF = 17,
    XED_EXCEPTION_AVX512_E7NM = 18,
    XED_EXCEPTION_AVX512_E7NM128 = 19,
    XED_EXCEPTION_AVX512_E9NF = 20,
    XED_EXCEPTION_AVX512_K20 = 21,
    XED_EXCEPTION_AVX512_K21 = 22,
    XED_EXCEPTION_AVX_TYPE_1 = 23,
    XED_EXCEPTION_AVX_TYPE_11 = 24,
    XED_EXCEPTION_AVX_TYPE_12 = 25,
    XED_EXCEPTION_AVX_TYPE_2 = 26,
    XED_EXCEPTION_AVX_TYPE_2D = 27,
    XED_EXCEPTION_AVX_TYPE_3 = 28,
    XED_EXCEPTION_AVX_TYPE_4 = 29,
    XED_EXCEPTION_AVX_TYPE_4M = 30,
    XED_EXCEPTION_AVX_TYPE_5 = 31,
    XED_EXCEPTION_AVX_TYPE_5L = 32,
    XED_EXCEPTION_AVX_TYPE_6 = 33,
    XED_EXCEPTION_AVX_TYPE_7 = 34,
    XED_EXCEPTION_AVX_TYPE_8 = 35,
    XED_EXCEPTION_MMX_FP = 36,
    XED_EXCEPTION_MMX_FP_16ALIGN = 37,
    XED_EXCEPTION_MMX_MEM = 38,
    XED_EXCEPTION_MMX_NOFP = 39,
    XED_EXCEPTION_MMX_NOFP2 = 40,
    XED_EXCEPTION_MMX_NOMEM = 41,
    XED_EXCEPTION_SSE_TYPE_1 = 42,
    XED_EXCEPTION_SSE_TYPE_2 = 43,
    XED_EXCEPTION_SSE_TYPE_2D = 44,
    XED_EXCEPTION_SSE_TYPE_3 = 45,
    XED_EXCEPTION_SSE_TYPE_4 = 46,
    XED_EXCEPTION_SSE_TYPE_4M = 47,
    XED_EXCEPTION_SSE_TYPE_5 = 48,
    XED_EXCEPTION_SSE_TYPE_7 = 49,
    XED_EXCEPTION_LAST = 50,
}
extern "C" {
    pub fn str2xed_exception_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_exception_enum_t;
}
extern "C" {
    pub fn xed_exception_enum_t2str(p: xed_exception_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_exception_enum_t_last() -> xed_exception_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_iform_enum_t {
    XED_IFORM_INVALID = 0,
    XED_IFORM_AAA = 1,
    XED_IFORM_AAD_IMMb = 2,
    XED_IFORM_AAM_IMMb = 3,
    XED_IFORM_AAS = 4,
    XED_IFORM_ADC_AL_IMMb = 5,
    XED_IFORM_ADC_GPR8_GPR8_10 = 6,
    XED_IFORM_ADC_GPR8_GPR8_12 = 7,
    XED_IFORM_ADC_GPR8_IMMb_80r2 = 8,
    XED_IFORM_ADC_GPR8_IMMb_82r2 = 9,
    XED_IFORM_ADC_GPR8_MEMb = 10,
    XED_IFORM_ADC_GPRv_GPRv_11 = 11,
    XED_IFORM_ADC_GPRv_GPRv_13 = 12,
    XED_IFORM_ADC_GPRv_IMMb = 13,
    XED_IFORM_ADC_GPRv_IMMz = 14,
    XED_IFORM_ADC_GPRv_MEMv = 15,
    XED_IFORM_ADC_MEMb_GPR8 = 16,
    XED_IFORM_ADC_MEMb_IMMb_80r2 = 17,
    XED_IFORM_ADC_MEMb_IMMb_82r2 = 18,
    XED_IFORM_ADC_MEMv_GPRv = 19,
    XED_IFORM_ADC_MEMv_IMMb = 20,
    XED_IFORM_ADC_MEMv_IMMz = 21,
    XED_IFORM_ADC_OrAX_IMMz = 22,
    XED_IFORM_ADCX_GPR32d_GPR32d = 23,
    XED_IFORM_ADCX_GPR32d_MEMd = 24,
    XED_IFORM_ADCX_GPR64q_GPR64q = 25,
    XED_IFORM_ADCX_GPR64q_MEMq = 26,
    XED_IFORM_ADC_LOCK_MEMb_GPR8 = 27,
    XED_IFORM_ADC_LOCK_MEMb_IMMb_80r2 = 28,
    XED_IFORM_ADC_LOCK_MEMb_IMMb_82r2 = 29,
    XED_IFORM_ADC_LOCK_MEMv_GPRv = 30,
    XED_IFORM_ADC_LOCK_MEMv_IMMb = 31,
    XED_IFORM_ADC_LOCK_MEMv_IMMz = 32,
    XED_IFORM_ADD_AL_IMMb = 33,
    XED_IFORM_ADD_GPR8_GPR8_00 = 34,
    XED_IFORM_ADD_GPR8_GPR8_02 = 35,
    XED_IFORM_ADD_GPR8_IMMb_80r0 = 36,
    XED_IFORM_ADD_GPR8_IMMb_82r0 = 37,
    XED_IFORM_ADD_GPR8_MEMb = 38,
    XED_IFORM_ADD_GPRv_GPRv_01 = 39,
    XED_IFORM_ADD_GPRv_GPRv_03 = 40,
    XED_IFORM_ADD_GPRv_IMMb = 41,
    XED_IFORM_ADD_GPRv_IMMz = 42,
    XED_IFORM_ADD_GPRv_MEMv = 43,
    XED_IFORM_ADD_MEMb_GPR8 = 44,
    XED_IFORM_ADD_MEMb_IMMb_80r0 = 45,
    XED_IFORM_ADD_MEMb_IMMb_82r0 = 46,
    XED_IFORM_ADD_MEMv_GPRv = 47,
    XED_IFORM_ADD_MEMv_IMMb = 48,
    XED_IFORM_ADD_MEMv_IMMz = 49,
    XED_IFORM_ADD_OrAX_IMMz = 50,
    XED_IFORM_ADDPD_XMMpd_MEMpd = 51,
    XED_IFORM_ADDPD_XMMpd_XMMpd = 52,
    XED_IFORM_ADDPS_XMMps_MEMps = 53,
    XED_IFORM_ADDPS_XMMps_XMMps = 54,
    XED_IFORM_ADDSD_XMMsd_MEMsd = 55,
    XED_IFORM_ADDSD_XMMsd_XMMsd = 56,
    XED_IFORM_ADDSS_XMMss_MEMss = 57,
    XED_IFORM_ADDSS_XMMss_XMMss = 58,
    XED_IFORM_ADDSUBPD_XMMpd_MEMpd = 59,
    XED_IFORM_ADDSUBPD_XMMpd_XMMpd = 60,
    XED_IFORM_ADDSUBPS_XMMps_MEMps = 61,
    XED_IFORM_ADDSUBPS_XMMps_XMMps = 62,
    XED_IFORM_ADD_LOCK_MEMb_GPR8 = 63,
    XED_IFORM_ADD_LOCK_MEMb_IMMb_80r0 = 64,
    XED_IFORM_ADD_LOCK_MEMb_IMMb_82r0 = 65,
    XED_IFORM_ADD_LOCK_MEMv_GPRv = 66,
    XED_IFORM_ADD_LOCK_MEMv_IMMb = 67,
    XED_IFORM_ADD_LOCK_MEMv_IMMz = 68,
    XED_IFORM_ADOX_GPR32d_GPR32d = 69,
    XED_IFORM_ADOX_GPR32d_MEMd = 70,
    XED_IFORM_ADOX_GPR64q_GPR64q = 71,
    XED_IFORM_ADOX_GPR64q_MEMq = 72,
    XED_IFORM_AESDEC_XMMdq_MEMdq = 73,
    XED_IFORM_AESDEC_XMMdq_XMMdq = 74,
    XED_IFORM_AESDECLAST_XMMdq_MEMdq = 75,
    XED_IFORM_AESDECLAST_XMMdq_XMMdq = 76,
    XED_IFORM_AESENC_XMMdq_MEMdq = 77,
    XED_IFORM_AESENC_XMMdq_XMMdq = 78,
    XED_IFORM_AESENCLAST_XMMdq_MEMdq = 79,
    XED_IFORM_AESENCLAST_XMMdq_XMMdq = 80,
    XED_IFORM_AESIMC_XMMdq_MEMdq = 81,
    XED_IFORM_AESIMC_XMMdq_XMMdq = 82,
    XED_IFORM_AESKEYGENASSIST_XMMdq_MEMdq_IMMb = 83,
    XED_IFORM_AESKEYGENASSIST_XMMdq_XMMdq_IMMb = 84,
    XED_IFORM_AND_AL_IMMb = 85,
    XED_IFORM_AND_GPR8_GPR8_20 = 86,
    XED_IFORM_AND_GPR8_GPR8_22 = 87,
    XED_IFORM_AND_GPR8_IMMb_80r4 = 88,
    XED_IFORM_AND_GPR8_IMMb_82r4 = 89,
    XED_IFORM_AND_GPR8_MEMb = 90,
    XED_IFORM_AND_GPRv_GPRv_21 = 91,
    XED_IFORM_AND_GPRv_GPRv_23 = 92,
    XED_IFORM_AND_GPRv_IMMb = 93,
    XED_IFORM_AND_GPRv_IMMz = 94,
    XED_IFORM_AND_GPRv_MEMv = 95,
    XED_IFORM_AND_MEMb_GPR8 = 96,
    XED_IFORM_AND_MEMb_IMMb_80r4 = 97,
    XED_IFORM_AND_MEMb_IMMb_82r4 = 98,
    XED_IFORM_AND_MEMv_GPRv = 99,
    XED_IFORM_AND_MEMv_IMMb = 100,
    XED_IFORM_AND_MEMv_IMMz = 101,
    XED_IFORM_AND_OrAX_IMMz = 102,
    XED_IFORM_ANDN_VGPR32d_VGPR32d_MEMd = 103,
    XED_IFORM_ANDN_VGPR32d_VGPR32d_VGPR32d = 104,
    XED_IFORM_ANDN_VGPR64q_VGPR64q_MEMq = 105,
    XED_IFORM_ANDN_VGPR64q_VGPR64q_VGPR64q = 106,
    XED_IFORM_ANDNPD_XMMpd_MEMpd = 107,
    XED_IFORM_ANDNPD_XMMpd_XMMpd = 108,
    XED_IFORM_ANDNPS_XMMps_MEMps = 109,
    XED_IFORM_ANDNPS_XMMps_XMMps = 110,
    XED_IFORM_ANDPD_XMMpd_MEMpd = 111,
    XED_IFORM_ANDPD_XMMpd_XMMpd = 112,
    XED_IFORM_ANDPS_XMMps_MEMps = 113,
    XED_IFORM_ANDPS_XMMps_XMMps = 114,
    XED_IFORM_AND_LOCK_MEMb_GPR8 = 115,
    XED_IFORM_AND_LOCK_MEMb_IMMb_80r4 = 116,
    XED_IFORM_AND_LOCK_MEMb_IMMb_82r4 = 117,
    XED_IFORM_AND_LOCK_MEMv_GPRv = 118,
    XED_IFORM_AND_LOCK_MEMv_IMMb = 119,
    XED_IFORM_AND_LOCK_MEMv_IMMz = 120,
    XED_IFORM_ARPL_GPR16_GPR16 = 121,
    XED_IFORM_ARPL_MEMw_GPR16 = 122,
    XED_IFORM_BEXTR_VGPR32d_MEMd_VGPR32d = 123,
    XED_IFORM_BEXTR_VGPR32d_VGPR32d_VGPR32d = 124,
    XED_IFORM_BEXTR_VGPR64q_MEMq_VGPR64q = 125,
    XED_IFORM_BEXTR_VGPR64q_VGPR64q_VGPR64q = 126,
    XED_IFORM_BEXTR_XOP_GPR32d_GPR32d_IMMd = 127,
    XED_IFORM_BEXTR_XOP_GPR32d_MEMd_IMMd = 128,
    XED_IFORM_BEXTR_XOP_GPRyy_GPRyy_IMMd = 129,
    XED_IFORM_BEXTR_XOP_GPRyy_MEMy_IMMd = 130,
    XED_IFORM_BLCFILL_VGPR32d_GPR32d = 131,
    XED_IFORM_BLCFILL_VGPR32d_MEMd = 132,
    XED_IFORM_BLCFILL_VGPRyy_GPRvy = 133,
    XED_IFORM_BLCFILL_VGPRyy_MEMy = 134,
    XED_IFORM_BLCI_VGPR32d_GPRvd = 135,
    XED_IFORM_BLCI_VGPR32d_MEMd = 136,
    XED_IFORM_BLCI_VGPRyy_GPRvy = 137,
    XED_IFORM_BLCI_VGPRyy_MEMy = 138,
    XED_IFORM_BLCIC_VGPR32d_GPR32d = 139,
    XED_IFORM_BLCIC_VGPR32d_MEMd = 140,
    XED_IFORM_BLCIC_VGPRyy_GPRvy = 141,
    XED_IFORM_BLCIC_VGPRyy_MEMy = 142,
    XED_IFORM_BLCMSK_VGPR32d_GPRvd = 143,
    XED_IFORM_BLCMSK_VGPR32d_MEMd = 144,
    XED_IFORM_BLCMSK_VGPRyy_GPRvy = 145,
    XED_IFORM_BLCMSK_VGPRyy_MEMy = 146,
    XED_IFORM_BLCS_VGPR32d_GPR32d = 147,
    XED_IFORM_BLCS_VGPR32d_MEMd = 148,
    XED_IFORM_BLCS_VGPRyy_GPRvy = 149,
    XED_IFORM_BLCS_VGPRyy_MEMy = 150,
    XED_IFORM_BLENDPD_XMMdq_MEMdq_IMMb = 151,
    XED_IFORM_BLENDPD_XMMdq_XMMdq_IMMb = 152,
    XED_IFORM_BLENDPS_XMMdq_MEMdq_IMMb = 153,
    XED_IFORM_BLENDPS_XMMdq_XMMdq_IMMb = 154,
    XED_IFORM_BLENDVPD_XMMdq_MEMdq = 155,
    XED_IFORM_BLENDVPD_XMMdq_XMMdq = 156,
    XED_IFORM_BLENDVPS_XMMdq_MEMdq = 157,
    XED_IFORM_BLENDVPS_XMMdq_XMMdq = 158,
    XED_IFORM_BLSFILL_VGPR32d_GPR32d = 159,
    XED_IFORM_BLSFILL_VGPR32d_MEMd = 160,
    XED_IFORM_BLSFILL_VGPRyy_GPRvy = 161,
    XED_IFORM_BLSFILL_VGPRyy_MEMy = 162,
    XED_IFORM_BLSI_VGPR32d_MEMd = 163,
    XED_IFORM_BLSI_VGPR32d_VGPR32d = 164,
    XED_IFORM_BLSI_VGPR64q_MEMq = 165,
    XED_IFORM_BLSI_VGPR64q_VGPR64q = 166,
    XED_IFORM_BLSIC_VGPR32d_GPR32d = 167,
    XED_IFORM_BLSIC_VGPR32d_MEMd = 168,
    XED_IFORM_BLSIC_VGPRyy_GPRvy = 169,
    XED_IFORM_BLSIC_VGPRyy_MEMy = 170,
    XED_IFORM_BLSMSK_VGPR32d_MEMd = 171,
    XED_IFORM_BLSMSK_VGPR32d_VGPR32d = 172,
    XED_IFORM_BLSMSK_VGPR64q_MEMq = 173,
    XED_IFORM_BLSMSK_VGPR64q_VGPR64q = 174,
    XED_IFORM_BLSR_VGPR32d_MEMd = 175,
    XED_IFORM_BLSR_VGPR32d_VGPR32d = 176,
    XED_IFORM_BLSR_VGPR64q_MEMq = 177,
    XED_IFORM_BLSR_VGPR64q_VGPR64q = 178,
    XED_IFORM_BNDCL_BND_AGEN = 179,
    XED_IFORM_BNDCL_BND_GPR32 = 180,
    XED_IFORM_BNDCL_BND_GPR64 = 181,
    XED_IFORM_BNDCN_BND_AGEN = 182,
    XED_IFORM_BNDCN_BND_GPR32 = 183,
    XED_IFORM_BNDCN_BND_GPR64 = 184,
    XED_IFORM_BNDCU_BND_AGEN = 185,
    XED_IFORM_BNDCU_BND_GPR32 = 186,
    XED_IFORM_BNDCU_BND_GPR64 = 187,
    XED_IFORM_BNDLDX_BND_MEMbnd32 = 188,
    XED_IFORM_BNDLDX_BND_MEMbnd64 = 189,
    XED_IFORM_BNDMK_BND_AGEN = 190,
    XED_IFORM_BNDMOV_BND_BND = 191,
    XED_IFORM_BNDMOV_BND_MEMdq = 192,
    XED_IFORM_BNDMOV_BND_MEMq = 193,
    XED_IFORM_BNDMOV_MEMdq_BND = 194,
    XED_IFORM_BNDMOV_MEMq_BND = 195,
    XED_IFORM_BNDSTX_MEMbnd32_BND = 196,
    XED_IFORM_BNDSTX_MEMbnd64_BND = 197,
    XED_IFORM_BOUND_GPRv_MEMa16 = 198,
    XED_IFORM_BOUND_GPRv_MEMa32 = 199,
    XED_IFORM_BSF_GPRv_GPRv = 200,
    XED_IFORM_BSF_GPRv_MEMv = 201,
    XED_IFORM_BSR_GPRv_GPRv = 202,
    XED_IFORM_BSR_GPRv_MEMv = 203,
    XED_IFORM_BSWAP_GPRv = 204,
    XED_IFORM_BT_GPRv_GPRv = 205,
    XED_IFORM_BT_GPRv_IMMb = 206,
    XED_IFORM_BT_MEMv_GPRv = 207,
    XED_IFORM_BT_MEMv_IMMb = 208,
    XED_IFORM_BTC_GPRv_GPRv = 209,
    XED_IFORM_BTC_GPRv_IMMb = 210,
    XED_IFORM_BTC_MEMv_GPRv = 211,
    XED_IFORM_BTC_MEMv_IMMb = 212,
    XED_IFORM_BTC_LOCK_MEMv_GPRv = 213,
    XED_IFORM_BTC_LOCK_MEMv_IMMb = 214,
    XED_IFORM_BTR_GPRv_GPRv = 215,
    XED_IFORM_BTR_GPRv_IMMb = 216,
    XED_IFORM_BTR_MEMv_GPRv = 217,
    XED_IFORM_BTR_MEMv_IMMb = 218,
    XED_IFORM_BTR_LOCK_MEMv_GPRv = 219,
    XED_IFORM_BTR_LOCK_MEMv_IMMb = 220,
    XED_IFORM_BTS_GPRv_GPRv = 221,
    XED_IFORM_BTS_GPRv_IMMb = 222,
    XED_IFORM_BTS_MEMv_GPRv = 223,
    XED_IFORM_BTS_MEMv_IMMb = 224,
    XED_IFORM_BTS_LOCK_MEMv_GPRv = 225,
    XED_IFORM_BTS_LOCK_MEMv_IMMb = 226,
    XED_IFORM_BZHI_VGPR32d_MEMd_VGPR32d = 227,
    XED_IFORM_BZHI_VGPR32d_VGPR32d_VGPR32d = 228,
    XED_IFORM_BZHI_VGPR64q_MEMq_VGPR64q = 229,
    XED_IFORM_BZHI_VGPR64q_VGPR64q_VGPR64q = 230,
    XED_IFORM_CALL_FAR_MEMp2 = 231,
    XED_IFORM_CALL_FAR_PTRp_IMMw = 232,
    XED_IFORM_CALL_NEAR_GPRv = 233,
    XED_IFORM_CALL_NEAR_MEMv = 234,
    XED_IFORM_CALL_NEAR_RELBRd = 235,
    XED_IFORM_CALL_NEAR_RELBRz = 236,
    XED_IFORM_CBW = 237,
    XED_IFORM_CDQ = 238,
    XED_IFORM_CDQE = 239,
    XED_IFORM_CLAC = 240,
    XED_IFORM_CLC = 241,
    XED_IFORM_CLD = 242,
    XED_IFORM_CLFLUSH_MEMmprefetch = 243,
    XED_IFORM_CLFLUSHOPT_MEMmprefetch = 244,
    XED_IFORM_CLGI = 245,
    XED_IFORM_CLI = 246,
    XED_IFORM_CLRSSBSY_MEMu64 = 247,
    XED_IFORM_CLTS = 248,
    XED_IFORM_CLWB_MEMmprefetch = 249,
    XED_IFORM_CLZERO_OrAX = 250,
    XED_IFORM_CMC = 251,
    XED_IFORM_CMOVB_GPRv_GPRv = 252,
    XED_IFORM_CMOVB_GPRv_MEMv = 253,
    XED_IFORM_CMOVBE_GPRv_GPRv = 254,
    XED_IFORM_CMOVBE_GPRv_MEMv = 255,
    XED_IFORM_CMOVL_GPRv_GPRv = 256,
    XED_IFORM_CMOVL_GPRv_MEMv = 257,
    XED_IFORM_CMOVLE_GPRv_GPRv = 258,
    XED_IFORM_CMOVLE_GPRv_MEMv = 259,
    XED_IFORM_CMOVNB_GPRv_GPRv = 260,
    XED_IFORM_CMOVNB_GPRv_MEMv = 261,
    XED_IFORM_CMOVNBE_GPRv_GPRv = 262,
    XED_IFORM_CMOVNBE_GPRv_MEMv = 263,
    XED_IFORM_CMOVNL_GPRv_GPRv = 264,
    XED_IFORM_CMOVNL_GPRv_MEMv = 265,
    XED_IFORM_CMOVNLE_GPRv_GPRv = 266,
    XED_IFORM_CMOVNLE_GPRv_MEMv = 267,
    XED_IFORM_CMOVNO_GPRv_GPRv = 268,
    XED_IFORM_CMOVNO_GPRv_MEMv = 269,
    XED_IFORM_CMOVNP_GPRv_GPRv = 270,
    XED_IFORM_CMOVNP_GPRv_MEMv = 271,
    XED_IFORM_CMOVNS_GPRv_GPRv = 272,
    XED_IFORM_CMOVNS_GPRv_MEMv = 273,
    XED_IFORM_CMOVNZ_GPRv_GPRv = 274,
    XED_IFORM_CMOVNZ_GPRv_MEMv = 275,
    XED_IFORM_CMOVO_GPRv_GPRv = 276,
    XED_IFORM_CMOVO_GPRv_MEMv = 277,
    XED_IFORM_CMOVP_GPRv_GPRv = 278,
    XED_IFORM_CMOVP_GPRv_MEMv = 279,
    XED_IFORM_CMOVS_GPRv_GPRv = 280,
    XED_IFORM_CMOVS_GPRv_MEMv = 281,
    XED_IFORM_CMOVZ_GPRv_GPRv = 282,
    XED_IFORM_CMOVZ_GPRv_MEMv = 283,
    XED_IFORM_CMP_AL_IMMb = 284,
    XED_IFORM_CMP_GPR8_GPR8_38 = 285,
    XED_IFORM_CMP_GPR8_GPR8_3A = 286,
    XED_IFORM_CMP_GPR8_IMMb_80r7 = 287,
    XED_IFORM_CMP_GPR8_IMMb_82r7 = 288,
    XED_IFORM_CMP_GPR8_MEMb = 289,
    XED_IFORM_CMP_GPRv_GPRv_39 = 290,
    XED_IFORM_CMP_GPRv_GPRv_3B = 291,
    XED_IFORM_CMP_GPRv_IMMb = 292,
    XED_IFORM_CMP_GPRv_IMMz = 293,
    XED_IFORM_CMP_GPRv_MEMv = 294,
    XED_IFORM_CMP_MEMb_GPR8 = 295,
    XED_IFORM_CMP_MEMb_IMMb_80r7 = 296,
    XED_IFORM_CMP_MEMb_IMMb_82r7 = 297,
    XED_IFORM_CMP_MEMv_GPRv = 298,
    XED_IFORM_CMP_MEMv_IMMb = 299,
    XED_IFORM_CMP_MEMv_IMMz = 300,
    XED_IFORM_CMP_OrAX_IMMz = 301,
    XED_IFORM_CMPPD_XMMpd_MEMpd_IMMb = 302,
    XED_IFORM_CMPPD_XMMpd_XMMpd_IMMb = 303,
    XED_IFORM_CMPPS_XMMps_MEMps_IMMb = 304,
    XED_IFORM_CMPPS_XMMps_XMMps_IMMb = 305,
    XED_IFORM_CMPSB = 306,
    XED_IFORM_CMPSD = 307,
    XED_IFORM_CMPSD_XMM_XMMsd_MEMsd_IMMb = 308,
    XED_IFORM_CMPSD_XMM_XMMsd_XMMsd_IMMb = 309,
    XED_IFORM_CMPSQ = 310,
    XED_IFORM_CMPSS_XMMss_MEMss_IMMb = 311,
    XED_IFORM_CMPSS_XMMss_XMMss_IMMb = 312,
    XED_IFORM_CMPSW = 313,
    XED_IFORM_CMPXCHG_GPR8_GPR8 = 314,
    XED_IFORM_CMPXCHG_GPRv_GPRv = 315,
    XED_IFORM_CMPXCHG_MEMb_GPR8 = 316,
    XED_IFORM_CMPXCHG_MEMv_GPRv = 317,
    XED_IFORM_CMPXCHG16B_MEMdq = 318,
    XED_IFORM_CMPXCHG16B_LOCK_MEMdq = 319,
    XED_IFORM_CMPXCHG8B_MEMq = 320,
    XED_IFORM_CMPXCHG8B_LOCK_MEMq = 321,
    XED_IFORM_CMPXCHG_LOCK_MEMb_GPR8 = 322,
    XED_IFORM_CMPXCHG_LOCK_MEMv_GPRv = 323,
    XED_IFORM_COMISD_XMMsd_MEMsd = 324,
    XED_IFORM_COMISD_XMMsd_XMMsd = 325,
    XED_IFORM_COMISS_XMMss_MEMss = 326,
    XED_IFORM_COMISS_XMMss_XMMss = 327,
    XED_IFORM_CPUID = 328,
    XED_IFORM_CQO = 329,
    XED_IFORM_CRC32_GPRyy_GPR8b = 330,
    XED_IFORM_CRC32_GPRyy_GPRv = 331,
    XED_IFORM_CRC32_GPRyy_MEMb = 332,
    XED_IFORM_CRC32_GPRyy_MEMv = 333,
    XED_IFORM_CVTDQ2PD_XMMpd_MEMq = 334,
    XED_IFORM_CVTDQ2PD_XMMpd_XMMq = 335,
    XED_IFORM_CVTDQ2PS_XMMps_MEMdq = 336,
    XED_IFORM_CVTDQ2PS_XMMps_XMMdq = 337,
    XED_IFORM_CVTPD2DQ_XMMdq_MEMpd = 338,
    XED_IFORM_CVTPD2DQ_XMMdq_XMMpd = 339,
    XED_IFORM_CVTPD2PI_MMXq_MEMpd = 340,
    XED_IFORM_CVTPD2PI_MMXq_XMMpd = 341,
    XED_IFORM_CVTPD2PS_XMMps_MEMpd = 342,
    XED_IFORM_CVTPD2PS_XMMps_XMMpd = 343,
    XED_IFORM_CVTPI2PD_XMMpd_MEMq = 344,
    XED_IFORM_CVTPI2PD_XMMpd_MMXq = 345,
    XED_IFORM_CVTPI2PS_XMMq_MEMq = 346,
    XED_IFORM_CVTPI2PS_XMMq_MMXq = 347,
    XED_IFORM_CVTPS2DQ_XMMdq_MEMps = 348,
    XED_IFORM_CVTPS2DQ_XMMdq_XMMps = 349,
    XED_IFORM_CVTPS2PD_XMMpd_MEMq = 350,
    XED_IFORM_CVTPS2PD_XMMpd_XMMq = 351,
    XED_IFORM_CVTPS2PI_MMXq_MEMq = 352,
    XED_IFORM_CVTPS2PI_MMXq_XMMq = 353,
    XED_IFORM_CVTSD2SI_GPR32d_MEMsd = 354,
    XED_IFORM_CVTSD2SI_GPR32d_XMMsd = 355,
    XED_IFORM_CVTSD2SI_GPR64q_MEMsd = 356,
    XED_IFORM_CVTSD2SI_GPR64q_XMMsd = 357,
    XED_IFORM_CVTSD2SS_XMMss_MEMsd = 358,
    XED_IFORM_CVTSD2SS_XMMss_XMMsd = 359,
    XED_IFORM_CVTSI2SD_XMMsd_GPR32d = 360,
    XED_IFORM_CVTSI2SD_XMMsd_GPR64q = 361,
    XED_IFORM_CVTSI2SD_XMMsd_MEMd = 362,
    XED_IFORM_CVTSI2SD_XMMsd_MEMq = 363,
    XED_IFORM_CVTSI2SS_XMMss_GPR32d = 364,
    XED_IFORM_CVTSI2SS_XMMss_GPR64q = 365,
    XED_IFORM_CVTSI2SS_XMMss_MEMd = 366,
    XED_IFORM_CVTSI2SS_XMMss_MEMq = 367,
    XED_IFORM_CVTSS2SD_XMMsd_MEMss = 368,
    XED_IFORM_CVTSS2SD_XMMsd_XMMss = 369,
    XED_IFORM_CVTSS2SI_GPR32d_MEMss = 370,
    XED_IFORM_CVTSS2SI_GPR32d_XMMss = 371,
    XED_IFORM_CVTSS2SI_GPR64q_MEMss = 372,
    XED_IFORM_CVTSS2SI_GPR64q_XMMss = 373,
    XED_IFORM_CVTTPD2DQ_XMMdq_MEMpd = 374,
    XED_IFORM_CVTTPD2DQ_XMMdq_XMMpd = 375,
    XED_IFORM_CVTTPD2PI_MMXq_MEMpd = 376,
    XED_IFORM_CVTTPD2PI_MMXq_XMMpd = 377,
    XED_IFORM_CVTTPS2DQ_XMMdq_MEMps = 378,
    XED_IFORM_CVTTPS2DQ_XMMdq_XMMps = 379,
    XED_IFORM_CVTTPS2PI_MMXq_MEMq = 380,
    XED_IFORM_CVTTPS2PI_MMXq_XMMq = 381,
    XED_IFORM_CVTTSD2SI_GPR32d_MEMsd = 382,
    XED_IFORM_CVTTSD2SI_GPR32d_XMMsd = 383,
    XED_IFORM_CVTTSD2SI_GPR64q_MEMsd = 384,
    XED_IFORM_CVTTSD2SI_GPR64q_XMMsd = 385,
    XED_IFORM_CVTTSS2SI_GPR32d_MEMss = 386,
    XED_IFORM_CVTTSS2SI_GPR32d_XMMss = 387,
    XED_IFORM_CVTTSS2SI_GPR64q_MEMss = 388,
    XED_IFORM_CVTTSS2SI_GPR64q_XMMss = 389,
    XED_IFORM_CWD = 390,
    XED_IFORM_CWDE = 391,
    XED_IFORM_DAA = 392,
    XED_IFORM_DAS = 393,
    XED_IFORM_DEC_GPR8 = 394,
    XED_IFORM_DEC_GPRv_48 = 395,
    XED_IFORM_DEC_GPRv_FFr1 = 396,
    XED_IFORM_DEC_MEMb = 397,
    XED_IFORM_DEC_MEMv = 398,
    XED_IFORM_DEC_LOCK_MEMb = 399,
    XED_IFORM_DEC_LOCK_MEMv = 400,
    XED_IFORM_DIV_GPR8 = 401,
    XED_IFORM_DIV_GPRv = 402,
    XED_IFORM_DIV_MEMb = 403,
    XED_IFORM_DIV_MEMv = 404,
    XED_IFORM_DIVPD_XMMpd_MEMpd = 405,
    XED_IFORM_DIVPD_XMMpd_XMMpd = 406,
    XED_IFORM_DIVPS_XMMps_MEMps = 407,
    XED_IFORM_DIVPS_XMMps_XMMps = 408,
    XED_IFORM_DIVSD_XMMsd_MEMsd = 409,
    XED_IFORM_DIVSD_XMMsd_XMMsd = 410,
    XED_IFORM_DIVSS_XMMss_MEMss = 411,
    XED_IFORM_DIVSS_XMMss_XMMss = 412,
    XED_IFORM_DPPD_XMMdq_MEMdq_IMMb = 413,
    XED_IFORM_DPPD_XMMdq_XMMdq_IMMb = 414,
    XED_IFORM_DPPS_XMMdq_MEMdq_IMMb = 415,
    XED_IFORM_DPPS_XMMdq_XMMdq_IMMb = 416,
    XED_IFORM_EMMS = 417,
    XED_IFORM_ENCLS = 418,
    XED_IFORM_ENCLU = 419,
    XED_IFORM_ENDBR32 = 420,
    XED_IFORM_ENDBR64 = 421,
    XED_IFORM_ENTER_IMMw_IMMb = 422,
    XED_IFORM_EXTRACTPS_GPR32d_XMMdq_IMMb = 423,
    XED_IFORM_EXTRACTPS_MEMd_XMMps_IMMb = 424,
    XED_IFORM_EXTRQ_XMMq_IMMb_IMMb = 425,
    XED_IFORM_EXTRQ_XMMq_XMMdq = 426,
    XED_IFORM_F2XM1 = 427,
    XED_IFORM_FABS = 428,
    XED_IFORM_FADD_ST0_MEMm64real = 429,
    XED_IFORM_FADD_ST0_MEMmem32real = 430,
    XED_IFORM_FADD_ST0_X87 = 431,
    XED_IFORM_FADD_X87_ST0 = 432,
    XED_IFORM_FADDP_X87_ST0 = 433,
    XED_IFORM_FBLD_ST0_MEMmem80dec = 434,
    XED_IFORM_FBSTP_MEMmem80dec_ST0 = 435,
    XED_IFORM_FCHS = 436,
    XED_IFORM_FCMOVB_ST0_X87 = 437,
    XED_IFORM_FCMOVBE_ST0_X87 = 438,
    XED_IFORM_FCMOVE_ST0_X87 = 439,
    XED_IFORM_FCMOVNB_ST0_X87 = 440,
    XED_IFORM_FCMOVNBE_ST0_X87 = 441,
    XED_IFORM_FCMOVNE_ST0_X87 = 442,
    XED_IFORM_FCMOVNU_ST0_X87 = 443,
    XED_IFORM_FCMOVU_ST0_X87 = 444,
    XED_IFORM_FCOM_ST0_MEMm64real = 445,
    XED_IFORM_FCOM_ST0_MEMmem32real = 446,
    XED_IFORM_FCOM_ST0_X87 = 447,
    XED_IFORM_FCOM_ST0_X87_DCD0 = 448,
    XED_IFORM_FCOMI_ST0_X87 = 449,
    XED_IFORM_FCOMIP_ST0_X87 = 450,
    XED_IFORM_FCOMP_ST0_MEMm64real = 451,
    XED_IFORM_FCOMP_ST0_MEMmem32real = 452,
    XED_IFORM_FCOMP_ST0_X87 = 453,
    XED_IFORM_FCOMP_ST0_X87_DCD1 = 454,
    XED_IFORM_FCOMP_ST0_X87_DED0 = 455,
    XED_IFORM_FCOMPP = 456,
    XED_IFORM_FCOS = 457,
    XED_IFORM_FDECSTP = 458,
    XED_IFORM_FDISI8087_NOP = 459,
    XED_IFORM_FDIV_ST0_MEMm64real = 460,
    XED_IFORM_FDIV_ST0_MEMmem32real = 461,
    XED_IFORM_FDIV_ST0_X87 = 462,
    XED_IFORM_FDIV_X87_ST0 = 463,
    XED_IFORM_FDIVP_X87_ST0 = 464,
    XED_IFORM_FDIVR_ST0_MEMm64real = 465,
    XED_IFORM_FDIVR_ST0_MEMmem32real = 466,
    XED_IFORM_FDIVR_ST0_X87 = 467,
    XED_IFORM_FDIVR_X87_ST0 = 468,
    XED_IFORM_FDIVRP_X87_ST0 = 469,
    XED_IFORM_FEMMS = 470,
    XED_IFORM_FENI8087_NOP = 471,
    XED_IFORM_FFREE_X87 = 472,
    XED_IFORM_FFREEP_X87 = 473,
    XED_IFORM_FIADD_ST0_MEMmem16int = 474,
    XED_IFORM_FIADD_ST0_MEMmem32int = 475,
    XED_IFORM_FICOM_ST0_MEMmem16int = 476,
    XED_IFORM_FICOM_ST0_MEMmem32int = 477,
    XED_IFORM_FICOMP_ST0_MEMmem16int = 478,
    XED_IFORM_FICOMP_ST0_MEMmem32int = 479,
    XED_IFORM_FIDIV_ST0_MEMmem16int = 480,
    XED_IFORM_FIDIV_ST0_MEMmem32int = 481,
    XED_IFORM_FIDIVR_ST0_MEMmem16int = 482,
    XED_IFORM_FIDIVR_ST0_MEMmem32int = 483,
    XED_IFORM_FILD_ST0_MEMm64int = 484,
    XED_IFORM_FILD_ST0_MEMmem16int = 485,
    XED_IFORM_FILD_ST0_MEMmem32int = 486,
    XED_IFORM_FIMUL_ST0_MEMmem16int = 487,
    XED_IFORM_FIMUL_ST0_MEMmem32int = 488,
    XED_IFORM_FINCSTP = 489,
    XED_IFORM_FIST_MEMmem16int_ST0 = 490,
    XED_IFORM_FIST_MEMmem32int_ST0 = 491,
    XED_IFORM_FISTP_MEMm64int_ST0 = 492,
    XED_IFORM_FISTP_MEMmem16int_ST0 = 493,
    XED_IFORM_FISTP_MEMmem32int_ST0 = 494,
    XED_IFORM_FISTTP_MEMm64int_ST0 = 495,
    XED_IFORM_FISTTP_MEMmem16int_ST0 = 496,
    XED_IFORM_FISTTP_MEMmem32int_ST0 = 497,
    XED_IFORM_FISUB_ST0_MEMmem16int = 498,
    XED_IFORM_FISUB_ST0_MEMmem32int = 499,
    XED_IFORM_FISUBR_ST0_MEMmem16int = 500,
    XED_IFORM_FISUBR_ST0_MEMmem32int = 501,
    XED_IFORM_FLD_ST0_MEMm64real = 502,
    XED_IFORM_FLD_ST0_MEMmem32real = 503,
    XED_IFORM_FLD_ST0_MEMmem80real = 504,
    XED_IFORM_FLD_ST0_X87 = 505,
    XED_IFORM_FLD1 = 506,
    XED_IFORM_FLDCW_MEMmem16 = 507,
    XED_IFORM_FLDENV_MEMmem14 = 508,
    XED_IFORM_FLDENV_MEMmem28 = 509,
    XED_IFORM_FLDL2E = 510,
    XED_IFORM_FLDL2T = 511,
    XED_IFORM_FLDLG2 = 512,
    XED_IFORM_FLDLN2 = 513,
    XED_IFORM_FLDPI = 514,
    XED_IFORM_FLDZ = 515,
    XED_IFORM_FMUL_ST0_MEMm64real = 516,
    XED_IFORM_FMUL_ST0_MEMmem32real = 517,
    XED_IFORM_FMUL_ST0_X87 = 518,
    XED_IFORM_FMUL_X87_ST0 = 519,
    XED_IFORM_FMULP_X87_ST0 = 520,
    XED_IFORM_FNCLEX = 521,
    XED_IFORM_FNINIT = 522,
    XED_IFORM_FNOP = 523,
    XED_IFORM_FNSAVE_MEMmem108 = 524,
    XED_IFORM_FNSAVE_MEMmem94 = 525,
    XED_IFORM_FNSTCW_MEMmem16 = 526,
    XED_IFORM_FNSTENV_MEMmem14 = 527,
    XED_IFORM_FNSTENV_MEMmem28 = 528,
    XED_IFORM_FNSTSW_AX = 529,
    XED_IFORM_FNSTSW_MEMmem16 = 530,
    XED_IFORM_FPATAN = 531,
    XED_IFORM_FPREM = 532,
    XED_IFORM_FPREM1 = 533,
    XED_IFORM_FPTAN = 534,
    XED_IFORM_FRNDINT = 535,
    XED_IFORM_FRSTOR_MEMmem108 = 536,
    XED_IFORM_FRSTOR_MEMmem94 = 537,
    XED_IFORM_FSCALE = 538,
    XED_IFORM_FSETPM287_NOP = 539,
    XED_IFORM_FSIN = 540,
    XED_IFORM_FSINCOS = 541,
    XED_IFORM_FSQRT = 542,
    XED_IFORM_FST_MEMm64real_ST0 = 543,
    XED_IFORM_FST_MEMmem32real_ST0 = 544,
    XED_IFORM_FST_X87_ST0 = 545,
    XED_IFORM_FSTP_MEMm64real_ST0 = 546,
    XED_IFORM_FSTP_MEMmem32real_ST0 = 547,
    XED_IFORM_FSTP_MEMmem80real_ST0 = 548,
    XED_IFORM_FSTP_X87_ST0 = 549,
    XED_IFORM_FSTP_X87_ST0_DFD0 = 550,
    XED_IFORM_FSTP_X87_ST0_DFD1 = 551,
    XED_IFORM_FSTPNCE_X87_ST0 = 552,
    XED_IFORM_FSUB_ST0_MEMm64real = 553,
    XED_IFORM_FSUB_ST0_MEMmem32real = 554,
    XED_IFORM_FSUB_ST0_X87 = 555,
    XED_IFORM_FSUB_X87_ST0 = 556,
    XED_IFORM_FSUBP_X87_ST0 = 557,
    XED_IFORM_FSUBR_ST0_MEMm64real = 558,
    XED_IFORM_FSUBR_ST0_MEMmem32real = 559,
    XED_IFORM_FSUBR_ST0_X87 = 560,
    XED_IFORM_FSUBR_X87_ST0 = 561,
    XED_IFORM_FSUBRP_X87_ST0 = 562,
    XED_IFORM_FTST = 563,
    XED_IFORM_FUCOM_ST0_X87 = 564,
    XED_IFORM_FUCOMI_ST0_X87 = 565,
    XED_IFORM_FUCOMIP_ST0_X87 = 566,
    XED_IFORM_FUCOMP_ST0_X87 = 567,
    XED_IFORM_FUCOMPP = 568,
    XED_IFORM_FWAIT = 569,
    XED_IFORM_FXAM = 570,
    XED_IFORM_FXCH_ST0_X87 = 571,
    XED_IFORM_FXCH_ST0_X87_DDC1 = 572,
    XED_IFORM_FXCH_ST0_X87_DFC1 = 573,
    XED_IFORM_FXRSTOR_MEMmfpxenv = 574,
    XED_IFORM_FXRSTOR64_MEMmfpxenv = 575,
    XED_IFORM_FXSAVE_MEMmfpxenv = 576,
    XED_IFORM_FXSAVE64_MEMmfpxenv = 577,
    XED_IFORM_FXTRACT = 578,
    XED_IFORM_FYL2X = 579,
    XED_IFORM_FYL2XP1 = 580,
    XED_IFORM_GETSEC = 581,
    XED_IFORM_HADDPD_XMMpd_MEMpd = 582,
    XED_IFORM_HADDPD_XMMpd_XMMpd = 583,
    XED_IFORM_HADDPS_XMMps_MEMps = 584,
    XED_IFORM_HADDPS_XMMps_XMMps = 585,
    XED_IFORM_HLT = 586,
    XED_IFORM_HSUBPD_XMMpd_MEMpd = 587,
    XED_IFORM_HSUBPD_XMMpd_XMMpd = 588,
    XED_IFORM_HSUBPS_XMMps_MEMps = 589,
    XED_IFORM_HSUBPS_XMMps_XMMps = 590,
    XED_IFORM_IDIV_GPR8 = 591,
    XED_IFORM_IDIV_GPRv = 592,
    XED_IFORM_IDIV_MEMb = 593,
    XED_IFORM_IDIV_MEMv = 594,
    XED_IFORM_IMUL_GPR8 = 595,
    XED_IFORM_IMUL_GPRv = 596,
    XED_IFORM_IMUL_GPRv_GPRv = 597,
    XED_IFORM_IMUL_GPRv_GPRv_IMMb = 598,
    XED_IFORM_IMUL_GPRv_GPRv_IMMz = 599,
    XED_IFORM_IMUL_GPRv_MEMv = 600,
    XED_IFORM_IMUL_GPRv_MEMv_IMMb = 601,
    XED_IFORM_IMUL_GPRv_MEMv_IMMz = 602,
    XED_IFORM_IMUL_MEMb = 603,
    XED_IFORM_IMUL_MEMv = 604,
    XED_IFORM_IN_AL_DX = 605,
    XED_IFORM_IN_AL_IMMb = 606,
    XED_IFORM_IN_OeAX_DX = 607,
    XED_IFORM_IN_OeAX_IMMb = 608,
    XED_IFORM_INC_GPR8 = 609,
    XED_IFORM_INC_GPRv_40 = 610,
    XED_IFORM_INC_GPRv_FFr0 = 611,
    XED_IFORM_INC_MEMb = 612,
    XED_IFORM_INC_MEMv = 613,
    XED_IFORM_INCSSPD_GPR32u8 = 614,
    XED_IFORM_INCSSPQ_GPR64u8 = 615,
    XED_IFORM_INC_LOCK_MEMb = 616,
    XED_IFORM_INC_LOCK_MEMv = 617,
    XED_IFORM_INSB = 618,
    XED_IFORM_INSD = 619,
    XED_IFORM_INSERTPS_XMMps_MEMd_IMMb = 620,
    XED_IFORM_INSERTPS_XMMps_XMMps_IMMb = 621,
    XED_IFORM_INSERTQ_XMMq_XMMdq = 622,
    XED_IFORM_INSERTQ_XMMq_XMMq_IMMb_IMMb = 623,
    XED_IFORM_INSW = 624,
    XED_IFORM_INT_IMMb = 625,
    XED_IFORM_INT1 = 626,
    XED_IFORM_INT3 = 627,
    XED_IFORM_INTO = 628,
    XED_IFORM_INVD = 629,
    XED_IFORM_INVEPT_GPR32_MEMdq = 630,
    XED_IFORM_INVEPT_GPR64_MEMdq = 631,
    XED_IFORM_INVLPG_MEMb = 632,
    XED_IFORM_INVLPGA_OrAX_ECX = 633,
    XED_IFORM_INVPCID_GPR32_MEMdq = 634,
    XED_IFORM_INVPCID_GPR64_MEMdq = 635,
    XED_IFORM_INVVPID_GPR32_MEMdq = 636,
    XED_IFORM_INVVPID_GPR64_MEMdq = 637,
    XED_IFORM_IRET = 638,
    XED_IFORM_IRETD = 639,
    XED_IFORM_IRETQ = 640,
    XED_IFORM_JB_RELBRb = 641,
    XED_IFORM_JB_RELBRd = 642,
    XED_IFORM_JB_RELBRz = 643,
    XED_IFORM_JBE_RELBRb = 644,
    XED_IFORM_JBE_RELBRd = 645,
    XED_IFORM_JBE_RELBRz = 646,
    XED_IFORM_JCXZ_RELBRb = 647,
    XED_IFORM_JECXZ_RELBRb = 648,
    XED_IFORM_JL_RELBRb = 649,
    XED_IFORM_JL_RELBRd = 650,
    XED_IFORM_JL_RELBRz = 651,
    XED_IFORM_JLE_RELBRb = 652,
    XED_IFORM_JLE_RELBRd = 653,
    XED_IFORM_JLE_RELBRz = 654,
    XED_IFORM_JMP_GPRv = 655,
    XED_IFORM_JMP_MEMv = 656,
    XED_IFORM_JMP_RELBRb = 657,
    XED_IFORM_JMP_RELBRd = 658,
    XED_IFORM_JMP_RELBRz = 659,
    XED_IFORM_JMP_FAR_MEMp2 = 660,
    XED_IFORM_JMP_FAR_PTRp_IMMw = 661,
    XED_IFORM_JNB_RELBRb = 662,
    XED_IFORM_JNB_RELBRd = 663,
    XED_IFORM_JNB_RELBRz = 664,
    XED_IFORM_JNBE_RELBRb = 665,
    XED_IFORM_JNBE_RELBRd = 666,
    XED_IFORM_JNBE_RELBRz = 667,
    XED_IFORM_JNL_RELBRb = 668,
    XED_IFORM_JNL_RELBRd = 669,
    XED_IFORM_JNL_RELBRz = 670,
    XED_IFORM_JNLE_RELBRb = 671,
    XED_IFORM_JNLE_RELBRd = 672,
    XED_IFORM_JNLE_RELBRz = 673,
    XED_IFORM_JNO_RELBRb = 674,
    XED_IFORM_JNO_RELBRd = 675,
    XED_IFORM_JNO_RELBRz = 676,
    XED_IFORM_JNP_RELBRb = 677,
    XED_IFORM_JNP_RELBRd = 678,
    XED_IFORM_JNP_RELBRz = 679,
    XED_IFORM_JNS_RELBRb = 680,
    XED_IFORM_JNS_RELBRd = 681,
    XED_IFORM_JNS_RELBRz = 682,
    XED_IFORM_JNZ_RELBRb = 683,
    XED_IFORM_JNZ_RELBRd = 684,
    XED_IFORM_JNZ_RELBRz = 685,
    XED_IFORM_JO_RELBRb = 686,
    XED_IFORM_JO_RELBRd = 687,
    XED_IFORM_JO_RELBRz = 688,
    XED_IFORM_JP_RELBRb = 689,
    XED_IFORM_JP_RELBRd = 690,
    XED_IFORM_JP_RELBRz = 691,
    XED_IFORM_JRCXZ_RELBRb = 692,
    XED_IFORM_JS_RELBRb = 693,
    XED_IFORM_JS_RELBRd = 694,
    XED_IFORM_JS_RELBRz = 695,
    XED_IFORM_JZ_RELBRb = 696,
    XED_IFORM_JZ_RELBRd = 697,
    XED_IFORM_JZ_RELBRz = 698,
    XED_IFORM_KADDB_MASKmskw_MASKmskw_MASKmskw_AVX512 = 699,
    XED_IFORM_KADDD_MASKmskw_MASKmskw_MASKmskw_AVX512 = 700,
    XED_IFORM_KADDQ_MASKmskw_MASKmskw_MASKmskw_AVX512 = 701,
    XED_IFORM_KADDW_MASKmskw_MASKmskw_MASKmskw_AVX512 = 702,
    XED_IFORM_KANDB_MASKmskw_MASKmskw_MASKmskw_AVX512 = 703,
    XED_IFORM_KANDD_MASKmskw_MASKmskw_MASKmskw_AVX512 = 704,
    XED_IFORM_KANDNB_MASKmskw_MASKmskw_MASKmskw_AVX512 = 705,
    XED_IFORM_KANDND_MASKmskw_MASKmskw_MASKmskw_AVX512 = 706,
    XED_IFORM_KANDNQ_MASKmskw_MASKmskw_MASKmskw_AVX512 = 707,
    XED_IFORM_KANDNW_MASKmskw_MASKmskw_MASKmskw_AVX512 = 708,
    XED_IFORM_KANDQ_MASKmskw_MASKmskw_MASKmskw_AVX512 = 709,
    XED_IFORM_KANDW_MASKmskw_MASKmskw_MASKmskw_AVX512 = 710,
    XED_IFORM_KMOVB_GPR32u32_MASKmskw_AVX512 = 711,
    XED_IFORM_KMOVB_MASKmskw_GPR32u32_AVX512 = 712,
    XED_IFORM_KMOVB_MASKmskw_MASKu8_AVX512 = 713,
    XED_IFORM_KMOVB_MASKmskw_MEMu8_AVX512 = 714,
    XED_IFORM_KMOVB_MEMu8_MASKmskw_AVX512 = 715,
    XED_IFORM_KMOVD_GPR32u32_MASKmskw_AVX512 = 716,
    XED_IFORM_KMOVD_MASKmskw_GPR32u32_AVX512 = 717,
    XED_IFORM_KMOVD_MASKmskw_MASKu32_AVX512 = 718,
    XED_IFORM_KMOVD_MASKmskw_MEMu32_AVX512 = 719,
    XED_IFORM_KMOVD_MEMu32_MASKmskw_AVX512 = 720,
    XED_IFORM_KMOVQ_GPR64u64_MASKmskw_AVX512 = 721,
    XED_IFORM_KMOVQ_MASKmskw_GPR64u64_AVX512 = 722,
    XED_IFORM_KMOVQ_MASKmskw_MASKu64_AVX512 = 723,
    XED_IFORM_KMOVQ_MASKmskw_MEMu64_AVX512 = 724,
    XED_IFORM_KMOVQ_MEMu64_MASKmskw_AVX512 = 725,
    XED_IFORM_KMOVW_GPR32u32_MASKmskw_AVX512 = 726,
    XED_IFORM_KMOVW_MASKmskw_GPR32u32_AVX512 = 727,
    XED_IFORM_KMOVW_MASKmskw_MASKu16_AVX512 = 728,
    XED_IFORM_KMOVW_MASKmskw_MEMu16_AVX512 = 729,
    XED_IFORM_KMOVW_MEMu16_MASKmskw_AVX512 = 730,
    XED_IFORM_KNOTB_MASKmskw_MASKmskw_AVX512 = 731,
    XED_IFORM_KNOTD_MASKmskw_MASKmskw_AVX512 = 732,
    XED_IFORM_KNOTQ_MASKmskw_MASKmskw_AVX512 = 733,
    XED_IFORM_KNOTW_MASKmskw_MASKmskw_AVX512 = 734,
    XED_IFORM_KORB_MASKmskw_MASKmskw_MASKmskw_AVX512 = 735,
    XED_IFORM_KORD_MASKmskw_MASKmskw_MASKmskw_AVX512 = 736,
    XED_IFORM_KORQ_MASKmskw_MASKmskw_MASKmskw_AVX512 = 737,
    XED_IFORM_KORTESTB_MASKmskw_MASKmskw_AVX512 = 738,
    XED_IFORM_KORTESTD_MASKmskw_MASKmskw_AVX512 = 739,
    XED_IFORM_KORTESTQ_MASKmskw_MASKmskw_AVX512 = 740,
    XED_IFORM_KORTESTW_MASKmskw_MASKmskw_AVX512 = 741,
    XED_IFORM_KORW_MASKmskw_MASKmskw_MASKmskw_AVX512 = 742,
    XED_IFORM_KSHIFTLB_MASKmskw_MASKmskw_IMM8_AVX512 = 743,
    XED_IFORM_KSHIFTLD_MASKmskw_MASKmskw_IMM8_AVX512 = 744,
    XED_IFORM_KSHIFTLQ_MASKmskw_MASKmskw_IMM8_AVX512 = 745,
    XED_IFORM_KSHIFTLW_MASKmskw_MASKmskw_IMM8_AVX512 = 746,
    XED_IFORM_KSHIFTRB_MASKmskw_MASKmskw_IMM8_AVX512 = 747,
    XED_IFORM_KSHIFTRD_MASKmskw_MASKmskw_IMM8_AVX512 = 748,
    XED_IFORM_KSHIFTRQ_MASKmskw_MASKmskw_IMM8_AVX512 = 749,
    XED_IFORM_KSHIFTRW_MASKmskw_MASKmskw_IMM8_AVX512 = 750,
    XED_IFORM_KTESTB_MASKmskw_MASKmskw_AVX512 = 751,
    XED_IFORM_KTESTD_MASKmskw_MASKmskw_AVX512 = 752,
    XED_IFORM_KTESTQ_MASKmskw_MASKmskw_AVX512 = 753,
    XED_IFORM_KTESTW_MASKmskw_MASKmskw_AVX512 = 754,
    XED_IFORM_KUNPCKBW_MASKmskw_MASKmskw_MASKmskw_AVX512 = 755,
    XED_IFORM_KUNPCKDQ_MASKmskw_MASKmskw_MASKmskw_AVX512 = 756,
    XED_IFORM_KUNPCKWD_MASKmskw_MASKmskw_MASKmskw_AVX512 = 757,
    XED_IFORM_KXNORB_MASKmskw_MASKmskw_MASKmskw_AVX512 = 758,
    XED_IFORM_KXNORD_MASKmskw_MASKmskw_MASKmskw_AVX512 = 759,
    XED_IFORM_KXNORQ_MASKmskw_MASKmskw_MASKmskw_AVX512 = 760,
    XED_IFORM_KXNORW_MASKmskw_MASKmskw_MASKmskw_AVX512 = 761,
    XED_IFORM_KXORB_MASKmskw_MASKmskw_MASKmskw_AVX512 = 762,
    XED_IFORM_KXORD_MASKmskw_MASKmskw_MASKmskw_AVX512 = 763,
    XED_IFORM_KXORQ_MASKmskw_MASKmskw_MASKmskw_AVX512 = 764,
    XED_IFORM_KXORW_MASKmskw_MASKmskw_MASKmskw_AVX512 = 765,
    XED_IFORM_LAHF = 766,
    XED_IFORM_LAR_GPRv_GPRv = 767,
    XED_IFORM_LAR_GPRv_MEMw = 768,
    XED_IFORM_LDDQU_XMMpd_MEMdq = 769,
    XED_IFORM_LDMXCSR_MEMd = 770,
    XED_IFORM_LDS_GPRz_MEMp = 771,
    XED_IFORM_LEA_GPRv_AGEN = 772,
    XED_IFORM_LEAVE = 773,
    XED_IFORM_LES_GPRz_MEMp = 774,
    XED_IFORM_LFENCE = 775,
    XED_IFORM_LFS_GPRv_MEMp2 = 776,
    XED_IFORM_LGDT_MEMs = 777,
    XED_IFORM_LGDT_MEMs64 = 778,
    XED_IFORM_LGS_GPRv_MEMp2 = 779,
    XED_IFORM_LIDT_MEMs = 780,
    XED_IFORM_LIDT_MEMs64 = 781,
    XED_IFORM_LLDT_GPR16 = 782,
    XED_IFORM_LLDT_MEMw = 783,
    XED_IFORM_LLWPCB_GPRyy = 784,
    XED_IFORM_LMSW_GPR16 = 785,
    XED_IFORM_LMSW_MEMw = 786,
    XED_IFORM_LODSB = 787,
    XED_IFORM_LODSD = 788,
    XED_IFORM_LODSQ = 789,
    XED_IFORM_LODSW = 790,
    XED_IFORM_LOOP_RELBRb = 791,
    XED_IFORM_LOOPE_RELBRb = 792,
    XED_IFORM_LOOPNE_RELBRb = 793,
    XED_IFORM_LSL_GPRv_GPRz = 794,
    XED_IFORM_LSL_GPRv_MEMw = 795,
    XED_IFORM_LSS_GPRv_MEMp2 = 796,
    XED_IFORM_LTR_GPR16 = 797,
    XED_IFORM_LTR_MEMw = 798,
    XED_IFORM_LWPINS_VGPRyy_GPRvd_IMMd = 799,
    XED_IFORM_LWPINS_VGPRyy_MEMd_IMMd = 800,
    XED_IFORM_LWPVAL_VGPRyy_GPRvd_IMMd = 801,
    XED_IFORM_LWPVAL_VGPRyy_MEMd_IMMd = 802,
    XED_IFORM_LZCNT_GPRv_GPRv = 803,
    XED_IFORM_LZCNT_GPRv_MEMv = 804,
    XED_IFORM_MASKMOVDQU_XMMdq_XMMdq = 805,
    XED_IFORM_MASKMOVQ_MMXq_MMXq = 806,
    XED_IFORM_MAXPD_XMMpd_MEMpd = 807,
    XED_IFORM_MAXPD_XMMpd_XMMpd = 808,
    XED_IFORM_MAXPS_XMMps_MEMps = 809,
    XED_IFORM_MAXPS_XMMps_XMMps = 810,
    XED_IFORM_MAXSD_XMMsd_MEMsd = 811,
    XED_IFORM_MAXSD_XMMsd_XMMsd = 812,
    XED_IFORM_MAXSS_XMMss_MEMss = 813,
    XED_IFORM_MAXSS_XMMss_XMMss = 814,
    XED_IFORM_MFENCE = 815,
    XED_IFORM_MINPD_XMMpd_MEMpd = 816,
    XED_IFORM_MINPD_XMMpd_XMMpd = 817,
    XED_IFORM_MINPS_XMMps_MEMps = 818,
    XED_IFORM_MINPS_XMMps_XMMps = 819,
    XED_IFORM_MINSD_XMMsd_MEMsd = 820,
    XED_IFORM_MINSD_XMMsd_XMMsd = 821,
    XED_IFORM_MINSS_XMMss_MEMss = 822,
    XED_IFORM_MINSS_XMMss_XMMss = 823,
    XED_IFORM_MONITOR = 824,
    XED_IFORM_MOV_AL_MEMb = 825,
    XED_IFORM_MOV_GPR8_GPR8_88 = 826,
    XED_IFORM_MOV_GPR8_GPR8_8A = 827,
    XED_IFORM_MOV_GPR8_IMMb_C6r0 = 828,
    XED_IFORM_MOV_GPR8_IMMb_D0 = 829,
    XED_IFORM_MOV_GPR8_MEMb = 830,
    XED_IFORM_MOV_GPRv_GPRv_89 = 831,
    XED_IFORM_MOV_GPRv_GPRv_8B = 832,
    XED_IFORM_MOV_GPRv_IMMv = 833,
    XED_IFORM_MOV_GPRv_IMMz = 834,
    XED_IFORM_MOV_GPRv_MEMv = 835,
    XED_IFORM_MOV_GPRv_SEG = 836,
    XED_IFORM_MOV_MEMb_AL = 837,
    XED_IFORM_MOV_MEMb_GPR8 = 838,
    XED_IFORM_MOV_MEMb_IMMb = 839,
    XED_IFORM_MOV_MEMv_GPRv = 840,
    XED_IFORM_MOV_MEMv_IMMz = 841,
    XED_IFORM_MOV_MEMv_OrAX = 842,
    XED_IFORM_MOV_MEMw_SEG = 843,
    XED_IFORM_MOV_OrAX_MEMv = 844,
    XED_IFORM_MOV_SEG_GPR16 = 845,
    XED_IFORM_MOV_SEG_MEMw = 846,
    XED_IFORM_MOVAPD_MEMpd_XMMpd = 847,
    XED_IFORM_MOVAPD_XMMpd_MEMpd = 848,
    XED_IFORM_MOVAPD_XMMpd_XMMpd_0F28 = 849,
    XED_IFORM_MOVAPD_XMMpd_XMMpd_0F29 = 850,
    XED_IFORM_MOVAPS_MEMps_XMMps = 851,
    XED_IFORM_MOVAPS_XMMps_MEMps = 852,
    XED_IFORM_MOVAPS_XMMps_XMMps_0F28 = 853,
    XED_IFORM_MOVAPS_XMMps_XMMps_0F29 = 854,
    XED_IFORM_MOVBE_GPRv_MEMv = 855,
    XED_IFORM_MOVBE_MEMv_GPRv = 856,
    XED_IFORM_MOVD_GPR32_MMXd = 857,
    XED_IFORM_MOVD_GPR32_XMMd = 858,
    XED_IFORM_MOVD_MEMd_MMXd = 859,
    XED_IFORM_MOVD_MEMd_XMMd = 860,
    XED_IFORM_MOVD_MMXq_GPR32 = 861,
    XED_IFORM_MOVD_MMXq_MEMd = 862,
    XED_IFORM_MOVD_XMMdq_GPR32 = 863,
    XED_IFORM_MOVD_XMMdq_MEMd = 864,
    XED_IFORM_MOVDDUP_XMMdq_MEMq = 865,
    XED_IFORM_MOVDDUP_XMMdq_XMMq = 866,
    XED_IFORM_MOVDQ2Q_MMXq_XMMq = 867,
    XED_IFORM_MOVDQA_MEMdq_XMMdq = 868,
    XED_IFORM_MOVDQA_XMMdq_MEMdq = 869,
    XED_IFORM_MOVDQA_XMMdq_XMMdq_0F6F = 870,
    XED_IFORM_MOVDQA_XMMdq_XMMdq_0F7F = 871,
    XED_IFORM_MOVDQU_MEMdq_XMMdq = 872,
    XED_IFORM_MOVDQU_XMMdq_MEMdq = 873,
    XED_IFORM_MOVDQU_XMMdq_XMMdq_0F6F = 874,
    XED_IFORM_MOVDQU_XMMdq_XMMdq_0F7F = 875,
    XED_IFORM_MOVHLPS_XMMq_XMMq = 876,
    XED_IFORM_MOVHPD_MEMq_XMMsd = 877,
    XED_IFORM_MOVHPD_XMMsd_MEMq = 878,
    XED_IFORM_MOVHPS_MEMq_XMMps = 879,
    XED_IFORM_MOVHPS_XMMq_MEMq = 880,
    XED_IFORM_MOVLHPS_XMMq_XMMq = 881,
    XED_IFORM_MOVLPD_MEMq_XMMsd = 882,
    XED_IFORM_MOVLPD_XMMsd_MEMq = 883,
    XED_IFORM_MOVLPS_MEMq_XMMps = 884,
    XED_IFORM_MOVLPS_XMMq_MEMq = 885,
    XED_IFORM_MOVMSKPD_GPR32_XMMpd = 886,
    XED_IFORM_MOVMSKPS_GPR32_XMMps = 887,
    XED_IFORM_MOVNTDQ_MEMdq_XMMdq = 888,
    XED_IFORM_MOVNTDQA_XMMdq_MEMdq = 889,
    XED_IFORM_MOVNTI_MEMd_GPR32 = 890,
    XED_IFORM_MOVNTI_MEMq_GPR64 = 891,
    XED_IFORM_MOVNTPD_MEMdq_XMMpd = 892,
    XED_IFORM_MOVNTPS_MEMdq_XMMps = 893,
    XED_IFORM_MOVNTQ_MEMq_MMXq = 894,
    XED_IFORM_MOVNTSD_MEMq_XMMq = 895,
    XED_IFORM_MOVNTSS_MEMd_XMMd = 896,
    XED_IFORM_MOVQ_GPR64_MMXq = 897,
    XED_IFORM_MOVQ_GPR64_XMMq = 898,
    XED_IFORM_MOVQ_MEMq_MMXq_0F7E = 899,
    XED_IFORM_MOVQ_MEMq_MMXq_0F7F = 900,
    XED_IFORM_MOVQ_MEMq_XMMq_0F7E = 901,
    XED_IFORM_MOVQ_MEMq_XMMq_0FD6 = 902,
    XED_IFORM_MOVQ_MMXq_GPR64 = 903,
    XED_IFORM_MOVQ_MMXq_MEMq_0F6E = 904,
    XED_IFORM_MOVQ_MMXq_MEMq_0F6F = 905,
    XED_IFORM_MOVQ_MMXq_MMXq_0F6F = 906,
    XED_IFORM_MOVQ_MMXq_MMXq_0F7F = 907,
    XED_IFORM_MOVQ_XMMdq_GPR64 = 908,
    XED_IFORM_MOVQ_XMMdq_MEMq_0F6E = 909,
    XED_IFORM_MOVQ_XMMdq_MEMq_0F7E = 910,
    XED_IFORM_MOVQ_XMMdq_XMMq_0F7E = 911,
    XED_IFORM_MOVQ_XMMdq_XMMq_0FD6 = 912,
    XED_IFORM_MOVQ2DQ_XMMdq_MMXq = 913,
    XED_IFORM_MOVSB = 914,
    XED_IFORM_MOVSD = 915,
    XED_IFORM_MOVSD_XMM_MEMsd_XMMsd = 916,
    XED_IFORM_MOVSD_XMM_XMMdq_MEMsd = 917,
    XED_IFORM_MOVSD_XMM_XMMsd_XMMsd_0F10 = 918,
    XED_IFORM_MOVSD_XMM_XMMsd_XMMsd_0F11 = 919,
    XED_IFORM_MOVSHDUP_XMMps_MEMps = 920,
    XED_IFORM_MOVSHDUP_XMMps_XMMps = 921,
    XED_IFORM_MOVSLDUP_XMMps_MEMps = 922,
    XED_IFORM_MOVSLDUP_XMMps_XMMps = 923,
    XED_IFORM_MOVSQ = 924,
    XED_IFORM_MOVSS_MEMss_XMMss = 925,
    XED_IFORM_MOVSS_XMMdq_MEMss = 926,
    XED_IFORM_MOVSS_XMMss_XMMss_0F10 = 927,
    XED_IFORM_MOVSS_XMMss_XMMss_0F11 = 928,
    XED_IFORM_MOVSW = 929,
    XED_IFORM_MOVSX_GPRv_GPR16 = 930,
    XED_IFORM_MOVSX_GPRv_GPR8 = 931,
    XED_IFORM_MOVSX_GPRv_MEMb = 932,
    XED_IFORM_MOVSX_GPRv_MEMw = 933,
    XED_IFORM_MOVSXD_GPRv_GPR32 = 934,
    XED_IFORM_MOVSXD_GPRv_MEMd = 935,
    XED_IFORM_MOVUPD_MEMpd_XMMpd = 936,
    XED_IFORM_MOVUPD_XMMpd_MEMpd = 937,
    XED_IFORM_MOVUPD_XMMpd_XMMpd_0F10 = 938,
    XED_IFORM_MOVUPD_XMMpd_XMMpd_0F11 = 939,
    XED_IFORM_MOVUPS_MEMps_XMMps = 940,
    XED_IFORM_MOVUPS_XMMps_MEMps = 941,
    XED_IFORM_MOVUPS_XMMps_XMMps_0F10 = 942,
    XED_IFORM_MOVUPS_XMMps_XMMps_0F11 = 943,
    XED_IFORM_MOVZX_GPRv_GPR16 = 944,
    XED_IFORM_MOVZX_GPRv_GPR8 = 945,
    XED_IFORM_MOVZX_GPRv_MEMb = 946,
    XED_IFORM_MOVZX_GPRv_MEMw = 947,
    XED_IFORM_MOV_CR_CR_GPR32 = 948,
    XED_IFORM_MOV_CR_CR_GPR64 = 949,
    XED_IFORM_MOV_CR_GPR32_CR = 950,
    XED_IFORM_MOV_CR_GPR64_CR = 951,
    XED_IFORM_MOV_DR_DR_GPR32 = 952,
    XED_IFORM_MOV_DR_DR_GPR64 = 953,
    XED_IFORM_MOV_DR_GPR32_DR = 954,
    XED_IFORM_MOV_DR_GPR64_DR = 955,
    XED_IFORM_MPSADBW_XMMdq_MEMdq_IMMb = 956,
    XED_IFORM_MPSADBW_XMMdq_XMMdq_IMMb = 957,
    XED_IFORM_MUL_GPR8 = 958,
    XED_IFORM_MUL_GPRv = 959,
    XED_IFORM_MUL_MEMb = 960,
    XED_IFORM_MUL_MEMv = 961,
    XED_IFORM_MULPD_XMMpd_MEMpd = 962,
    XED_IFORM_MULPD_XMMpd_XMMpd = 963,
    XED_IFORM_MULPS_XMMps_MEMps = 964,
    XED_IFORM_MULPS_XMMps_XMMps = 965,
    XED_IFORM_MULSD_XMMsd_MEMsd = 966,
    XED_IFORM_MULSD_XMMsd_XMMsd = 967,
    XED_IFORM_MULSS_XMMss_MEMss = 968,
    XED_IFORM_MULSS_XMMss_XMMss = 969,
    XED_IFORM_MULX_VGPR32d_VGPR32d_MEMd = 970,
    XED_IFORM_MULX_VGPR32d_VGPR32d_VGPR32d = 971,
    XED_IFORM_MULX_VGPR64q_VGPR64q_MEMq = 972,
    XED_IFORM_MULX_VGPR64q_VGPR64q_VGPR64q = 973,
    XED_IFORM_MWAIT = 974,
    XED_IFORM_NEG_GPR8 = 975,
    XED_IFORM_NEG_GPRv = 976,
    XED_IFORM_NEG_MEMb = 977,
    XED_IFORM_NEG_MEMv = 978,
    XED_IFORM_NEG_LOCK_MEMb = 979,
    XED_IFORM_NEG_LOCK_MEMv = 980,
    XED_IFORM_NOP_90 = 981,
    XED_IFORM_NOP_GPRv_0F18r0 = 982,
    XED_IFORM_NOP_GPRv_0F18r1 = 983,
    XED_IFORM_NOP_GPRv_0F18r2 = 984,
    XED_IFORM_NOP_GPRv_0F18r3 = 985,
    XED_IFORM_NOP_GPRv_0F18r4 = 986,
    XED_IFORM_NOP_GPRv_0F18r5 = 987,
    XED_IFORM_NOP_GPRv_0F18r6 = 988,
    XED_IFORM_NOP_GPRv_0F18r7 = 989,
    XED_IFORM_NOP_GPRv_GPRv_0F0D = 990,
    XED_IFORM_NOP_GPRv_GPRv_0F19 = 991,
    XED_IFORM_NOP_GPRv_GPRv_0F1A = 992,
    XED_IFORM_NOP_GPRv_GPRv_0F1B = 993,
    XED_IFORM_NOP_GPRv_GPRv_0F1C = 994,
    XED_IFORM_NOP_GPRv_GPRv_0F1D = 995,
    XED_IFORM_NOP_GPRv_GPRv_0F1E = 996,
    XED_IFORM_NOP_GPRv_GPRv_0F1F = 997,
    XED_IFORM_NOP_GPRv_MEM_0F1B = 998,
    XED_IFORM_NOP_GPRv_MEMv_0F1A = 999,
    XED_IFORM_NOP_MEMv_0F18r4 = 1000,
    XED_IFORM_NOP_MEMv_0F18r5 = 1001,
    XED_IFORM_NOP_MEMv_0F18r6 = 1002,
    XED_IFORM_NOP_MEMv_0F18r7 = 1003,
    XED_IFORM_NOP_MEMv_GPRv_0F19 = 1004,
    XED_IFORM_NOP_MEMv_GPRv_0F1C = 1005,
    XED_IFORM_NOP_MEMv_GPRv_0F1D = 1006,
    XED_IFORM_NOP_MEMv_GPRv_0F1E = 1007,
    XED_IFORM_NOP_MEMv_GPRv_0F1F = 1008,
    XED_IFORM_NOT_GPR8 = 1009,
    XED_IFORM_NOT_GPRv = 1010,
    XED_IFORM_NOT_MEMb = 1011,
    XED_IFORM_NOT_MEMv = 1012,
    XED_IFORM_NOT_LOCK_MEMb = 1013,
    XED_IFORM_NOT_LOCK_MEMv = 1014,
    XED_IFORM_OR_AL_IMMb = 1015,
    XED_IFORM_OR_GPR8_GPR8_08 = 1016,
    XED_IFORM_OR_GPR8_GPR8_0A = 1017,
    XED_IFORM_OR_GPR8_IMMb_80r1 = 1018,
    XED_IFORM_OR_GPR8_IMMb_82r1 = 1019,
    XED_IFORM_OR_GPR8_MEMb = 1020,
    XED_IFORM_OR_GPRv_GPRv_09 = 1021,
    XED_IFORM_OR_GPRv_GPRv_0B = 1022,
    XED_IFORM_OR_GPRv_IMMb = 1023,
    XED_IFORM_OR_GPRv_IMMz = 1024,
    XED_IFORM_OR_GPRv_MEMv = 1025,
    XED_IFORM_OR_MEMb_GPR8 = 1026,
    XED_IFORM_OR_MEMb_IMMb_80r1 = 1027,
    XED_IFORM_OR_MEMb_IMMb_82r1 = 1028,
    XED_IFORM_OR_MEMv_GPRv = 1029,
    XED_IFORM_OR_MEMv_IMMb = 1030,
    XED_IFORM_OR_MEMv_IMMz = 1031,
    XED_IFORM_OR_OrAX_IMMz = 1032,
    XED_IFORM_ORPD_XMMpd_MEMpd = 1033,
    XED_IFORM_ORPD_XMMpd_XMMpd = 1034,
    XED_IFORM_ORPS_XMMps_MEMps = 1035,
    XED_IFORM_ORPS_XMMps_XMMps = 1036,
    XED_IFORM_OR_LOCK_MEMb_GPR8 = 1037,
    XED_IFORM_OR_LOCK_MEMb_IMMb_80r1 = 1038,
    XED_IFORM_OR_LOCK_MEMb_IMMb_82r1 = 1039,
    XED_IFORM_OR_LOCK_MEMv_GPRv = 1040,
    XED_IFORM_OR_LOCK_MEMv_IMMb = 1041,
    XED_IFORM_OR_LOCK_MEMv_IMMz = 1042,
    XED_IFORM_OUT_DX_AL = 1043,
    XED_IFORM_OUT_DX_OeAX = 1044,
    XED_IFORM_OUT_IMMb_AL = 1045,
    XED_IFORM_OUT_IMMb_OeAX = 1046,
    XED_IFORM_OUTSB = 1047,
    XED_IFORM_OUTSD = 1048,
    XED_IFORM_OUTSW = 1049,
    XED_IFORM_PABSB_MMXq_MEMq = 1050,
    XED_IFORM_PABSB_MMXq_MMXq = 1051,
    XED_IFORM_PABSB_XMMdq_MEMdq = 1052,
    XED_IFORM_PABSB_XMMdq_XMMdq = 1053,
    XED_IFORM_PABSD_MMXq_MEMq = 1054,
    XED_IFORM_PABSD_MMXq_MMXq = 1055,
    XED_IFORM_PABSD_XMMdq_MEMdq = 1056,
    XED_IFORM_PABSD_XMMdq_XMMdq = 1057,
    XED_IFORM_PABSW_MMXq_MEMq = 1058,
    XED_IFORM_PABSW_MMXq_MMXq = 1059,
    XED_IFORM_PABSW_XMMdq_MEMdq = 1060,
    XED_IFORM_PABSW_XMMdq_XMMdq = 1061,
    XED_IFORM_PACKSSDW_MMXq_MEMq = 1062,
    XED_IFORM_PACKSSDW_MMXq_MMXq = 1063,
    XED_IFORM_PACKSSDW_XMMdq_MEMdq = 1064,
    XED_IFORM_PACKSSDW_XMMdq_XMMdq = 1065,
    XED_IFORM_PACKSSWB_MMXq_MEMq = 1066,
    XED_IFORM_PACKSSWB_MMXq_MMXq = 1067,
    XED_IFORM_PACKSSWB_XMMdq_MEMdq = 1068,
    XED_IFORM_PACKSSWB_XMMdq_XMMdq = 1069,
    XED_IFORM_PACKUSDW_XMMdq_MEMdq = 1070,
    XED_IFORM_PACKUSDW_XMMdq_XMMdq = 1071,
    XED_IFORM_PACKUSWB_MMXq_MEMq = 1072,
    XED_IFORM_PACKUSWB_MMXq_MMXq = 1073,
    XED_IFORM_PACKUSWB_XMMdq_MEMdq = 1074,
    XED_IFORM_PACKUSWB_XMMdq_XMMdq = 1075,
    XED_IFORM_PADDB_MMXq_MEMq = 1076,
    XED_IFORM_PADDB_MMXq_MMXq = 1077,
    XED_IFORM_PADDB_XMMdq_MEMdq = 1078,
    XED_IFORM_PADDB_XMMdq_XMMdq = 1079,
    XED_IFORM_PADDD_MMXq_MEMq = 1080,
    XED_IFORM_PADDD_MMXq_MMXq = 1081,
    XED_IFORM_PADDD_XMMdq_MEMdq = 1082,
    XED_IFORM_PADDD_XMMdq_XMMdq = 1083,
    XED_IFORM_PADDQ_MMXq_MEMq = 1084,
    XED_IFORM_PADDQ_MMXq_MMXq = 1085,
    XED_IFORM_PADDQ_XMMdq_MEMdq = 1086,
    XED_IFORM_PADDQ_XMMdq_XMMdq = 1087,
    XED_IFORM_PADDSB_MMXq_MEMq = 1088,
    XED_IFORM_PADDSB_MMXq_MMXq = 1089,
    XED_IFORM_PADDSB_XMMdq_MEMdq = 1090,
    XED_IFORM_PADDSB_XMMdq_XMMdq = 1091,
    XED_IFORM_PADDSW_MMXq_MEMq = 1092,
    XED_IFORM_PADDSW_MMXq_MMXq = 1093,
    XED_IFORM_PADDSW_XMMdq_MEMdq = 1094,
    XED_IFORM_PADDSW_XMMdq_XMMdq = 1095,
    XED_IFORM_PADDUSB_MMXq_MEMq = 1096,
    XED_IFORM_PADDUSB_MMXq_MMXq = 1097,
    XED_IFORM_PADDUSB_XMMdq_MEMdq = 1098,
    XED_IFORM_PADDUSB_XMMdq_XMMdq = 1099,
    XED_IFORM_PADDUSW_MMXq_MEMq = 1100,
    XED_IFORM_PADDUSW_MMXq_MMXq = 1101,
    XED_IFORM_PADDUSW_XMMdq_MEMdq = 1102,
    XED_IFORM_PADDUSW_XMMdq_XMMdq = 1103,
    XED_IFORM_PADDW_MMXq_MEMq = 1104,
    XED_IFORM_PADDW_MMXq_MMXq = 1105,
    XED_IFORM_PADDW_XMMdq_MEMdq = 1106,
    XED_IFORM_PADDW_XMMdq_XMMdq = 1107,
    XED_IFORM_PALIGNR_MMXq_MEMq_IMMb = 1108,
    XED_IFORM_PALIGNR_MMXq_MMXq_IMMb = 1109,
    XED_IFORM_PALIGNR_XMMdq_MEMdq_IMMb = 1110,
    XED_IFORM_PALIGNR_XMMdq_XMMdq_IMMb = 1111,
    XED_IFORM_PAND_MMXq_MEMq = 1112,
    XED_IFORM_PAND_MMXq_MMXq = 1113,
    XED_IFORM_PAND_XMMdq_MEMdq = 1114,
    XED_IFORM_PAND_XMMdq_XMMdq = 1115,
    XED_IFORM_PANDN_MMXq_MEMq = 1116,
    XED_IFORM_PANDN_MMXq_MMXq = 1117,
    XED_IFORM_PANDN_XMMdq_MEMdq = 1118,
    XED_IFORM_PANDN_XMMdq_XMMdq = 1119,
    XED_IFORM_PAUSE = 1120,
    XED_IFORM_PAVGB_MMXq_MEMq = 1121,
    XED_IFORM_PAVGB_MMXq_MMXq = 1122,
    XED_IFORM_PAVGB_XMMdq_MEMdq = 1123,
    XED_IFORM_PAVGB_XMMdq_XMMdq = 1124,
    XED_IFORM_PAVGUSB_MMXq_MEMq = 1125,
    XED_IFORM_PAVGUSB_MMXq_MMXq = 1126,
    XED_IFORM_PAVGW_MMXq_MEMq = 1127,
    XED_IFORM_PAVGW_MMXq_MMXq = 1128,
    XED_IFORM_PAVGW_XMMdq_MEMdq = 1129,
    XED_IFORM_PAVGW_XMMdq_XMMdq = 1130,
    XED_IFORM_PBLENDVB_XMMdq_MEMdq = 1131,
    XED_IFORM_PBLENDVB_XMMdq_XMMdq = 1132,
    XED_IFORM_PBLENDW_XMMdq_MEMdq_IMMb = 1133,
    XED_IFORM_PBLENDW_XMMdq_XMMdq_IMMb = 1134,
    XED_IFORM_PCLMULQDQ_XMMdq_MEMdq_IMMb = 1135,
    XED_IFORM_PCLMULQDQ_XMMdq_XMMdq_IMMb = 1136,
    XED_IFORM_PCMPEQB_MMXq_MEMq = 1137,
    XED_IFORM_PCMPEQB_MMXq_MMXq = 1138,
    XED_IFORM_PCMPEQB_XMMdq_MEMdq = 1139,
    XED_IFORM_PCMPEQB_XMMdq_XMMdq = 1140,
    XED_IFORM_PCMPEQD_MMXq_MEMq = 1141,
    XED_IFORM_PCMPEQD_MMXq_MMXq = 1142,
    XED_IFORM_PCMPEQD_XMMdq_MEMdq = 1143,
    XED_IFORM_PCMPEQD_XMMdq_XMMdq = 1144,
    XED_IFORM_PCMPEQQ_XMMdq_MEMdq = 1145,
    XED_IFORM_PCMPEQQ_XMMdq_XMMdq = 1146,
    XED_IFORM_PCMPEQW_MMXq_MEMq = 1147,
    XED_IFORM_PCMPEQW_MMXq_MMXq = 1148,
    XED_IFORM_PCMPEQW_XMMdq_MEMdq = 1149,
    XED_IFORM_PCMPEQW_XMMdq_XMMdq = 1150,
    XED_IFORM_PCMPESTRI_XMMdq_MEMdq_IMMb = 1151,
    XED_IFORM_PCMPESTRI_XMMdq_XMMdq_IMMb = 1152,
    XED_IFORM_PCMPESTRM_XMMdq_MEMdq_IMMb = 1153,
    XED_IFORM_PCMPESTRM_XMMdq_XMMdq_IMMb = 1154,
    XED_IFORM_PCMPGTB_MMXq_MEMq = 1155,
    XED_IFORM_PCMPGTB_MMXq_MMXq = 1156,
    XED_IFORM_PCMPGTB_XMMdq_MEMdq = 1157,
    XED_IFORM_PCMPGTB_XMMdq_XMMdq = 1158,
    XED_IFORM_PCMPGTD_MMXq_MEMq = 1159,
    XED_IFORM_PCMPGTD_MMXq_MMXq = 1160,
    XED_IFORM_PCMPGTD_XMMdq_MEMdq = 1161,
    XED_IFORM_PCMPGTD_XMMdq_XMMdq = 1162,
    XED_IFORM_PCMPGTQ_XMMdq_MEMdq = 1163,
    XED_IFORM_PCMPGTQ_XMMdq_XMMdq = 1164,
    XED_IFORM_PCMPGTW_MMXq_MEMq = 1165,
    XED_IFORM_PCMPGTW_MMXq_MMXq = 1166,
    XED_IFORM_PCMPGTW_XMMdq_MEMdq = 1167,
    XED_IFORM_PCMPGTW_XMMdq_XMMdq = 1168,
    XED_IFORM_PCMPISTRI_XMMdq_MEMdq_IMMb = 1169,
    XED_IFORM_PCMPISTRI_XMMdq_XMMdq_IMMb = 1170,
    XED_IFORM_PCMPISTRM_XMMdq_MEMdq_IMMb = 1171,
    XED_IFORM_PCMPISTRM_XMMdq_XMMdq_IMMb = 1172,
    XED_IFORM_PDEP_VGPR32d_VGPR32d_MEMd = 1173,
    XED_IFORM_PDEP_VGPR32d_VGPR32d_VGPR32d = 1174,
    XED_IFORM_PDEP_VGPR64q_VGPR64q_MEMq = 1175,
    XED_IFORM_PDEP_VGPR64q_VGPR64q_VGPR64q = 1176,
    XED_IFORM_PEXT_VGPR32d_VGPR32d_MEMd = 1177,
    XED_IFORM_PEXT_VGPR32d_VGPR32d_VGPR32d = 1178,
    XED_IFORM_PEXT_VGPR64q_VGPR64q_MEMq = 1179,
    XED_IFORM_PEXT_VGPR64q_VGPR64q_VGPR64q = 1180,
    XED_IFORM_PEXTRB_GPR32d_XMMdq_IMMb = 1181,
    XED_IFORM_PEXTRB_MEMb_XMMdq_IMMb = 1182,
    XED_IFORM_PEXTRD_GPR32d_XMMdq_IMMb = 1183,
    XED_IFORM_PEXTRD_MEMd_XMMdq_IMMb = 1184,
    XED_IFORM_PEXTRQ_GPR64q_XMMdq_IMMb = 1185,
    XED_IFORM_PEXTRQ_MEMq_XMMdq_IMMb = 1186,
    XED_IFORM_PEXTRW_GPR32_MMXq_IMMb = 1187,
    XED_IFORM_PEXTRW_GPR32_XMMdq_IMMb = 1188,
    XED_IFORM_PEXTRW_SSE4_GPR32_XMMdq_IMMb = 1189,
    XED_IFORM_PEXTRW_SSE4_MEMw_XMMdq_IMMb = 1190,
    XED_IFORM_PF2ID_MMXq_MEMq = 1191,
    XED_IFORM_PF2ID_MMXq_MMXq = 1192,
    XED_IFORM_PF2IW_MMXq_MEMq = 1193,
    XED_IFORM_PF2IW_MMXq_MMXq = 1194,
    XED_IFORM_PFACC_MMXq_MEMq = 1195,
    XED_IFORM_PFACC_MMXq_MMXq = 1196,
    XED_IFORM_PFADD_MMXq_MEMq = 1197,
    XED_IFORM_PFADD_MMXq_MMXq = 1198,
    XED_IFORM_PFCMPEQ_MMXq_MEMq = 1199,
    XED_IFORM_PFCMPEQ_MMXq_MMXq = 1200,
    XED_IFORM_PFCMPGE_MMXq_MEMq = 1201,
    XED_IFORM_PFCMPGE_MMXq_MMXq = 1202,
    XED_IFORM_PFCMPGT_MMXq_MEMq = 1203,
    XED_IFORM_PFCMPGT_MMXq_MMXq = 1204,
    XED_IFORM_PFCPIT1_MMXq_MEMq = 1205,
    XED_IFORM_PFCPIT1_MMXq_MMXq = 1206,
    XED_IFORM_PFMAX_MMXq_MEMq = 1207,
    XED_IFORM_PFMAX_MMXq_MMXq = 1208,
    XED_IFORM_PFMIN_MMXq_MEMq = 1209,
    XED_IFORM_PFMIN_MMXq_MMXq = 1210,
    XED_IFORM_PFMUL_MMXq_MEMq = 1211,
    XED_IFORM_PFMUL_MMXq_MMXq = 1212,
    XED_IFORM_PFNACC_MMXq_MEMq = 1213,
    XED_IFORM_PFNACC_MMXq_MMXq = 1214,
    XED_IFORM_PFPNACC_MMXq_MEMq = 1215,
    XED_IFORM_PFPNACC_MMXq_MMXq = 1216,
    XED_IFORM_PFRCP_MMXq_MEMq = 1217,
    XED_IFORM_PFRCP_MMXq_MMXq = 1218,
    XED_IFORM_PFRCPIT2_MMXq_MEMq = 1219,
    XED_IFORM_PFRCPIT2_MMXq_MMXq = 1220,
    XED_IFORM_PFRSQIT1_MMXq_MEMq = 1221,
    XED_IFORM_PFRSQIT1_MMXq_MMXq = 1222,
    XED_IFORM_PFSQRT_MMXq_MEMq = 1223,
    XED_IFORM_PFSQRT_MMXq_MMXq = 1224,
    XED_IFORM_PFSUB_MMXq_MEMq = 1225,
    XED_IFORM_PFSUB_MMXq_MMXq = 1226,
    XED_IFORM_PFSUBR_MMXq_MEMq = 1227,
    XED_IFORM_PFSUBR_MMXq_MMXq = 1228,
    XED_IFORM_PHADDD_MMXq_MEMq = 1229,
    XED_IFORM_PHADDD_MMXq_MMXq = 1230,
    XED_IFORM_PHADDD_XMMdq_MEMdq = 1231,
    XED_IFORM_PHADDD_XMMdq_XMMdq = 1232,
    XED_IFORM_PHADDSW_MMXq_MEMq = 1233,
    XED_IFORM_PHADDSW_MMXq_MMXq = 1234,
    XED_IFORM_PHADDSW_XMMdq_MEMdq = 1235,
    XED_IFORM_PHADDSW_XMMdq_XMMdq = 1236,
    XED_IFORM_PHADDW_MMXq_MEMq = 1237,
    XED_IFORM_PHADDW_MMXq_MMXq = 1238,
    XED_IFORM_PHADDW_XMMdq_MEMdq = 1239,
    XED_IFORM_PHADDW_XMMdq_XMMdq = 1240,
    XED_IFORM_PHMINPOSUW_XMMdq_MEMdq = 1241,
    XED_IFORM_PHMINPOSUW_XMMdq_XMMdq = 1242,
    XED_IFORM_PHSUBD_MMXq_MEMq = 1243,
    XED_IFORM_PHSUBD_MMXq_MMXq = 1244,
    XED_IFORM_PHSUBD_XMMdq_MEMdq = 1245,
    XED_IFORM_PHSUBD_XMMdq_XMMdq = 1246,
    XED_IFORM_PHSUBSW_MMXq_MEMq = 1247,
    XED_IFORM_PHSUBSW_MMXq_MMXq = 1248,
    XED_IFORM_PHSUBSW_XMMdq_MEMdq = 1249,
    XED_IFORM_PHSUBSW_XMMdq_XMMdq = 1250,
    XED_IFORM_PHSUBW_MMXq_MEMq = 1251,
    XED_IFORM_PHSUBW_MMXq_MMXq = 1252,
    XED_IFORM_PHSUBW_XMMdq_MEMdq = 1253,
    XED_IFORM_PHSUBW_XMMdq_XMMdq = 1254,
    XED_IFORM_PI2FD_MMXq_MEMq = 1255,
    XED_IFORM_PI2FD_MMXq_MMXq = 1256,
    XED_IFORM_PI2FW_MMXq_MEMq = 1257,
    XED_IFORM_PI2FW_MMXq_MMXq = 1258,
    XED_IFORM_PINSRB_XMMdq_GPR32d_IMMb = 1259,
    XED_IFORM_PINSRB_XMMdq_MEMb_IMMb = 1260,
    XED_IFORM_PINSRD_XMMdq_GPR32d_IMMb = 1261,
    XED_IFORM_PINSRD_XMMdq_MEMd_IMMb = 1262,
    XED_IFORM_PINSRQ_XMMdq_GPR64q_IMMb = 1263,
    XED_IFORM_PINSRQ_XMMdq_MEMq_IMMb = 1264,
    XED_IFORM_PINSRW_MMXq_GPR32_IMMb = 1265,
    XED_IFORM_PINSRW_MMXq_MEMw_IMMb = 1266,
    XED_IFORM_PINSRW_XMMdq_GPR32_IMMb = 1267,
    XED_IFORM_PINSRW_XMMdq_MEMw_IMMb = 1268,
    XED_IFORM_PMADDUBSW_MMXq_MEMq = 1269,
    XED_IFORM_PMADDUBSW_MMXq_MMXq = 1270,
    XED_IFORM_PMADDUBSW_XMMdq_MEMdq = 1271,
    XED_IFORM_PMADDUBSW_XMMdq_XMMdq = 1272,
    XED_IFORM_PMADDWD_MMXq_MEMq = 1273,
    XED_IFORM_PMADDWD_MMXq_MMXq = 1274,
    XED_IFORM_PMADDWD_XMMdq_MEMdq = 1275,
    XED_IFORM_PMADDWD_XMMdq_XMMdq = 1276,
    XED_IFORM_PMAXSB_XMMdq_MEMdq = 1277,
    XED_IFORM_PMAXSB_XMMdq_XMMdq = 1278,
    XED_IFORM_PMAXSD_XMMdq_MEMdq = 1279,
    XED_IFORM_PMAXSD_XMMdq_XMMdq = 1280,
    XED_IFORM_PMAXSW_MMXq_MEMq = 1281,
    XED_IFORM_PMAXSW_MMXq_MMXq = 1282,
    XED_IFORM_PMAXSW_XMMdq_MEMdq = 1283,
    XED_IFORM_PMAXSW_XMMdq_XMMdq = 1284,
    XED_IFORM_PMAXUB_MMXq_MEMq = 1285,
    XED_IFORM_PMAXUB_MMXq_MMXq = 1286,
    XED_IFORM_PMAXUB_XMMdq_MEMdq = 1287,
    XED_IFORM_PMAXUB_XMMdq_XMMdq = 1288,
    XED_IFORM_PMAXUD_XMMdq_MEMdq = 1289,
    XED_IFORM_PMAXUD_XMMdq_XMMdq = 1290,
    XED_IFORM_PMAXUW_XMMdq_MEMdq = 1291,
    XED_IFORM_PMAXUW_XMMdq_XMMdq = 1292,
    XED_IFORM_PMINSB_XMMdq_MEMdq = 1293,
    XED_IFORM_PMINSB_XMMdq_XMMdq = 1294,
    XED_IFORM_PMINSD_XMMdq_MEMdq = 1295,
    XED_IFORM_PMINSD_XMMdq_XMMdq = 1296,
    XED_IFORM_PMINSW_MMXq_MEMq = 1297,
    XED_IFORM_PMINSW_MMXq_MMXq = 1298,
    XED_IFORM_PMINSW_XMMdq_MEMdq = 1299,
    XED_IFORM_PMINSW_XMMdq_XMMdq = 1300,
    XED_IFORM_PMINUB_MMXq_MEMq = 1301,
    XED_IFORM_PMINUB_MMXq_MMXq = 1302,
    XED_IFORM_PMINUB_XMMdq_MEMdq = 1303,
    XED_IFORM_PMINUB_XMMdq_XMMdq = 1304,
    XED_IFORM_PMINUD_XMMdq_MEMdq = 1305,
    XED_IFORM_PMINUD_XMMdq_XMMdq = 1306,
    XED_IFORM_PMINUW_XMMdq_MEMdq = 1307,
    XED_IFORM_PMINUW_XMMdq_XMMdq = 1308,
    XED_IFORM_PMOVMSKB_GPR32_MMXq = 1309,
    XED_IFORM_PMOVMSKB_GPR32_XMMdq = 1310,
    XED_IFORM_PMOVSXBD_XMMdq_MEMd = 1311,
    XED_IFORM_PMOVSXBD_XMMdq_XMMd = 1312,
    XED_IFORM_PMOVSXBQ_XMMdq_MEMw = 1313,
    XED_IFORM_PMOVSXBQ_XMMdq_XMMw = 1314,
    XED_IFORM_PMOVSXBW_XMMdq_MEMq = 1315,
    XED_IFORM_PMOVSXBW_XMMdq_XMMq = 1316,
    XED_IFORM_PMOVSXDQ_XMMdq_MEMq = 1317,
    XED_IFORM_PMOVSXDQ_XMMdq_XMMq = 1318,
    XED_IFORM_PMOVSXWD_XMMdq_MEMq = 1319,
    XED_IFORM_PMOVSXWD_XMMdq_XMMq = 1320,
    XED_IFORM_PMOVSXWQ_XMMdq_MEMd = 1321,
    XED_IFORM_PMOVSXWQ_XMMdq_XMMd = 1322,
    XED_IFORM_PMOVZXBD_XMMdq_MEMd = 1323,
    XED_IFORM_PMOVZXBD_XMMdq_XMMd = 1324,
    XED_IFORM_PMOVZXBQ_XMMdq_MEMw = 1325,
    XED_IFORM_PMOVZXBQ_XMMdq_XMMw = 1326,
    XED_IFORM_PMOVZXBW_XMMdq_MEMq = 1327,
    XED_IFORM_PMOVZXBW_XMMdq_XMMq = 1328,
    XED_IFORM_PMOVZXDQ_XMMdq_MEMq = 1329,
    XED_IFORM_PMOVZXDQ_XMMdq_XMMq = 1330,
    XED_IFORM_PMOVZXWD_XMMdq_MEMq = 1331,
    XED_IFORM_PMOVZXWD_XMMdq_XMMq = 1332,
    XED_IFORM_PMOVZXWQ_XMMdq_MEMd = 1333,
    XED_IFORM_PMOVZXWQ_XMMdq_XMMd = 1334,
    XED_IFORM_PMULDQ_XMMdq_MEMdq = 1335,
    XED_IFORM_PMULDQ_XMMdq_XMMdq = 1336,
    XED_IFORM_PMULHRSW_MMXq_MEMq = 1337,
    XED_IFORM_PMULHRSW_MMXq_MMXq = 1338,
    XED_IFORM_PMULHRSW_XMMdq_MEMdq = 1339,
    XED_IFORM_PMULHRSW_XMMdq_XMMdq = 1340,
    XED_IFORM_PMULHRW_MMXq_MEMq = 1341,
    XED_IFORM_PMULHRW_MMXq_MMXq = 1342,
    XED_IFORM_PMULHUW_MMXq_MEMq = 1343,
    XED_IFORM_PMULHUW_MMXq_MMXq = 1344,
    XED_IFORM_PMULHUW_XMMdq_MEMdq = 1345,
    XED_IFORM_PMULHUW_XMMdq_XMMdq = 1346,
    XED_IFORM_PMULHW_MMXq_MEMq = 1347,
    XED_IFORM_PMULHW_MMXq_MMXq = 1348,
    XED_IFORM_PMULHW_XMMdq_MEMdq = 1349,
    XED_IFORM_PMULHW_XMMdq_XMMdq = 1350,
    XED_IFORM_PMULLD_XMMdq_MEMdq = 1351,
    XED_IFORM_PMULLD_XMMdq_XMMdq = 1352,
    XED_IFORM_PMULLW_MMXq_MEMq = 1353,
    XED_IFORM_PMULLW_MMXq_MMXq = 1354,
    XED_IFORM_PMULLW_XMMdq_MEMdq = 1355,
    XED_IFORM_PMULLW_XMMdq_XMMdq = 1356,
    XED_IFORM_PMULUDQ_MMXq_MEMq = 1357,
    XED_IFORM_PMULUDQ_MMXq_MMXq = 1358,
    XED_IFORM_PMULUDQ_XMMdq_MEMdq = 1359,
    XED_IFORM_PMULUDQ_XMMdq_XMMdq = 1360,
    XED_IFORM_POP_DS = 1361,
    XED_IFORM_POP_ES = 1362,
    XED_IFORM_POP_FS = 1363,
    XED_IFORM_POP_GPRv_51 = 1364,
    XED_IFORM_POP_GPRv_8F = 1365,
    XED_IFORM_POP_GS = 1366,
    XED_IFORM_POP_MEMv = 1367,
    XED_IFORM_POP_SS = 1368,
    XED_IFORM_POPA = 1369,
    XED_IFORM_POPAD = 1370,
    XED_IFORM_POPCNT_GPRv_GPRv = 1371,
    XED_IFORM_POPCNT_GPRv_MEMv = 1372,
    XED_IFORM_POPF = 1373,
    XED_IFORM_POPFD = 1374,
    XED_IFORM_POPFQ = 1375,
    XED_IFORM_POR_MMXq_MEMq = 1376,
    XED_IFORM_POR_MMXq_MMXq = 1377,
    XED_IFORM_POR_XMMdq_MEMdq = 1378,
    XED_IFORM_POR_XMMdq_XMMdq = 1379,
    XED_IFORM_PREFETCHNTA_MEMmprefetch = 1380,
    XED_IFORM_PREFETCHT0_MEMmprefetch = 1381,
    XED_IFORM_PREFETCHT1_MEMmprefetch = 1382,
    XED_IFORM_PREFETCHT2_MEMmprefetch = 1383,
    XED_IFORM_PREFETCHW_0F0Dr1 = 1384,
    XED_IFORM_PREFETCHW_0F0Dr3 = 1385,
    XED_IFORM_PREFETCHWT1_MEMu8 = 1386,
    XED_IFORM_PREFETCH_EXCLUSIVE_MEMmprefetch = 1387,
    XED_IFORM_PREFETCH_RESERVED_0F0Dr4 = 1388,
    XED_IFORM_PREFETCH_RESERVED_0F0Dr5 = 1389,
    XED_IFORM_PREFETCH_RESERVED_0F0Dr6 = 1390,
    XED_IFORM_PREFETCH_RESERVED_0F0Dr7 = 1391,
    XED_IFORM_PSADBW_MMXq_MEMq = 1392,
    XED_IFORM_PSADBW_MMXq_MMXq = 1393,
    XED_IFORM_PSADBW_XMMdq_MEMdq = 1394,
    XED_IFORM_PSADBW_XMMdq_XMMdq = 1395,
    XED_IFORM_PSHUFB_MMXq_MEMq = 1396,
    XED_IFORM_PSHUFB_MMXq_MMXq = 1397,
    XED_IFORM_PSHUFB_XMMdq_MEMdq = 1398,
    XED_IFORM_PSHUFB_XMMdq_XMMdq = 1399,
    XED_IFORM_PSHUFD_XMMdq_MEMdq_IMMb = 1400,
    XED_IFORM_PSHUFD_XMMdq_XMMdq_IMMb = 1401,
    XED_IFORM_PSHUFHW_XMMdq_MEMdq_IMMb = 1402,
    XED_IFORM_PSHUFHW_XMMdq_XMMdq_IMMb = 1403,
    XED_IFORM_PSHUFLW_XMMdq_MEMdq_IMMb = 1404,
    XED_IFORM_PSHUFLW_XMMdq_XMMdq_IMMb = 1405,
    XED_IFORM_PSHUFW_MMXq_MEMq_IMMb = 1406,
    XED_IFORM_PSHUFW_MMXq_MMXq_IMMb = 1407,
    XED_IFORM_PSIGNB_MMXq_MEMq = 1408,
    XED_IFORM_PSIGNB_MMXq_MMXq = 1409,
    XED_IFORM_PSIGNB_XMMdq_MEMdq = 1410,
    XED_IFORM_PSIGNB_XMMdq_XMMdq = 1411,
    XED_IFORM_PSIGND_MMXq_MEMq = 1412,
    XED_IFORM_PSIGND_MMXq_MMXq = 1413,
    XED_IFORM_PSIGND_XMMdq_MEMdq = 1414,
    XED_IFORM_PSIGND_XMMdq_XMMdq = 1415,
    XED_IFORM_PSIGNW_MMXq_MEMq = 1416,
    XED_IFORM_PSIGNW_MMXq_MMXq = 1417,
    XED_IFORM_PSIGNW_XMMdq_MEMdq = 1418,
    XED_IFORM_PSIGNW_XMMdq_XMMdq = 1419,
    XED_IFORM_PSLLD_MMXq_IMMb = 1420,
    XED_IFORM_PSLLD_MMXq_MEMq = 1421,
    XED_IFORM_PSLLD_MMXq_MMXq = 1422,
    XED_IFORM_PSLLD_XMMdq_IMMb = 1423,
    XED_IFORM_PSLLD_XMMdq_MEMdq = 1424,
    XED_IFORM_PSLLD_XMMdq_XMMdq = 1425,
    XED_IFORM_PSLLDQ_XMMdq_IMMb = 1426,
    XED_IFORM_PSLLQ_MMXq_IMMb = 1427,
    XED_IFORM_PSLLQ_MMXq_MEMq = 1428,
    XED_IFORM_PSLLQ_MMXq_MMXq = 1429,
    XED_IFORM_PSLLQ_XMMdq_IMMb = 1430,
    XED_IFORM_PSLLQ_XMMdq_MEMdq = 1431,
    XED_IFORM_PSLLQ_XMMdq_XMMdq = 1432,
    XED_IFORM_PSLLW_MMXq_IMMb = 1433,
    XED_IFORM_PSLLW_MMXq_MEMq = 1434,
    XED_IFORM_PSLLW_MMXq_MMXq = 1435,
    XED_IFORM_PSLLW_XMMdq_IMMb = 1436,
    XED_IFORM_PSLLW_XMMdq_MEMdq = 1437,
    XED_IFORM_PSLLW_XMMdq_XMMdq = 1438,
    XED_IFORM_PSRAD_MMXq_IMMb = 1439,
    XED_IFORM_PSRAD_MMXq_MEMq = 1440,
    XED_IFORM_PSRAD_MMXq_MMXq = 1441,
    XED_IFORM_PSRAD_XMMdq_IMMb = 1442,
    XED_IFORM_PSRAD_XMMdq_MEMdq = 1443,
    XED_IFORM_PSRAD_XMMdq_XMMdq = 1444,
    XED_IFORM_PSRAW_MMXq_IMMb = 1445,
    XED_IFORM_PSRAW_MMXq_MEMq = 1446,
    XED_IFORM_PSRAW_MMXq_MMXq = 1447,
    XED_IFORM_PSRAW_XMMdq_IMMb = 1448,
    XED_IFORM_PSRAW_XMMdq_MEMdq = 1449,
    XED_IFORM_PSRAW_XMMdq_XMMdq = 1450,
    XED_IFORM_PSRLD_MMXq_IMMb = 1451,
    XED_IFORM_PSRLD_MMXq_MEMq = 1452,
    XED_IFORM_PSRLD_MMXq_MMXq = 1453,
    XED_IFORM_PSRLD_XMMdq_IMMb = 1454,
    XED_IFORM_PSRLD_XMMdq_MEMdq = 1455,
    XED_IFORM_PSRLD_XMMdq_XMMdq = 1456,
    XED_IFORM_PSRLDQ_XMMdq_IMMb = 1457,
    XED_IFORM_PSRLQ_MMXq_IMMb = 1458,
    XED_IFORM_PSRLQ_MMXq_MEMq = 1459,
    XED_IFORM_PSRLQ_MMXq_MMXq = 1460,
    XED_IFORM_PSRLQ_XMMdq_IMMb = 1461,
    XED_IFORM_PSRLQ_XMMdq_MEMdq = 1462,
    XED_IFORM_PSRLQ_XMMdq_XMMdq = 1463,
    XED_IFORM_PSRLW_MMXq_IMMb = 1464,
    XED_IFORM_PSRLW_MMXq_MEMq = 1465,
    XED_IFORM_PSRLW_MMXq_MMXq = 1466,
    XED_IFORM_PSRLW_XMMdq_IMMb = 1467,
    XED_IFORM_PSRLW_XMMdq_MEMdq = 1468,
    XED_IFORM_PSRLW_XMMdq_XMMdq = 1469,
    XED_IFORM_PSUBB_MMXq_MEMq = 1470,
    XED_IFORM_PSUBB_MMXq_MMXq = 1471,
    XED_IFORM_PSUBB_XMMdq_MEMdq = 1472,
    XED_IFORM_PSUBB_XMMdq_XMMdq = 1473,
    XED_IFORM_PSUBD_MMXq_MEMq = 1474,
    XED_IFORM_PSUBD_MMXq_MMXq = 1475,
    XED_IFORM_PSUBD_XMMdq_MEMdq = 1476,
    XED_IFORM_PSUBD_XMMdq_XMMdq = 1477,
    XED_IFORM_PSUBQ_MMXq_MEMq = 1478,
    XED_IFORM_PSUBQ_MMXq_MMXq = 1479,
    XED_IFORM_PSUBQ_XMMdq_MEMdq = 1480,
    XED_IFORM_PSUBQ_XMMdq_XMMdq = 1481,
    XED_IFORM_PSUBSB_MMXq_MEMq = 1482,
    XED_IFORM_PSUBSB_MMXq_MMXq = 1483,
    XED_IFORM_PSUBSB_XMMdq_MEMdq = 1484,
    XED_IFORM_PSUBSB_XMMdq_XMMdq = 1485,
    XED_IFORM_PSUBSW_MMXq_MEMq = 1486,
    XED_IFORM_PSUBSW_MMXq_MMXq = 1487,
    XED_IFORM_PSUBSW_XMMdq_MEMdq = 1488,
    XED_IFORM_PSUBSW_XMMdq_XMMdq = 1489,
    XED_IFORM_PSUBUSB_MMXq_MEMq = 1490,
    XED_IFORM_PSUBUSB_MMXq_MMXq = 1491,
    XED_IFORM_PSUBUSB_XMMdq_MEMdq = 1492,
    XED_IFORM_PSUBUSB_XMMdq_XMMdq = 1493,
    XED_IFORM_PSUBUSW_MMXq_MEMq = 1494,
    XED_IFORM_PSUBUSW_MMXq_MMXq = 1495,
    XED_IFORM_PSUBUSW_XMMdq_MEMdq = 1496,
    XED_IFORM_PSUBUSW_XMMdq_XMMdq = 1497,
    XED_IFORM_PSUBW_MMXq_MEMq = 1498,
    XED_IFORM_PSUBW_MMXq_MMXq = 1499,
    XED_IFORM_PSUBW_XMMdq_MEMdq = 1500,
    XED_IFORM_PSUBW_XMMdq_XMMdq = 1501,
    XED_IFORM_PSWAPD_MMXq_MEMq = 1502,
    XED_IFORM_PSWAPD_MMXq_MMXq = 1503,
    XED_IFORM_PTEST_XMMdq_MEMdq = 1504,
    XED_IFORM_PTEST_XMMdq_XMMdq = 1505,
    XED_IFORM_PTWRITE_GPRy = 1506,
    XED_IFORM_PTWRITE_MEMy = 1507,
    XED_IFORM_PUNPCKHBW_MMXq_MEMq = 1508,
    XED_IFORM_PUNPCKHBW_MMXq_MMXd = 1509,
    XED_IFORM_PUNPCKHBW_XMMdq_MEMdq = 1510,
    XED_IFORM_PUNPCKHBW_XMMdq_XMMq = 1511,
    XED_IFORM_PUNPCKHDQ_MMXq_MEMq = 1512,
    XED_IFORM_PUNPCKHDQ_MMXq_MMXd = 1513,
    XED_IFORM_PUNPCKHDQ_XMMdq_MEMdq = 1514,
    XED_IFORM_PUNPCKHDQ_XMMdq_XMMq = 1515,
    XED_IFORM_PUNPCKHQDQ_XMMdq_MEMdq = 1516,
    XED_IFORM_PUNPCKHQDQ_XMMdq_XMMq = 1517,
    XED_IFORM_PUNPCKHWD_MMXq_MEMq = 1518,
    XED_IFORM_PUNPCKHWD_MMXq_MMXd = 1519,
    XED_IFORM_PUNPCKHWD_XMMdq_MEMdq = 1520,
    XED_IFORM_PUNPCKHWD_XMMdq_XMMq = 1521,
    XED_IFORM_PUNPCKLBW_MMXq_MEMd = 1522,
    XED_IFORM_PUNPCKLBW_MMXq_MMXd = 1523,
    XED_IFORM_PUNPCKLBW_XMMdq_MEMdq = 1524,
    XED_IFORM_PUNPCKLBW_XMMdq_XMMq = 1525,
    XED_IFORM_PUNPCKLDQ_MMXq_MEMd = 1526,
    XED_IFORM_PUNPCKLDQ_MMXq_MMXd = 1527,
    XED_IFORM_PUNPCKLDQ_XMMdq_MEMdq = 1528,
    XED_IFORM_PUNPCKLDQ_XMMdq_XMMq = 1529,
    XED_IFORM_PUNPCKLQDQ_XMMdq_MEMdq = 1530,
    XED_IFORM_PUNPCKLQDQ_XMMdq_XMMq = 1531,
    XED_IFORM_PUNPCKLWD_MMXq_MEMd = 1532,
    XED_IFORM_PUNPCKLWD_MMXq_MMXd = 1533,
    XED_IFORM_PUNPCKLWD_XMMdq_MEMdq = 1534,
    XED_IFORM_PUNPCKLWD_XMMdq_XMMq = 1535,
    XED_IFORM_PUSH_CS = 1536,
    XED_IFORM_PUSH_DS = 1537,
    XED_IFORM_PUSH_ES = 1538,
    XED_IFORM_PUSH_FS = 1539,
    XED_IFORM_PUSH_GPRv_50 = 1540,
    XED_IFORM_PUSH_GPRv_FFr6 = 1541,
    XED_IFORM_PUSH_GS = 1542,
    XED_IFORM_PUSH_IMMb = 1543,
    XED_IFORM_PUSH_IMMz = 1544,
    XED_IFORM_PUSH_MEMv = 1545,
    XED_IFORM_PUSH_SS = 1546,
    XED_IFORM_PUSHA = 1547,
    XED_IFORM_PUSHAD = 1548,
    XED_IFORM_PUSHF = 1549,
    XED_IFORM_PUSHFD = 1550,
    XED_IFORM_PUSHFQ = 1551,
    XED_IFORM_PXOR_MMXq_MEMq = 1552,
    XED_IFORM_PXOR_MMXq_MMXq = 1553,
    XED_IFORM_PXOR_XMMdq_MEMdq = 1554,
    XED_IFORM_PXOR_XMMdq_XMMdq = 1555,
    XED_IFORM_RCL_GPR8_CL = 1556,
    XED_IFORM_RCL_GPR8_IMMb = 1557,
    XED_IFORM_RCL_GPR8_ONE = 1558,
    XED_IFORM_RCL_GPRv_CL = 1559,
    XED_IFORM_RCL_GPRv_IMMb = 1560,
    XED_IFORM_RCL_GPRv_ONE = 1561,
    XED_IFORM_RCL_MEMb_CL = 1562,
    XED_IFORM_RCL_MEMb_IMMb = 1563,
    XED_IFORM_RCL_MEMb_ONE = 1564,
    XED_IFORM_RCL_MEMv_CL = 1565,
    XED_IFORM_RCL_MEMv_IMMb = 1566,
    XED_IFORM_RCL_MEMv_ONE = 1567,
    XED_IFORM_RCPPS_XMMps_MEMps = 1568,
    XED_IFORM_RCPPS_XMMps_XMMps = 1569,
    XED_IFORM_RCPSS_XMMss_MEMss = 1570,
    XED_IFORM_RCPSS_XMMss_XMMss = 1571,
    XED_IFORM_RCR_GPR8_CL = 1572,
    XED_IFORM_RCR_GPR8_IMMb = 1573,
    XED_IFORM_RCR_GPR8_ONE = 1574,
    XED_IFORM_RCR_GPRv_CL = 1575,
    XED_IFORM_RCR_GPRv_IMMb = 1576,
    XED_IFORM_RCR_GPRv_ONE = 1577,
    XED_IFORM_RCR_MEMb_CL = 1578,
    XED_IFORM_RCR_MEMb_IMMb = 1579,
    XED_IFORM_RCR_MEMb_ONE = 1580,
    XED_IFORM_RCR_MEMv_CL = 1581,
    XED_IFORM_RCR_MEMv_IMMb = 1582,
    XED_IFORM_RCR_MEMv_ONE = 1583,
    XED_IFORM_RDFSBASE_GPRy = 1584,
    XED_IFORM_RDGSBASE_GPRy = 1585,
    XED_IFORM_RDMSR = 1586,
    XED_IFORM_RDPKRU = 1587,
    XED_IFORM_RDPMC = 1588,
    XED_IFORM_RDRAND_GPRv = 1589,
    XED_IFORM_RDSEED_GPRv = 1590,
    XED_IFORM_RDSSPD_GPR32u32 = 1591,
    XED_IFORM_RDSSPQ_GPR64u64 = 1592,
    XED_IFORM_RDTSC = 1593,
    XED_IFORM_RDTSCP = 1594,
    XED_IFORM_REPE_CMPSB = 1595,
    XED_IFORM_REPE_CMPSD = 1596,
    XED_IFORM_REPE_CMPSQ = 1597,
    XED_IFORM_REPE_CMPSW = 1598,
    XED_IFORM_REPE_SCASB = 1599,
    XED_IFORM_REPE_SCASD = 1600,
    XED_IFORM_REPE_SCASQ = 1601,
    XED_IFORM_REPE_SCASW = 1602,
    XED_IFORM_REPNE_CMPSB = 1603,
    XED_IFORM_REPNE_CMPSD = 1604,
    XED_IFORM_REPNE_CMPSQ = 1605,
    XED_IFORM_REPNE_CMPSW = 1606,
    XED_IFORM_REPNE_SCASB = 1607,
    XED_IFORM_REPNE_SCASD = 1608,
    XED_IFORM_REPNE_SCASQ = 1609,
    XED_IFORM_REPNE_SCASW = 1610,
    XED_IFORM_REP_INSB = 1611,
    XED_IFORM_REP_INSD = 1612,
    XED_IFORM_REP_INSW = 1613,
    XED_IFORM_REP_LODSB = 1614,
    XED_IFORM_REP_LODSD = 1615,
    XED_IFORM_REP_LODSQ = 1616,
    XED_IFORM_REP_LODSW = 1617,
    XED_IFORM_REP_MOVSB = 1618,
    XED_IFORM_REP_MOVSD = 1619,
    XED_IFORM_REP_MOVSQ = 1620,
    XED_IFORM_REP_MOVSW = 1621,
    XED_IFORM_REP_OUTSB = 1622,
    XED_IFORM_REP_OUTSD = 1623,
    XED_IFORM_REP_OUTSW = 1624,
    XED_IFORM_REP_STOSB = 1625,
    XED_IFORM_REP_STOSD = 1626,
    XED_IFORM_REP_STOSQ = 1627,
    XED_IFORM_REP_STOSW = 1628,
    XED_IFORM_RET_FAR = 1629,
    XED_IFORM_RET_FAR_IMMw = 1630,
    XED_IFORM_RET_NEAR = 1631,
    XED_IFORM_RET_NEAR_IMMw = 1632,
    XED_IFORM_ROL_GPR8_CL = 1633,
    XED_IFORM_ROL_GPR8_IMMb = 1634,
    XED_IFORM_ROL_GPR8_ONE = 1635,
    XED_IFORM_ROL_GPRv_CL = 1636,
    XED_IFORM_ROL_GPRv_IMMb = 1637,
    XED_IFORM_ROL_GPRv_ONE = 1638,
    XED_IFORM_ROL_MEMb_CL = 1639,
    XED_IFORM_ROL_MEMb_IMMb = 1640,
    XED_IFORM_ROL_MEMb_ONE = 1641,
    XED_IFORM_ROL_MEMv_CL = 1642,
    XED_IFORM_ROL_MEMv_IMMb = 1643,
    XED_IFORM_ROL_MEMv_ONE = 1644,
    XED_IFORM_ROR_GPR8_CL = 1645,
    XED_IFORM_ROR_GPR8_IMMb = 1646,
    XED_IFORM_ROR_GPR8_ONE = 1647,
    XED_IFORM_ROR_GPRv_CL = 1648,
    XED_IFORM_ROR_GPRv_IMMb = 1649,
    XED_IFORM_ROR_GPRv_ONE = 1650,
    XED_IFORM_ROR_MEMb_CL = 1651,
    XED_IFORM_ROR_MEMb_IMMb = 1652,
    XED_IFORM_ROR_MEMb_ONE = 1653,
    XED_IFORM_ROR_MEMv_CL = 1654,
    XED_IFORM_ROR_MEMv_IMMb = 1655,
    XED_IFORM_ROR_MEMv_ONE = 1656,
    XED_IFORM_RORX_VGPR32d_MEMd_IMMb = 1657,
    XED_IFORM_RORX_VGPR32d_VGPR32d_IMMb = 1658,
    XED_IFORM_RORX_VGPR64q_MEMq_IMMb = 1659,
    XED_IFORM_RORX_VGPR64q_VGPR64q_IMMb = 1660,
    XED_IFORM_ROUNDPD_XMMpd_MEMpd_IMMb = 1661,
    XED_IFORM_ROUNDPD_XMMpd_XMMpd_IMMb = 1662,
    XED_IFORM_ROUNDPS_XMMps_MEMps_IMMb = 1663,
    XED_IFORM_ROUNDPS_XMMps_XMMps_IMMb = 1664,
    XED_IFORM_ROUNDSD_XMMq_MEMq_IMMb = 1665,
    XED_IFORM_ROUNDSD_XMMq_XMMq_IMMb = 1666,
    XED_IFORM_ROUNDSS_XMMd_MEMd_IMMb = 1667,
    XED_IFORM_ROUNDSS_XMMd_XMMd_IMMb = 1668,
    XED_IFORM_RSM = 1669,
    XED_IFORM_RSQRTPS_XMMps_MEMps = 1670,
    XED_IFORM_RSQRTPS_XMMps_XMMps = 1671,
    XED_IFORM_RSQRTSS_XMMss_MEMss = 1672,
    XED_IFORM_RSQRTSS_XMMss_XMMss = 1673,
    XED_IFORM_RSTORSSP_MEMu64 = 1674,
    XED_IFORM_SAHF = 1675,
    XED_IFORM_SALC = 1676,
    XED_IFORM_SAR_GPR8_CL = 1677,
    XED_IFORM_SAR_GPR8_IMMb = 1678,
    XED_IFORM_SAR_GPR8_ONE = 1679,
    XED_IFORM_SAR_GPRv_CL = 1680,
    XED_IFORM_SAR_GPRv_IMMb = 1681,
    XED_IFORM_SAR_GPRv_ONE = 1682,
    XED_IFORM_SAR_MEMb_CL = 1683,
    XED_IFORM_SAR_MEMb_IMMb = 1684,
    XED_IFORM_SAR_MEMb_ONE = 1685,
    XED_IFORM_SAR_MEMv_CL = 1686,
    XED_IFORM_SAR_MEMv_IMMb = 1687,
    XED_IFORM_SAR_MEMv_ONE = 1688,
    XED_IFORM_SARX_VGPR32d_MEMd_VGPR32d = 1689,
    XED_IFORM_SARX_VGPR32d_VGPR32d_VGPR32d = 1690,
    XED_IFORM_SARX_VGPR64q_MEMq_VGPR64q = 1691,
    XED_IFORM_SARX_VGPR64q_VGPR64q_VGPR64q = 1692,
    XED_IFORM_SAVESSP = 1693,
    XED_IFORM_SBB_AL_IMMb = 1694,
    XED_IFORM_SBB_GPR8_GPR8_18 = 1695,
    XED_IFORM_SBB_GPR8_GPR8_1A = 1696,
    XED_IFORM_SBB_GPR8_IMMb_80r3 = 1697,
    XED_IFORM_SBB_GPR8_IMMb_82r3 = 1698,
    XED_IFORM_SBB_GPR8_MEMb = 1699,
    XED_IFORM_SBB_GPRv_GPRv_19 = 1700,
    XED_IFORM_SBB_GPRv_GPRv_1B = 1701,
    XED_IFORM_SBB_GPRv_IMMb = 1702,
    XED_IFORM_SBB_GPRv_IMMz = 1703,
    XED_IFORM_SBB_GPRv_MEMv = 1704,
    XED_IFORM_SBB_MEMb_GPR8 = 1705,
    XED_IFORM_SBB_MEMb_IMMb_80r3 = 1706,
    XED_IFORM_SBB_MEMb_IMMb_82r3 = 1707,
    XED_IFORM_SBB_MEMv_GPRv = 1708,
    XED_IFORM_SBB_MEMv_IMMb = 1709,
    XED_IFORM_SBB_MEMv_IMMz = 1710,
    XED_IFORM_SBB_OrAX_IMMz = 1711,
    XED_IFORM_SBB_LOCK_MEMb_GPR8 = 1712,
    XED_IFORM_SBB_LOCK_MEMb_IMMb_80r3 = 1713,
    XED_IFORM_SBB_LOCK_MEMb_IMMb_82r3 = 1714,
    XED_IFORM_SBB_LOCK_MEMv_GPRv = 1715,
    XED_IFORM_SBB_LOCK_MEMv_IMMb = 1716,
    XED_IFORM_SBB_LOCK_MEMv_IMMz = 1717,
    XED_IFORM_SCASB = 1718,
    XED_IFORM_SCASD = 1719,
    XED_IFORM_SCASQ = 1720,
    XED_IFORM_SCASW = 1721,
    XED_IFORM_SETB_GPR8 = 1722,
    XED_IFORM_SETB_MEMb = 1723,
    XED_IFORM_SETBE_GPR8 = 1724,
    XED_IFORM_SETBE_MEMb = 1725,
    XED_IFORM_SETL_GPR8 = 1726,
    XED_IFORM_SETL_MEMb = 1727,
    XED_IFORM_SETLE_GPR8 = 1728,
    XED_IFORM_SETLE_MEMb = 1729,
    XED_IFORM_SETNB_GPR8 = 1730,
    XED_IFORM_SETNB_MEMb = 1731,
    XED_IFORM_SETNBE_GPR8 = 1732,
    XED_IFORM_SETNBE_MEMb = 1733,
    XED_IFORM_SETNL_GPR8 = 1734,
    XED_IFORM_SETNL_MEMb = 1735,
    XED_IFORM_SETNLE_GPR8 = 1736,
    XED_IFORM_SETNLE_MEMb = 1737,
    XED_IFORM_SETNO_GPR8 = 1738,
    XED_IFORM_SETNO_MEMb = 1739,
    XED_IFORM_SETNP_GPR8 = 1740,
    XED_IFORM_SETNP_MEMb = 1741,
    XED_IFORM_SETNS_GPR8 = 1742,
    XED_IFORM_SETNS_MEMb = 1743,
    XED_IFORM_SETNZ_GPR8 = 1744,
    XED_IFORM_SETNZ_MEMb = 1745,
    XED_IFORM_SETO_GPR8 = 1746,
    XED_IFORM_SETO_MEMb = 1747,
    XED_IFORM_SETP_GPR8 = 1748,
    XED_IFORM_SETP_MEMb = 1749,
    XED_IFORM_SETS_GPR8 = 1750,
    XED_IFORM_SETS_MEMb = 1751,
    XED_IFORM_SETSSBSY = 1752,
    XED_IFORM_SETZ_GPR8 = 1753,
    XED_IFORM_SETZ_MEMb = 1754,
    XED_IFORM_SFENCE = 1755,
    XED_IFORM_SGDT_MEMs = 1756,
    XED_IFORM_SGDT_MEMs64 = 1757,
    XED_IFORM_SHA1MSG1_XMMi32_MEMi32_SHA = 1758,
    XED_IFORM_SHA1MSG1_XMMi32_XMMi32_SHA = 1759,
    XED_IFORM_SHA1MSG2_XMMi32_MEMi32_SHA = 1760,
    XED_IFORM_SHA1MSG2_XMMi32_XMMi32_SHA = 1761,
    XED_IFORM_SHA1NEXTE_XMMi32_MEMi32_SHA = 1762,
    XED_IFORM_SHA1NEXTE_XMMi32_XMMi32_SHA = 1763,
    XED_IFORM_SHA1RNDS4_XMMi32_MEMi32_IMM8_SHA = 1764,
    XED_IFORM_SHA1RNDS4_XMMi32_XMMi32_IMM8_SHA = 1765,
    XED_IFORM_SHA256MSG1_XMMi32_MEMi32_SHA = 1766,
    XED_IFORM_SHA256MSG1_XMMi32_XMMi32_SHA = 1767,
    XED_IFORM_SHA256MSG2_XMMi32_MEMi32_SHA = 1768,
    XED_IFORM_SHA256MSG2_XMMi32_XMMi32_SHA = 1769,
    XED_IFORM_SHA256RNDS2_XMMi32_MEMi32_SHA = 1770,
    XED_IFORM_SHA256RNDS2_XMMi32_XMMi32_SHA = 1771,
    XED_IFORM_SHL_GPR8_CL_D2r4 = 1772,
    XED_IFORM_SHL_GPR8_CL_D2r6 = 1773,
    XED_IFORM_SHL_GPR8_IMMb_C0r4 = 1774,
    XED_IFORM_SHL_GPR8_IMMb_C0r6 = 1775,
    XED_IFORM_SHL_GPR8_ONE_D0r4 = 1776,
    XED_IFORM_SHL_GPR8_ONE_D0r6 = 1777,
    XED_IFORM_SHL_GPRv_CL_D3r4 = 1778,
    XED_IFORM_SHL_GPRv_CL_D3r6 = 1779,
    XED_IFORM_SHL_GPRv_IMMb_C1r4 = 1780,
    XED_IFORM_SHL_GPRv_IMMb_C1r6 = 1781,
    XED_IFORM_SHL_GPRv_ONE_D1r4 = 1782,
    XED_IFORM_SHL_GPRv_ONE_D1r6 = 1783,
    XED_IFORM_SHL_MEMb_CL_D2r4 = 1784,
    XED_IFORM_SHL_MEMb_CL_D2r6 = 1785,
    XED_IFORM_SHL_MEMb_IMMb_C0r4 = 1786,
    XED_IFORM_SHL_MEMb_IMMb_C0r6 = 1787,
    XED_IFORM_SHL_MEMb_ONE_D0r4 = 1788,
    XED_IFORM_SHL_MEMb_ONE_D0r6 = 1789,
    XED_IFORM_SHL_MEMv_CL_D3r4 = 1790,
    XED_IFORM_SHL_MEMv_CL_D3r6 = 1791,
    XED_IFORM_SHL_MEMv_IMMb_C1r4 = 1792,
    XED_IFORM_SHL_MEMv_IMMb_C1r6 = 1793,
    XED_IFORM_SHL_MEMv_ONE_D1r4 = 1794,
    XED_IFORM_SHL_MEMv_ONE_D1r6 = 1795,
    XED_IFORM_SHLD_GPRv_GPRv_CL = 1796,
    XED_IFORM_SHLD_GPRv_GPRv_IMMb = 1797,
    XED_IFORM_SHLD_MEMv_GPRv_CL = 1798,
    XED_IFORM_SHLD_MEMv_GPRv_IMMb = 1799,
    XED_IFORM_SHLX_VGPR32d_MEMd_VGPR32d = 1800,
    XED_IFORM_SHLX_VGPR32d_VGPR32d_VGPR32d = 1801,
    XED_IFORM_SHLX_VGPR64q_MEMq_VGPR64q = 1802,
    XED_IFORM_SHLX_VGPR64q_VGPR64q_VGPR64q = 1803,
    XED_IFORM_SHR_GPR8_CL = 1804,
    XED_IFORM_SHR_GPR8_IMMb = 1805,
    XED_IFORM_SHR_GPR8_ONE = 1806,
    XED_IFORM_SHR_GPRv_CL = 1807,
    XED_IFORM_SHR_GPRv_IMMb = 1808,
    XED_IFORM_SHR_GPRv_ONE = 1809,
    XED_IFORM_SHR_MEMb_CL = 1810,
    XED_IFORM_SHR_MEMb_IMMb = 1811,
    XED_IFORM_SHR_MEMb_ONE = 1812,
    XED_IFORM_SHR_MEMv_CL = 1813,
    XED_IFORM_SHR_MEMv_IMMb = 1814,
    XED_IFORM_SHR_MEMv_ONE = 1815,
    XED_IFORM_SHRD_GPRv_GPRv_CL = 1816,
    XED_IFORM_SHRD_GPRv_GPRv_IMMb = 1817,
    XED_IFORM_SHRD_MEMv_GPRv_CL = 1818,
    XED_IFORM_SHRD_MEMv_GPRv_IMMb = 1819,
    XED_IFORM_SHRX_VGPR32d_MEMd_VGPR32d = 1820,
    XED_IFORM_SHRX_VGPR32d_VGPR32d_VGPR32d = 1821,
    XED_IFORM_SHRX_VGPR64q_MEMq_VGPR64q = 1822,
    XED_IFORM_SHRX_VGPR64q_VGPR64q_VGPR64q = 1823,
    XED_IFORM_SHUFPD_XMMpd_MEMpd_IMMb = 1824,
    XED_IFORM_SHUFPD_XMMpd_XMMpd_IMMb = 1825,
    XED_IFORM_SHUFPS_XMMps_MEMps_IMMb = 1826,
    XED_IFORM_SHUFPS_XMMps_XMMps_IMMb = 1827,
    XED_IFORM_SIDT_MEMs = 1828,
    XED_IFORM_SIDT_MEMs64 = 1829,
    XED_IFORM_SKINIT_EAX = 1830,
    XED_IFORM_SLDT_GPRv = 1831,
    XED_IFORM_SLDT_MEMw = 1832,
    XED_IFORM_SLWPCB_GPRyy = 1833,
    XED_IFORM_SMSW_GPRv = 1834,
    XED_IFORM_SMSW_MEMw = 1835,
    XED_IFORM_SQRTPD_XMMpd_MEMpd = 1836,
    XED_IFORM_SQRTPD_XMMpd_XMMpd = 1837,
    XED_IFORM_SQRTPS_XMMps_MEMps = 1838,
    XED_IFORM_SQRTPS_XMMps_XMMps = 1839,
    XED_IFORM_SQRTSD_XMMsd_MEMsd = 1840,
    XED_IFORM_SQRTSD_XMMsd_XMMsd = 1841,
    XED_IFORM_SQRTSS_XMMss_MEMss = 1842,
    XED_IFORM_SQRTSS_XMMss_XMMss = 1843,
    XED_IFORM_STAC = 1844,
    XED_IFORM_STC = 1845,
    XED_IFORM_STD = 1846,
    XED_IFORM_STGI = 1847,
    XED_IFORM_STI = 1848,
    XED_IFORM_STMXCSR_MEMd = 1849,
    XED_IFORM_STOSB = 1850,
    XED_IFORM_STOSD = 1851,
    XED_IFORM_STOSQ = 1852,
    XED_IFORM_STOSW = 1853,
    XED_IFORM_STR_GPRv = 1854,
    XED_IFORM_STR_MEMw = 1855,
    XED_IFORM_SUB_AL_IMMb = 1856,
    XED_IFORM_SUB_GPR8_GPR8_28 = 1857,
    XED_IFORM_SUB_GPR8_GPR8_2A = 1858,
    XED_IFORM_SUB_GPR8_IMMb_80r5 = 1859,
    XED_IFORM_SUB_GPR8_IMMb_82r5 = 1860,
    XED_IFORM_SUB_GPR8_MEMb = 1861,
    XED_IFORM_SUB_GPRv_GPRv_29 = 1862,
    XED_IFORM_SUB_GPRv_GPRv_2B = 1863,
    XED_IFORM_SUB_GPRv_IMMb = 1864,
    XED_IFORM_SUB_GPRv_IMMz = 1865,
    XED_IFORM_SUB_GPRv_MEMv = 1866,
    XED_IFORM_SUB_MEMb_GPR8 = 1867,
    XED_IFORM_SUB_MEMb_IMMb_80r5 = 1868,
    XED_IFORM_SUB_MEMb_IMMb_82r5 = 1869,
    XED_IFORM_SUB_MEMv_GPRv = 1870,
    XED_IFORM_SUB_MEMv_IMMb = 1871,
    XED_IFORM_SUB_MEMv_IMMz = 1872,
    XED_IFORM_SUB_OrAX_IMMz = 1873,
    XED_IFORM_SUBPD_XMMpd_MEMpd = 1874,
    XED_IFORM_SUBPD_XMMpd_XMMpd = 1875,
    XED_IFORM_SUBPS_XMMps_MEMps = 1876,
    XED_IFORM_SUBPS_XMMps_XMMps = 1877,
    XED_IFORM_SUBSD_XMMsd_MEMsd = 1878,
    XED_IFORM_SUBSD_XMMsd_XMMsd = 1879,
    XED_IFORM_SUBSS_XMMss_MEMss = 1880,
    XED_IFORM_SUBSS_XMMss_XMMss = 1881,
    XED_IFORM_SUB_LOCK_MEMb_GPR8 = 1882,
    XED_IFORM_SUB_LOCK_MEMb_IMMb_80r5 = 1883,
    XED_IFORM_SUB_LOCK_MEMb_IMMb_82r5 = 1884,
    XED_IFORM_SUB_LOCK_MEMv_GPRv = 1885,
    XED_IFORM_SUB_LOCK_MEMv_IMMb = 1886,
    XED_IFORM_SUB_LOCK_MEMv_IMMz = 1887,
    XED_IFORM_SWAPGS = 1888,
    XED_IFORM_SYSCALL = 1889,
    XED_IFORM_SYSCALL_AMD = 1890,
    XED_IFORM_SYSENTER = 1891,
    XED_IFORM_SYSEXIT = 1892,
    XED_IFORM_SYSRET = 1893,
    XED_IFORM_SYSRET_AMD = 1894,
    XED_IFORM_T1MSKC_VGPR32d_GPRvd = 1895,
    XED_IFORM_T1MSKC_VGPR32d_MEMd = 1896,
    XED_IFORM_T1MSKC_VGPRyy_GPRvy = 1897,
    XED_IFORM_T1MSKC_VGPRyy_MEMy = 1898,
    XED_IFORM_TEST_AL_IMMb = 1899,
    XED_IFORM_TEST_GPR8_GPR8 = 1900,
    XED_IFORM_TEST_GPR8_IMMb_F6r0 = 1901,
    XED_IFORM_TEST_GPR8_IMMb_F6r1 = 1902,
    XED_IFORM_TEST_GPRv_GPRv = 1903,
    XED_IFORM_TEST_GPRv_IMMz_F7r0 = 1904,
    XED_IFORM_TEST_GPRv_IMMz_F7r1 = 1905,
    XED_IFORM_TEST_MEMb_GPR8 = 1906,
    XED_IFORM_TEST_MEMb_IMMb_F6r0 = 1907,
    XED_IFORM_TEST_MEMb_IMMb_F6r1 = 1908,
    XED_IFORM_TEST_MEMv_GPRv = 1909,
    XED_IFORM_TEST_MEMv_IMMz_F7r0 = 1910,
    XED_IFORM_TEST_MEMv_IMMz_F7r1 = 1911,
    XED_IFORM_TEST_OrAX_IMMz = 1912,
    XED_IFORM_TZCNT_GPRv_GPRv = 1913,
    XED_IFORM_TZCNT_GPRv_MEMv = 1914,
    XED_IFORM_TZMSK_VGPR32d_GPR32d = 1915,
    XED_IFORM_TZMSK_VGPR32d_MEMd = 1916,
    XED_IFORM_TZMSK_VGPRyy_GPRvy = 1917,
    XED_IFORM_TZMSK_VGPRyy_MEMy = 1918,
    XED_IFORM_UCOMISD_XMMsd_MEMsd = 1919,
    XED_IFORM_UCOMISD_XMMsd_XMMsd = 1920,
    XED_IFORM_UCOMISS_XMMss_MEMss = 1921,
    XED_IFORM_UCOMISS_XMMss_XMMss = 1922,
    XED_IFORM_UD0 = 1923,
    XED_IFORM_UD1_GPR32_GPR32 = 1924,
    XED_IFORM_UD1_GPR32_MEMd = 1925,
    XED_IFORM_UD2 = 1926,
    XED_IFORM_UNPCKHPD_XMMpd_MEMdq = 1927,
    XED_IFORM_UNPCKHPD_XMMpd_XMMq = 1928,
    XED_IFORM_UNPCKHPS_XMMps_MEMdq = 1929,
    XED_IFORM_UNPCKHPS_XMMps_XMMdq = 1930,
    XED_IFORM_UNPCKLPD_XMMpd_MEMdq = 1931,
    XED_IFORM_UNPCKLPD_XMMpd_XMMq = 1932,
    XED_IFORM_UNPCKLPS_XMMps_MEMdq = 1933,
    XED_IFORM_UNPCKLPS_XMMps_XMMq = 1934,
    XED_IFORM_V4FMADDPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 1935,
    XED_IFORM_V4FMADDSS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 1936,
    XED_IFORM_V4FNMADDPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 1937,
    XED_IFORM_V4FNMADDSS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 1938,
    XED_IFORM_VADDPD_XMMdq_XMMdq_MEMdq = 1939,
    XED_IFORM_VADDPD_XMMdq_XMMdq_XMMdq = 1940,
    XED_IFORM_VADDPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 1941,
    XED_IFORM_VADDPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 1942,
    XED_IFORM_VADDPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 1943,
    XED_IFORM_VADDPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 1944,
    XED_IFORM_VADDPD_YMMqq_YMMqq_MEMqq = 1945,
    XED_IFORM_VADDPD_YMMqq_YMMqq_YMMqq = 1946,
    XED_IFORM_VADDPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 1947,
    XED_IFORM_VADDPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 1948,
    XED_IFORM_VADDPS_XMMdq_XMMdq_MEMdq = 1949,
    XED_IFORM_VADDPS_XMMdq_XMMdq_XMMdq = 1950,
    XED_IFORM_VADDPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 1951,
    XED_IFORM_VADDPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 1952,
    XED_IFORM_VADDPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 1953,
    XED_IFORM_VADDPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 1954,
    XED_IFORM_VADDPS_YMMqq_YMMqq_MEMqq = 1955,
    XED_IFORM_VADDPS_YMMqq_YMMqq_YMMqq = 1956,
    XED_IFORM_VADDPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 1957,
    XED_IFORM_VADDPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 1958,
    XED_IFORM_VADDSD_XMMdq_XMMdq_MEMq = 1959,
    XED_IFORM_VADDSD_XMMdq_XMMdq_XMMq = 1960,
    XED_IFORM_VADDSD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 1961,
    XED_IFORM_VADDSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 1962,
    XED_IFORM_VADDSS_XMMdq_XMMdq_MEMd = 1963,
    XED_IFORM_VADDSS_XMMdq_XMMdq_XMMd = 1964,
    XED_IFORM_VADDSS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 1965,
    XED_IFORM_VADDSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 1966,
    XED_IFORM_VADDSUBPD_XMMdq_XMMdq_MEMdq = 1967,
    XED_IFORM_VADDSUBPD_XMMdq_XMMdq_XMMdq = 1968,
    XED_IFORM_VADDSUBPD_YMMqq_YMMqq_MEMqq = 1969,
    XED_IFORM_VADDSUBPD_YMMqq_YMMqq_YMMqq = 1970,
    XED_IFORM_VADDSUBPS_XMMdq_XMMdq_MEMdq = 1971,
    XED_IFORM_VADDSUBPS_XMMdq_XMMdq_XMMdq = 1972,
    XED_IFORM_VADDSUBPS_YMMqq_YMMqq_MEMqq = 1973,
    XED_IFORM_VADDSUBPS_YMMqq_YMMqq_YMMqq = 1974,
    XED_IFORM_VAESDEC_XMMdq_XMMdq_MEMdq = 1975,
    XED_IFORM_VAESDEC_XMMdq_XMMdq_XMMdq = 1976,
    XED_IFORM_VAESDECLAST_XMMdq_XMMdq_MEMdq = 1977,
    XED_IFORM_VAESDECLAST_XMMdq_XMMdq_XMMdq = 1978,
    XED_IFORM_VAESENC_XMMdq_XMMdq_MEMdq = 1979,
    XED_IFORM_VAESENC_XMMdq_XMMdq_XMMdq = 1980,
    XED_IFORM_VAESENCLAST_XMMdq_XMMdq_MEMdq = 1981,
    XED_IFORM_VAESENCLAST_XMMdq_XMMdq_XMMdq = 1982,
    XED_IFORM_VAESIMC_XMMdq_MEMdq = 1983,
    XED_IFORM_VAESIMC_XMMdq_XMMdq = 1984,
    XED_IFORM_VAESKEYGENASSIST_XMMdq_MEMdq_IMMb = 1985,
    XED_IFORM_VAESKEYGENASSIST_XMMdq_XMMdq_IMMb = 1986,
    XED_IFORM_VALIGND_XMMu32_MASKmskw_XMMu32_MEMu32_IMM8_AVX512 = 1987,
    XED_IFORM_VALIGND_XMMu32_MASKmskw_XMMu32_XMMu32_IMM8_AVX512 = 1988,
    XED_IFORM_VALIGND_YMMu32_MASKmskw_YMMu32_MEMu32_IMM8_AVX512 = 1989,
    XED_IFORM_VALIGND_YMMu32_MASKmskw_YMMu32_YMMu32_IMM8_AVX512 = 1990,
    XED_IFORM_VALIGND_ZMMu32_MASKmskw_ZMMu32_MEMu32_IMM8_AVX512 = 1991,
    XED_IFORM_VALIGND_ZMMu32_MASKmskw_ZMMu32_ZMMu32_IMM8_AVX512 = 1992,
    XED_IFORM_VALIGNQ_XMMu64_MASKmskw_XMMu64_MEMu64_IMM8_AVX512 = 1993,
    XED_IFORM_VALIGNQ_XMMu64_MASKmskw_XMMu64_XMMu64_IMM8_AVX512 = 1994,
    XED_IFORM_VALIGNQ_YMMu64_MASKmskw_YMMu64_MEMu64_IMM8_AVX512 = 1995,
    XED_IFORM_VALIGNQ_YMMu64_MASKmskw_YMMu64_YMMu64_IMM8_AVX512 = 1996,
    XED_IFORM_VALIGNQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_IMM8_AVX512 = 1997,
    XED_IFORM_VALIGNQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_IMM8_AVX512 = 1998,
    XED_IFORM_VANDNPD_XMMdq_XMMdq_MEMdq = 1999,
    XED_IFORM_VANDNPD_XMMdq_XMMdq_XMMdq = 2000,
    XED_IFORM_VANDNPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2001,
    XED_IFORM_VANDNPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2002,
    XED_IFORM_VANDNPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2003,
    XED_IFORM_VANDNPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2004,
    XED_IFORM_VANDNPD_YMMqq_YMMqq_MEMqq = 2005,
    XED_IFORM_VANDNPD_YMMqq_YMMqq_YMMqq = 2006,
    XED_IFORM_VANDNPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2007,
    XED_IFORM_VANDNPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2008,
    XED_IFORM_VANDNPS_XMMdq_XMMdq_MEMdq = 2009,
    XED_IFORM_VANDNPS_XMMdq_XMMdq_XMMdq = 2010,
    XED_IFORM_VANDNPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2011,
    XED_IFORM_VANDNPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2012,
    XED_IFORM_VANDNPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2013,
    XED_IFORM_VANDNPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2014,
    XED_IFORM_VANDNPS_YMMqq_YMMqq_MEMqq = 2015,
    XED_IFORM_VANDNPS_YMMqq_YMMqq_YMMqq = 2016,
    XED_IFORM_VANDNPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2017,
    XED_IFORM_VANDNPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2018,
    XED_IFORM_VANDPD_XMMdq_XMMdq_MEMdq = 2019,
    XED_IFORM_VANDPD_XMMdq_XMMdq_XMMdq = 2020,
    XED_IFORM_VANDPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2021,
    XED_IFORM_VANDPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2022,
    XED_IFORM_VANDPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2023,
    XED_IFORM_VANDPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2024,
    XED_IFORM_VANDPD_YMMqq_YMMqq_MEMqq = 2025,
    XED_IFORM_VANDPD_YMMqq_YMMqq_YMMqq = 2026,
    XED_IFORM_VANDPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2027,
    XED_IFORM_VANDPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2028,
    XED_IFORM_VANDPS_XMMdq_XMMdq_MEMdq = 2029,
    XED_IFORM_VANDPS_XMMdq_XMMdq_XMMdq = 2030,
    XED_IFORM_VANDPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2031,
    XED_IFORM_VANDPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2032,
    XED_IFORM_VANDPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2033,
    XED_IFORM_VANDPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2034,
    XED_IFORM_VANDPS_YMMqq_YMMqq_MEMqq = 2035,
    XED_IFORM_VANDPS_YMMqq_YMMqq_YMMqq = 2036,
    XED_IFORM_VANDPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2037,
    XED_IFORM_VANDPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2038,
    XED_IFORM_VBLENDMPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2039,
    XED_IFORM_VBLENDMPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2040,
    XED_IFORM_VBLENDMPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2041,
    XED_IFORM_VBLENDMPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2042,
    XED_IFORM_VBLENDMPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2043,
    XED_IFORM_VBLENDMPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2044,
    XED_IFORM_VBLENDMPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2045,
    XED_IFORM_VBLENDMPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2046,
    XED_IFORM_VBLENDMPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2047,
    XED_IFORM_VBLENDMPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2048,
    XED_IFORM_VBLENDMPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2049,
    XED_IFORM_VBLENDMPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2050,
    XED_IFORM_VBLENDPD_XMMdq_XMMdq_MEMdq_IMMb = 2051,
    XED_IFORM_VBLENDPD_XMMdq_XMMdq_XMMdq_IMMb = 2052,
    XED_IFORM_VBLENDPD_YMMqq_YMMqq_MEMqq_IMMb = 2053,
    XED_IFORM_VBLENDPD_YMMqq_YMMqq_YMMqq_IMMb = 2054,
    XED_IFORM_VBLENDPS_XMMdq_XMMdq_MEMdq_IMMb = 2055,
    XED_IFORM_VBLENDPS_XMMdq_XMMdq_XMMdq_IMMb = 2056,
    XED_IFORM_VBLENDPS_YMMqq_YMMqq_MEMqq_IMMb = 2057,
    XED_IFORM_VBLENDPS_YMMqq_YMMqq_YMMqq_IMMb = 2058,
    XED_IFORM_VBLENDVPD_XMMdq_XMMdq_MEMdq_XMMdq = 2059,
    XED_IFORM_VBLENDVPD_XMMdq_XMMdq_XMMdq_XMMdq = 2060,
    XED_IFORM_VBLENDVPD_YMMqq_YMMqq_MEMqq_YMMqq = 2061,
    XED_IFORM_VBLENDVPD_YMMqq_YMMqq_YMMqq_YMMqq = 2062,
    XED_IFORM_VBLENDVPS_XMMdq_XMMdq_MEMdq_XMMdq = 2063,
    XED_IFORM_VBLENDVPS_XMMdq_XMMdq_XMMdq_XMMdq = 2064,
    XED_IFORM_VBLENDVPS_YMMqq_YMMqq_MEMqq_YMMqq = 2065,
    XED_IFORM_VBLENDVPS_YMMqq_YMMqq_YMMqq_YMMqq = 2066,
    XED_IFORM_VBROADCASTF128_YMMqq_MEMdq = 2067,
    XED_IFORM_VBROADCASTF32X2_YMMf32_MASKmskw_MEMf32_AVX512 = 2068,
    XED_IFORM_VBROADCASTF32X2_YMMf32_MASKmskw_XMMf32_AVX512 = 2069,
    XED_IFORM_VBROADCASTF32X2_ZMMf32_MASKmskw_MEMf32_AVX512 = 2070,
    XED_IFORM_VBROADCASTF32X2_ZMMf32_MASKmskw_XMMf32_AVX512 = 2071,
    XED_IFORM_VBROADCASTF32X4_YMMf32_MASKmskw_MEMf32_AVX512 = 2072,
    XED_IFORM_VBROADCASTF32X4_ZMMf32_MASKmskw_MEMf32_AVX512 = 2073,
    XED_IFORM_VBROADCASTF32X8_ZMMf32_MASKmskw_MEMf32_AVX512 = 2074,
    XED_IFORM_VBROADCASTF64X2_YMMf64_MASKmskw_MEMf64_AVX512 = 2075,
    XED_IFORM_VBROADCASTF64X2_ZMMf64_MASKmskw_MEMf64_AVX512 = 2076,
    XED_IFORM_VBROADCASTF64X4_ZMMf64_MASKmskw_MEMf64_AVX512 = 2077,
    XED_IFORM_VBROADCASTI128_YMMqq_MEMdq = 2078,
    XED_IFORM_VBROADCASTI32X2_XMMu32_MASKmskw_MEMu32_AVX512 = 2079,
    XED_IFORM_VBROADCASTI32X2_XMMu32_MASKmskw_XMMu32_AVX512 = 2080,
    XED_IFORM_VBROADCASTI32X2_YMMu32_MASKmskw_MEMu32_AVX512 = 2081,
    XED_IFORM_VBROADCASTI32X2_YMMu32_MASKmskw_XMMu32_AVX512 = 2082,
    XED_IFORM_VBROADCASTI32X2_ZMMu32_MASKmskw_MEMu32_AVX512 = 2083,
    XED_IFORM_VBROADCASTI32X2_ZMMu32_MASKmskw_XMMu32_AVX512 = 2084,
    XED_IFORM_VBROADCASTI32X4_YMMu32_MASKmskw_MEMu32_AVX512 = 2085,
    XED_IFORM_VBROADCASTI32X4_ZMMu32_MASKmskw_MEMu32_AVX512 = 2086,
    XED_IFORM_VBROADCASTI32X8_ZMMu32_MASKmskw_MEMu32_AVX512 = 2087,
    XED_IFORM_VBROADCASTI64X2_YMMu64_MASKmskw_MEMu64_AVX512 = 2088,
    XED_IFORM_VBROADCASTI64X2_ZMMu64_MASKmskw_MEMu64_AVX512 = 2089,
    XED_IFORM_VBROADCASTI64X4_ZMMu64_MASKmskw_MEMu64_AVX512 = 2090,
    XED_IFORM_VBROADCASTSD_YMMf64_MASKmskw_MEMf64_AVX512 = 2091,
    XED_IFORM_VBROADCASTSD_YMMf64_MASKmskw_XMMf64_AVX512 = 2092,
    XED_IFORM_VBROADCASTSD_YMMqq_MEMq = 2093,
    XED_IFORM_VBROADCASTSD_YMMqq_XMMdq = 2094,
    XED_IFORM_VBROADCASTSD_ZMMf64_MASKmskw_MEMf64_AVX512 = 2095,
    XED_IFORM_VBROADCASTSD_ZMMf64_MASKmskw_XMMf64_AVX512 = 2096,
    XED_IFORM_VBROADCASTSS_XMMdq_MEMd = 2097,
    XED_IFORM_VBROADCASTSS_XMMdq_XMMdq = 2098,
    XED_IFORM_VBROADCASTSS_XMMf32_MASKmskw_MEMf32_AVX512 = 2099,
    XED_IFORM_VBROADCASTSS_XMMf32_MASKmskw_XMMf32_AVX512 = 2100,
    XED_IFORM_VBROADCASTSS_YMMf32_MASKmskw_MEMf32_AVX512 = 2101,
    XED_IFORM_VBROADCASTSS_YMMf32_MASKmskw_XMMf32_AVX512 = 2102,
    XED_IFORM_VBROADCASTSS_YMMqq_MEMd = 2103,
    XED_IFORM_VBROADCASTSS_YMMqq_XMMdq = 2104,
    XED_IFORM_VBROADCASTSS_ZMMf32_MASKmskw_MEMf32_AVX512 = 2105,
    XED_IFORM_VBROADCASTSS_ZMMf32_MASKmskw_XMMf32_AVX512 = 2106,
    XED_IFORM_VCMPPD_MASKmskw_MASKmskw_XMMf64_MEMf64_IMM8_AVX512 = 2107,
    XED_IFORM_VCMPPD_MASKmskw_MASKmskw_XMMf64_XMMf64_IMM8_AVX512 = 2108,
    XED_IFORM_VCMPPD_MASKmskw_MASKmskw_YMMf64_MEMf64_IMM8_AVX512 = 2109,
    XED_IFORM_VCMPPD_MASKmskw_MASKmskw_YMMf64_YMMf64_IMM8_AVX512 = 2110,
    XED_IFORM_VCMPPD_MASKmskw_MASKmskw_ZMMf64_MEMf64_IMM8_AVX512 = 2111,
    XED_IFORM_VCMPPD_MASKmskw_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512 = 2112,
    XED_IFORM_VCMPPD_XMMdq_XMMdq_MEMdq_IMMb = 2113,
    XED_IFORM_VCMPPD_XMMdq_XMMdq_XMMdq_IMMb = 2114,
    XED_IFORM_VCMPPD_YMMqq_YMMqq_MEMqq_IMMb = 2115,
    XED_IFORM_VCMPPD_YMMqq_YMMqq_YMMqq_IMMb = 2116,
    XED_IFORM_VCMPPS_MASKmskw_MASKmskw_XMMf32_MEMf32_IMM8_AVX512 = 2117,
    XED_IFORM_VCMPPS_MASKmskw_MASKmskw_XMMf32_XMMf32_IMM8_AVX512 = 2118,
    XED_IFORM_VCMPPS_MASKmskw_MASKmskw_YMMf32_MEMf32_IMM8_AVX512 = 2119,
    XED_IFORM_VCMPPS_MASKmskw_MASKmskw_YMMf32_YMMf32_IMM8_AVX512 = 2120,
    XED_IFORM_VCMPPS_MASKmskw_MASKmskw_ZMMf32_MEMf32_IMM8_AVX512 = 2121,
    XED_IFORM_VCMPPS_MASKmskw_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512 = 2122,
    XED_IFORM_VCMPPS_XMMdq_XMMdq_MEMdq_IMMb = 2123,
    XED_IFORM_VCMPPS_XMMdq_XMMdq_XMMdq_IMMb = 2124,
    XED_IFORM_VCMPPS_YMMqq_YMMqq_MEMqq_IMMb = 2125,
    XED_IFORM_VCMPPS_YMMqq_YMMqq_YMMqq_IMMb = 2126,
    XED_IFORM_VCMPSD_MASKmskw_MASKmskw_XMMf64_MEMf64_IMM8_AVX512 = 2127,
    XED_IFORM_VCMPSD_MASKmskw_MASKmskw_XMMf64_XMMf64_IMM8_AVX512 = 2128,
    XED_IFORM_VCMPSD_XMMdq_XMMdq_MEMq_IMMb = 2129,
    XED_IFORM_VCMPSD_XMMdq_XMMdq_XMMq_IMMb = 2130,
    XED_IFORM_VCMPSS_MASKmskw_MASKmskw_XMMf32_MEMf32_IMM8_AVX512 = 2131,
    XED_IFORM_VCMPSS_MASKmskw_MASKmskw_XMMf32_XMMf32_IMM8_AVX512 = 2132,
    XED_IFORM_VCMPSS_XMMdq_XMMdq_MEMd_IMMb = 2133,
    XED_IFORM_VCMPSS_XMMdq_XMMdq_XMMd_IMMb = 2134,
    XED_IFORM_VCOMISD_XMMf64_MEMf64_AVX512 = 2135,
    XED_IFORM_VCOMISD_XMMf64_XMMf64_AVX512 = 2136,
    XED_IFORM_VCOMISD_XMMq_MEMq = 2137,
    XED_IFORM_VCOMISD_XMMq_XMMq = 2138,
    XED_IFORM_VCOMISS_XMMd_MEMd = 2139,
    XED_IFORM_VCOMISS_XMMd_XMMd = 2140,
    XED_IFORM_VCOMISS_XMMf32_MEMf32_AVX512 = 2141,
    XED_IFORM_VCOMISS_XMMf32_XMMf32_AVX512 = 2142,
    XED_IFORM_VCOMPRESSPD_MEMf64_MASKmskw_XMMf64_AVX512 = 2143,
    XED_IFORM_VCOMPRESSPD_MEMf64_MASKmskw_YMMf64_AVX512 = 2144,
    XED_IFORM_VCOMPRESSPD_MEMf64_MASKmskw_ZMMf64_AVX512 = 2145,
    XED_IFORM_VCOMPRESSPD_XMMf64_MASKmskw_XMMf64_AVX512 = 2146,
    XED_IFORM_VCOMPRESSPD_YMMf64_MASKmskw_YMMf64_AVX512 = 2147,
    XED_IFORM_VCOMPRESSPD_ZMMf64_MASKmskw_ZMMf64_AVX512 = 2148,
    XED_IFORM_VCOMPRESSPS_MEMf32_MASKmskw_XMMf32_AVX512 = 2149,
    XED_IFORM_VCOMPRESSPS_MEMf32_MASKmskw_YMMf32_AVX512 = 2150,
    XED_IFORM_VCOMPRESSPS_MEMf32_MASKmskw_ZMMf32_AVX512 = 2151,
    XED_IFORM_VCOMPRESSPS_XMMf32_MASKmskw_XMMf32_AVX512 = 2152,
    XED_IFORM_VCOMPRESSPS_YMMf32_MASKmskw_YMMf32_AVX512 = 2153,
    XED_IFORM_VCOMPRESSPS_ZMMf32_MASKmskw_ZMMf32_AVX512 = 2154,
    XED_IFORM_VCVTDQ2PD_XMMdq_MEMq = 2155,
    XED_IFORM_VCVTDQ2PD_XMMdq_XMMq = 2156,
    XED_IFORM_VCVTDQ2PD_XMMf64_MASKmskw_MEMi32_AVX512 = 2157,
    XED_IFORM_VCVTDQ2PD_XMMf64_MASKmskw_XMMi32_AVX512 = 2158,
    XED_IFORM_VCVTDQ2PD_YMMf64_MASKmskw_MEMi32_AVX512 = 2159,
    XED_IFORM_VCVTDQ2PD_YMMf64_MASKmskw_XMMi32_AVX512 = 2160,
    XED_IFORM_VCVTDQ2PD_YMMqq_MEMdq = 2161,
    XED_IFORM_VCVTDQ2PD_YMMqq_XMMdq = 2162,
    XED_IFORM_VCVTDQ2PD_ZMMf64_MASKmskw_MEMi32_AVX512 = 2163,
    XED_IFORM_VCVTDQ2PD_ZMMf64_MASKmskw_YMMi32_AVX512 = 2164,
    XED_IFORM_VCVTDQ2PS_XMMdq_MEMdq = 2165,
    XED_IFORM_VCVTDQ2PS_XMMdq_XMMdq = 2166,
    XED_IFORM_VCVTDQ2PS_XMMf32_MASKmskw_MEMi32_AVX512 = 2167,
    XED_IFORM_VCVTDQ2PS_XMMf32_MASKmskw_XMMi32_AVX512 = 2168,
    XED_IFORM_VCVTDQ2PS_YMMf32_MASKmskw_MEMi32_AVX512 = 2169,
    XED_IFORM_VCVTDQ2PS_YMMf32_MASKmskw_YMMi32_AVX512 = 2170,
    XED_IFORM_VCVTDQ2PS_YMMqq_MEMqq = 2171,
    XED_IFORM_VCVTDQ2PS_YMMqq_YMMqq = 2172,
    XED_IFORM_VCVTDQ2PS_ZMMf32_MASKmskw_MEMi32_AVX512 = 2173,
    XED_IFORM_VCVTDQ2PS_ZMMf32_MASKmskw_ZMMi32_AVX512 = 2174,
    XED_IFORM_VCVTPD2DQ_XMMdq_MEMdq = 2175,
    XED_IFORM_VCVTPD2DQ_XMMdq_MEMqq = 2176,
    XED_IFORM_VCVTPD2DQ_XMMdq_XMMdq = 2177,
    XED_IFORM_VCVTPD2DQ_XMMdq_YMMqq = 2178,
    XED_IFORM_VCVTPD2DQ_XMMi32_MASKmskw_MEMf64_AVX512_VL128 = 2179,
    XED_IFORM_VCVTPD2DQ_XMMi32_MASKmskw_MEMf64_AVX512_VL256 = 2180,
    XED_IFORM_VCVTPD2DQ_XMMi32_MASKmskw_XMMf64_AVX512_VL128 = 2181,
    XED_IFORM_VCVTPD2DQ_XMMi32_MASKmskw_YMMf64_AVX512_VL256 = 2182,
    XED_IFORM_VCVTPD2DQ_YMMi32_MASKmskw_MEMf64_AVX512_VL512 = 2183,
    XED_IFORM_VCVTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512 = 2184,
    XED_IFORM_VCVTPD2PS_XMMdq_MEMdq = 2185,
    XED_IFORM_VCVTPD2PS_XMMdq_MEMqq = 2186,
    XED_IFORM_VCVTPD2PS_XMMdq_XMMdq = 2187,
    XED_IFORM_VCVTPD2PS_XMMdq_YMMqq = 2188,
    XED_IFORM_VCVTPD2PS_XMMf32_MASKmskw_MEMf64_AVX512_VL128 = 2189,
    XED_IFORM_VCVTPD2PS_XMMf32_MASKmskw_MEMf64_AVX512_VL256 = 2190,
    XED_IFORM_VCVTPD2PS_XMMf32_MASKmskw_XMMf64_AVX512_VL128 = 2191,
    XED_IFORM_VCVTPD2PS_XMMf32_MASKmskw_YMMf64_AVX512_VL256 = 2192,
    XED_IFORM_VCVTPD2PS_YMMf32_MASKmskw_MEMf64_AVX512_VL512 = 2193,
    XED_IFORM_VCVTPD2PS_YMMf32_MASKmskw_ZMMf64_AVX512_VL512 = 2194,
    XED_IFORM_VCVTPD2QQ_XMMi64_MASKmskw_MEMf64_AVX512 = 2195,
    XED_IFORM_VCVTPD2QQ_XMMi64_MASKmskw_XMMf64_AVX512 = 2196,
    XED_IFORM_VCVTPD2QQ_YMMi64_MASKmskw_MEMf64_AVX512 = 2197,
    XED_IFORM_VCVTPD2QQ_YMMi64_MASKmskw_YMMf64_AVX512 = 2198,
    XED_IFORM_VCVTPD2QQ_ZMMi64_MASKmskw_MEMf64_AVX512 = 2199,
    XED_IFORM_VCVTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512 = 2200,
    XED_IFORM_VCVTPD2UDQ_XMMu32_MASKmskw_MEMf64_AVX512_VL128 = 2201,
    XED_IFORM_VCVTPD2UDQ_XMMu32_MASKmskw_MEMf64_AVX512_VL256 = 2202,
    XED_IFORM_VCVTPD2UDQ_XMMu32_MASKmskw_XMMf64_AVX512_VL128 = 2203,
    XED_IFORM_VCVTPD2UDQ_XMMu32_MASKmskw_YMMf64_AVX512_VL256 = 2204,
    XED_IFORM_VCVTPD2UDQ_YMMu32_MASKmskw_MEMf64_AVX512_VL512 = 2205,
    XED_IFORM_VCVTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512 = 2206,
    XED_IFORM_VCVTPD2UQQ_XMMu64_MASKmskw_MEMf64_AVX512 = 2207,
    XED_IFORM_VCVTPD2UQQ_XMMu64_MASKmskw_XMMf64_AVX512 = 2208,
    XED_IFORM_VCVTPD2UQQ_YMMu64_MASKmskw_MEMf64_AVX512 = 2209,
    XED_IFORM_VCVTPD2UQQ_YMMu64_MASKmskw_YMMf64_AVX512 = 2210,
    XED_IFORM_VCVTPD2UQQ_ZMMu64_MASKmskw_MEMf64_AVX512 = 2211,
    XED_IFORM_VCVTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512 = 2212,
    XED_IFORM_VCVTPH2PS_XMMdq_MEMq = 2213,
    XED_IFORM_VCVTPH2PS_XMMdq_XMMq = 2214,
    XED_IFORM_VCVTPH2PS_XMMf32_MASKmskw_MEMf16_AVX512 = 2215,
    XED_IFORM_VCVTPH2PS_XMMf32_MASKmskw_XMMf16_AVX512 = 2216,
    XED_IFORM_VCVTPH2PS_YMMf32_MASKmskw_MEMf16_AVX512 = 2217,
    XED_IFORM_VCVTPH2PS_YMMf32_MASKmskw_XMMf16_AVX512 = 2218,
    XED_IFORM_VCVTPH2PS_YMMqq_MEMdq = 2219,
    XED_IFORM_VCVTPH2PS_YMMqq_XMMdq = 2220,
    XED_IFORM_VCVTPH2PS_ZMMf32_MASKmskw_MEMf16_AVX512 = 2221,
    XED_IFORM_VCVTPH2PS_ZMMf32_MASKmskw_YMMf16_AVX512 = 2222,
    XED_IFORM_VCVTPS2DQ_XMMdq_MEMdq = 2223,
    XED_IFORM_VCVTPS2DQ_XMMdq_XMMdq = 2224,
    XED_IFORM_VCVTPS2DQ_XMMi32_MASKmskw_MEMf32_AVX512 = 2225,
    XED_IFORM_VCVTPS2DQ_XMMi32_MASKmskw_XMMf32_AVX512 = 2226,
    XED_IFORM_VCVTPS2DQ_YMMi32_MASKmskw_MEMf32_AVX512 = 2227,
    XED_IFORM_VCVTPS2DQ_YMMi32_MASKmskw_YMMf32_AVX512 = 2228,
    XED_IFORM_VCVTPS2DQ_YMMqq_MEMqq = 2229,
    XED_IFORM_VCVTPS2DQ_YMMqq_YMMqq = 2230,
    XED_IFORM_VCVTPS2DQ_ZMMi32_MASKmskw_MEMf32_AVX512 = 2231,
    XED_IFORM_VCVTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512 = 2232,
    XED_IFORM_VCVTPS2PD_XMMdq_MEMq = 2233,
    XED_IFORM_VCVTPS2PD_XMMdq_XMMq = 2234,
    XED_IFORM_VCVTPS2PD_XMMf64_MASKmskw_MEMf32_AVX512 = 2235,
    XED_IFORM_VCVTPS2PD_XMMf64_MASKmskw_XMMf32_AVX512 = 2236,
    XED_IFORM_VCVTPS2PD_YMMf64_MASKmskw_MEMf32_AVX512 = 2237,
    XED_IFORM_VCVTPS2PD_YMMf64_MASKmskw_XMMf32_AVX512 = 2238,
    XED_IFORM_VCVTPS2PD_YMMqq_MEMdq = 2239,
    XED_IFORM_VCVTPS2PD_YMMqq_XMMdq = 2240,
    XED_IFORM_VCVTPS2PD_ZMMf64_MASKmskw_MEMf32_AVX512 = 2241,
    XED_IFORM_VCVTPS2PD_ZMMf64_MASKmskw_YMMf32_AVX512 = 2242,
    XED_IFORM_VCVTPS2PH_MEMdq_YMMqq_IMMb = 2243,
    XED_IFORM_VCVTPS2PH_MEMf16_MASKmskw_XMMf32_IMM8_AVX512 = 2244,
    XED_IFORM_VCVTPS2PH_MEMf16_MASKmskw_YMMf32_IMM8_AVX512 = 2245,
    XED_IFORM_VCVTPS2PH_MEMf16_MASKmskw_ZMMf32_IMM8_AVX512 = 2246,
    XED_IFORM_VCVTPS2PH_MEMq_XMMdq_IMMb = 2247,
    XED_IFORM_VCVTPS2PH_XMMdq_YMMqq_IMMb = 2248,
    XED_IFORM_VCVTPS2PH_XMMf16_MASKmskw_XMMf32_IMM8_AVX512 = 2249,
    XED_IFORM_VCVTPS2PH_XMMf16_MASKmskw_YMMf32_IMM8_AVX512 = 2250,
    XED_IFORM_VCVTPS2PH_XMMq_XMMdq_IMMb = 2251,
    XED_IFORM_VCVTPS2PH_YMMf16_MASKmskw_ZMMf32_IMM8_AVX512 = 2252,
    XED_IFORM_VCVTPS2QQ_XMMi64_MASKmskw_MEMf32_AVX512 = 2253,
    XED_IFORM_VCVTPS2QQ_XMMi64_MASKmskw_XMMf32_AVX512 = 2254,
    XED_IFORM_VCVTPS2QQ_YMMi64_MASKmskw_MEMf32_AVX512 = 2255,
    XED_IFORM_VCVTPS2QQ_YMMi64_MASKmskw_XMMf32_AVX512 = 2256,
    XED_IFORM_VCVTPS2QQ_ZMMi64_MASKmskw_MEMf32_AVX512 = 2257,
    XED_IFORM_VCVTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512 = 2258,
    XED_IFORM_VCVTPS2UDQ_XMMu32_MASKmskw_MEMf32_AVX512 = 2259,
    XED_IFORM_VCVTPS2UDQ_XMMu32_MASKmskw_XMMf32_AVX512 = 2260,
    XED_IFORM_VCVTPS2UDQ_YMMu32_MASKmskw_MEMf32_AVX512 = 2261,
    XED_IFORM_VCVTPS2UDQ_YMMu32_MASKmskw_YMMf32_AVX512 = 2262,
    XED_IFORM_VCVTPS2UDQ_ZMMu32_MASKmskw_MEMf32_AVX512 = 2263,
    XED_IFORM_VCVTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512 = 2264,
    XED_IFORM_VCVTPS2UQQ_XMMu64_MASKmskw_MEMf32_AVX512 = 2265,
    XED_IFORM_VCVTPS2UQQ_XMMu64_MASKmskw_XMMf32_AVX512 = 2266,
    XED_IFORM_VCVTPS2UQQ_YMMu64_MASKmskw_MEMf32_AVX512 = 2267,
    XED_IFORM_VCVTPS2UQQ_YMMu64_MASKmskw_XMMf32_AVX512 = 2268,
    XED_IFORM_VCVTPS2UQQ_ZMMu64_MASKmskw_MEMf32_AVX512 = 2269,
    XED_IFORM_VCVTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512 = 2270,
    XED_IFORM_VCVTQQ2PD_XMMi64_MASKmskw_MEMf64_AVX512 = 2271,
    XED_IFORM_VCVTQQ2PD_XMMi64_MASKmskw_XMMf64_AVX512 = 2272,
    XED_IFORM_VCVTQQ2PD_YMMi64_MASKmskw_MEMf64_AVX512 = 2273,
    XED_IFORM_VCVTQQ2PD_YMMi64_MASKmskw_YMMf64_AVX512 = 2274,
    XED_IFORM_VCVTQQ2PD_ZMMi64_MASKmskw_MEMf64_AVX512 = 2275,
    XED_IFORM_VCVTQQ2PD_ZMMi64_MASKmskw_ZMMf64_AVX512 = 2276,
    XED_IFORM_VCVTQQ2PS_XMMf32_MASKmskw_MEMu64_AVX512_VL128 = 2277,
    XED_IFORM_VCVTQQ2PS_XMMf32_MASKmskw_MEMu64_AVX512_VL256 = 2278,
    XED_IFORM_VCVTQQ2PS_XMMf32_MASKmskw_XMMu64_AVX512_VL128 = 2279,
    XED_IFORM_VCVTQQ2PS_XMMf32_MASKmskw_YMMu64_AVX512_VL256 = 2280,
    XED_IFORM_VCVTQQ2PS_YMMf32_MASKmskw_MEMu64_AVX512_VL512 = 2281,
    XED_IFORM_VCVTQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512 = 2282,
    XED_IFORM_VCVTSD2SI_GPR32d_MEMq = 2283,
    XED_IFORM_VCVTSD2SI_GPR32d_XMMq = 2284,
    XED_IFORM_VCVTSD2SI_GPR32i32_MEMf64_AVX512 = 2285,
    XED_IFORM_VCVTSD2SI_GPR32i32_XMMf64_AVX512 = 2286,
    XED_IFORM_VCVTSD2SI_GPR64i64_MEMf64_AVX512 = 2287,
    XED_IFORM_VCVTSD2SI_GPR64i64_XMMf64_AVX512 = 2288,
    XED_IFORM_VCVTSD2SI_GPR64q_MEMq = 2289,
    XED_IFORM_VCVTSD2SI_GPR64q_XMMq = 2290,
    XED_IFORM_VCVTSD2SS_XMMdq_XMMdq_MEMq = 2291,
    XED_IFORM_VCVTSD2SS_XMMdq_XMMdq_XMMq = 2292,
    XED_IFORM_VCVTSD2SS_XMMf32_MASKmskw_XMMf64_MEMf64_AVX512 = 2293,
    XED_IFORM_VCVTSD2SS_XMMf32_MASKmskw_XMMf64_XMMf64_AVX512 = 2294,
    XED_IFORM_VCVTSD2USI_GPR32u32_MEMf64_AVX512 = 2295,
    XED_IFORM_VCVTSD2USI_GPR32u32_XMMf64_AVX512 = 2296,
    XED_IFORM_VCVTSD2USI_GPR64u64_MEMf64_AVX512 = 2297,
    XED_IFORM_VCVTSD2USI_GPR64u64_XMMf64_AVX512 = 2298,
    XED_IFORM_VCVTSI2SD_XMMdq_XMMdq_GPR32d = 2299,
    XED_IFORM_VCVTSI2SD_XMMdq_XMMdq_GPR64q = 2300,
    XED_IFORM_VCVTSI2SD_XMMdq_XMMdq_MEMd = 2301,
    XED_IFORM_VCVTSI2SD_XMMdq_XMMdq_MEMq = 2302,
    XED_IFORM_VCVTSI2SD_XMMf64_XMMf64_GPR32i32_AVX512 = 2303,
    XED_IFORM_VCVTSI2SD_XMMf64_XMMf64_GPR64i64_AVX512 = 2304,
    XED_IFORM_VCVTSI2SD_XMMf64_XMMf64_MEMi32_AVX512 = 2305,
    XED_IFORM_VCVTSI2SD_XMMf64_XMMf64_MEMi64_AVX512 = 2306,
    XED_IFORM_VCVTSI2SS_XMMdq_XMMdq_GPR32d = 2307,
    XED_IFORM_VCVTSI2SS_XMMdq_XMMdq_GPR64q = 2308,
    XED_IFORM_VCVTSI2SS_XMMdq_XMMdq_MEMd = 2309,
    XED_IFORM_VCVTSI2SS_XMMdq_XMMdq_MEMq = 2310,
    XED_IFORM_VCVTSI2SS_XMMf32_XMMf32_GPR32i32_AVX512 = 2311,
    XED_IFORM_VCVTSI2SS_XMMf32_XMMf32_GPR64i64_AVX512 = 2312,
    XED_IFORM_VCVTSI2SS_XMMf32_XMMf32_MEMi32_AVX512 = 2313,
    XED_IFORM_VCVTSI2SS_XMMf32_XMMf32_MEMi64_AVX512 = 2314,
    XED_IFORM_VCVTSS2SD_XMMdq_XMMdq_MEMd = 2315,
    XED_IFORM_VCVTSS2SD_XMMdq_XMMdq_XMMd = 2316,
    XED_IFORM_VCVTSS2SD_XMMf64_MASKmskw_XMMf32_MEMf32_AVX512 = 2317,
    XED_IFORM_VCVTSS2SD_XMMf64_MASKmskw_XMMf32_XMMf32_AVX512 = 2318,
    XED_IFORM_VCVTSS2SI_GPR32d_MEMd = 2319,
    XED_IFORM_VCVTSS2SI_GPR32d_XMMd = 2320,
    XED_IFORM_VCVTSS2SI_GPR32i32_MEMf32_AVX512 = 2321,
    XED_IFORM_VCVTSS2SI_GPR32i32_XMMf32_AVX512 = 2322,
    XED_IFORM_VCVTSS2SI_GPR64i64_MEMf32_AVX512 = 2323,
    XED_IFORM_VCVTSS2SI_GPR64i64_XMMf32_AVX512 = 2324,
    XED_IFORM_VCVTSS2SI_GPR64q_MEMd = 2325,
    XED_IFORM_VCVTSS2SI_GPR64q_XMMd = 2326,
    XED_IFORM_VCVTSS2USI_GPR32u32_MEMf32_AVX512 = 2327,
    XED_IFORM_VCVTSS2USI_GPR32u32_XMMf32_AVX512 = 2328,
    XED_IFORM_VCVTSS2USI_GPR64u64_MEMf32_AVX512 = 2329,
    XED_IFORM_VCVTSS2USI_GPR64u64_XMMf32_AVX512 = 2330,
    XED_IFORM_VCVTTPD2DQ_XMMdq_MEMdq = 2331,
    XED_IFORM_VCVTTPD2DQ_XMMdq_MEMqq = 2332,
    XED_IFORM_VCVTTPD2DQ_XMMdq_XMMdq = 2333,
    XED_IFORM_VCVTTPD2DQ_XMMdq_YMMqq = 2334,
    XED_IFORM_VCVTTPD2DQ_XMMi32_MASKmskw_MEMf64_AVX512_VL128 = 2335,
    XED_IFORM_VCVTTPD2DQ_XMMi32_MASKmskw_MEMf64_AVX512_VL256 = 2336,
    XED_IFORM_VCVTTPD2DQ_XMMi32_MASKmskw_XMMf64_AVX512_VL128 = 2337,
    XED_IFORM_VCVTTPD2DQ_XMMi32_MASKmskw_YMMf64_AVX512_VL256 = 2338,
    XED_IFORM_VCVTTPD2DQ_YMMi32_MASKmskw_MEMf64_AVX512_VL512 = 2339,
    XED_IFORM_VCVTTPD2DQ_YMMi32_MASKmskw_ZMMf64_AVX512_VL512 = 2340,
    XED_IFORM_VCVTTPD2QQ_XMMi64_MASKmskw_MEMf64_AVX512 = 2341,
    XED_IFORM_VCVTTPD2QQ_XMMi64_MASKmskw_XMMf64_AVX512 = 2342,
    XED_IFORM_VCVTTPD2QQ_YMMi64_MASKmskw_MEMf64_AVX512 = 2343,
    XED_IFORM_VCVTTPD2QQ_YMMi64_MASKmskw_YMMf64_AVX512 = 2344,
    XED_IFORM_VCVTTPD2QQ_ZMMi64_MASKmskw_MEMf64_AVX512 = 2345,
    XED_IFORM_VCVTTPD2QQ_ZMMi64_MASKmskw_ZMMf64_AVX512 = 2346,
    XED_IFORM_VCVTTPD2UDQ_XMMu32_MASKmskw_MEMf64_AVX512_VL128 = 2347,
    XED_IFORM_VCVTTPD2UDQ_XMMu32_MASKmskw_MEMf64_AVX512_VL256 = 2348,
    XED_IFORM_VCVTTPD2UDQ_XMMu32_MASKmskw_XMMf64_AVX512_VL128 = 2349,
    XED_IFORM_VCVTTPD2UDQ_XMMu32_MASKmskw_YMMf64_AVX512_VL256 = 2350,
    XED_IFORM_VCVTTPD2UDQ_YMMu32_MASKmskw_MEMf64_AVX512_VL512 = 2351,
    XED_IFORM_VCVTTPD2UDQ_YMMu32_MASKmskw_ZMMf64_AVX512_VL512 = 2352,
    XED_IFORM_VCVTTPD2UQQ_XMMu64_MASKmskw_MEMf64_AVX512 = 2353,
    XED_IFORM_VCVTTPD2UQQ_XMMu64_MASKmskw_XMMf64_AVX512 = 2354,
    XED_IFORM_VCVTTPD2UQQ_YMMu64_MASKmskw_MEMf64_AVX512 = 2355,
    XED_IFORM_VCVTTPD2UQQ_YMMu64_MASKmskw_YMMf64_AVX512 = 2356,
    XED_IFORM_VCVTTPD2UQQ_ZMMu64_MASKmskw_MEMf64_AVX512 = 2357,
    XED_IFORM_VCVTTPD2UQQ_ZMMu64_MASKmskw_ZMMf64_AVX512 = 2358,
    XED_IFORM_VCVTTPS2DQ_XMMdq_MEMdq = 2359,
    XED_IFORM_VCVTTPS2DQ_XMMdq_XMMdq = 2360,
    XED_IFORM_VCVTTPS2DQ_XMMi32_MASKmskw_MEMf32_AVX512 = 2361,
    XED_IFORM_VCVTTPS2DQ_XMMi32_MASKmskw_XMMf32_AVX512 = 2362,
    XED_IFORM_VCVTTPS2DQ_YMMi32_MASKmskw_MEMf32_AVX512 = 2363,
    XED_IFORM_VCVTTPS2DQ_YMMi32_MASKmskw_YMMf32_AVX512 = 2364,
    XED_IFORM_VCVTTPS2DQ_YMMqq_MEMqq = 2365,
    XED_IFORM_VCVTTPS2DQ_YMMqq_YMMqq = 2366,
    XED_IFORM_VCVTTPS2DQ_ZMMi32_MASKmskw_MEMf32_AVX512 = 2367,
    XED_IFORM_VCVTTPS2DQ_ZMMi32_MASKmskw_ZMMf32_AVX512 = 2368,
    XED_IFORM_VCVTTPS2QQ_XMMi64_MASKmskw_MEMf32_AVX512 = 2369,
    XED_IFORM_VCVTTPS2QQ_XMMi64_MASKmskw_XMMf32_AVX512 = 2370,
    XED_IFORM_VCVTTPS2QQ_YMMi64_MASKmskw_MEMf32_AVX512 = 2371,
    XED_IFORM_VCVTTPS2QQ_YMMi64_MASKmskw_XMMf32_AVX512 = 2372,
    XED_IFORM_VCVTTPS2QQ_ZMMi64_MASKmskw_MEMf32_AVX512 = 2373,
    XED_IFORM_VCVTTPS2QQ_ZMMi64_MASKmskw_YMMf32_AVX512 = 2374,
    XED_IFORM_VCVTTPS2UDQ_XMMu32_MASKmskw_MEMf32_AVX512 = 2375,
    XED_IFORM_VCVTTPS2UDQ_XMMu32_MASKmskw_XMMf32_AVX512 = 2376,
    XED_IFORM_VCVTTPS2UDQ_YMMu32_MASKmskw_MEMf32_AVX512 = 2377,
    XED_IFORM_VCVTTPS2UDQ_YMMu32_MASKmskw_YMMf32_AVX512 = 2378,
    XED_IFORM_VCVTTPS2UDQ_ZMMu32_MASKmskw_MEMf32_AVX512 = 2379,
    XED_IFORM_VCVTTPS2UDQ_ZMMu32_MASKmskw_ZMMf32_AVX512 = 2380,
    XED_IFORM_VCVTTPS2UQQ_XMMu64_MASKmskw_MEMf32_AVX512 = 2381,
    XED_IFORM_VCVTTPS2UQQ_XMMu64_MASKmskw_XMMf32_AVX512 = 2382,
    XED_IFORM_VCVTTPS2UQQ_YMMu64_MASKmskw_MEMf32_AVX512 = 2383,
    XED_IFORM_VCVTTPS2UQQ_YMMu64_MASKmskw_XMMf32_AVX512 = 2384,
    XED_IFORM_VCVTTPS2UQQ_ZMMu64_MASKmskw_MEMf32_AVX512 = 2385,
    XED_IFORM_VCVTTPS2UQQ_ZMMu64_MASKmskw_YMMf32_AVX512 = 2386,
    XED_IFORM_VCVTTSD2SI_GPR32d_MEMq = 2387,
    XED_IFORM_VCVTTSD2SI_GPR32d_XMMq = 2388,
    XED_IFORM_VCVTTSD2SI_GPR32i32_MEMf64_AVX512 = 2389,
    XED_IFORM_VCVTTSD2SI_GPR32i32_XMMf64_AVX512 = 2390,
    XED_IFORM_VCVTTSD2SI_GPR64i64_MEMf64_AVX512 = 2391,
    XED_IFORM_VCVTTSD2SI_GPR64i64_XMMf64_AVX512 = 2392,
    XED_IFORM_VCVTTSD2SI_GPR64q_MEMq = 2393,
    XED_IFORM_VCVTTSD2SI_GPR64q_XMMq = 2394,
    XED_IFORM_VCVTTSD2USI_GPR32u32_MEMf64_AVX512 = 2395,
    XED_IFORM_VCVTTSD2USI_GPR32u32_XMMf64_AVX512 = 2396,
    XED_IFORM_VCVTTSD2USI_GPR64u64_MEMf64_AVX512 = 2397,
    XED_IFORM_VCVTTSD2USI_GPR64u64_XMMf64_AVX512 = 2398,
    XED_IFORM_VCVTTSS2SI_GPR32d_MEMd = 2399,
    XED_IFORM_VCVTTSS2SI_GPR32d_XMMd = 2400,
    XED_IFORM_VCVTTSS2SI_GPR32i32_MEMf32_AVX512 = 2401,
    XED_IFORM_VCVTTSS2SI_GPR32i32_XMMf32_AVX512 = 2402,
    XED_IFORM_VCVTTSS2SI_GPR64i64_MEMf32_AVX512 = 2403,
    XED_IFORM_VCVTTSS2SI_GPR64i64_XMMf32_AVX512 = 2404,
    XED_IFORM_VCVTTSS2SI_GPR64q_MEMd = 2405,
    XED_IFORM_VCVTTSS2SI_GPR64q_XMMd = 2406,
    XED_IFORM_VCVTTSS2USI_GPR32u32_MEMf32_AVX512 = 2407,
    XED_IFORM_VCVTTSS2USI_GPR32u32_XMMf32_AVX512 = 2408,
    XED_IFORM_VCVTTSS2USI_GPR64u64_MEMf32_AVX512 = 2409,
    XED_IFORM_VCVTTSS2USI_GPR64u64_XMMf32_AVX512 = 2410,
    XED_IFORM_VCVTUDQ2PD_XMMf64_MASKmskw_MEMu32_AVX512 = 2411,
    XED_IFORM_VCVTUDQ2PD_XMMf64_MASKmskw_XMMu32_AVX512 = 2412,
    XED_IFORM_VCVTUDQ2PD_YMMf64_MASKmskw_MEMu32_AVX512 = 2413,
    XED_IFORM_VCVTUDQ2PD_YMMf64_MASKmskw_XMMu32_AVX512 = 2414,
    XED_IFORM_VCVTUDQ2PD_ZMMf64_MASKmskw_MEMu32_AVX512 = 2415,
    XED_IFORM_VCVTUDQ2PD_ZMMf64_MASKmskw_YMMu32_AVX512 = 2416,
    XED_IFORM_VCVTUDQ2PS_XMMf32_MASKmskw_MEMu32_AVX512 = 2417,
    XED_IFORM_VCVTUDQ2PS_XMMf32_MASKmskw_XMMu32_AVX512 = 2418,
    XED_IFORM_VCVTUDQ2PS_YMMf32_MASKmskw_MEMu32_AVX512 = 2419,
    XED_IFORM_VCVTUDQ2PS_YMMf32_MASKmskw_YMMu32_AVX512 = 2420,
    XED_IFORM_VCVTUDQ2PS_ZMMf32_MASKmskw_MEMu32_AVX512 = 2421,
    XED_IFORM_VCVTUDQ2PS_ZMMf32_MASKmskw_ZMMu32_AVX512 = 2422,
    XED_IFORM_VCVTUQQ2PD_XMMf64_MASKmskw_MEMu64_AVX512 = 2423,
    XED_IFORM_VCVTUQQ2PD_XMMf64_MASKmskw_XMMu64_AVX512 = 2424,
    XED_IFORM_VCVTUQQ2PD_YMMf64_MASKmskw_MEMu64_AVX512 = 2425,
    XED_IFORM_VCVTUQQ2PD_YMMf64_MASKmskw_YMMu64_AVX512 = 2426,
    XED_IFORM_VCVTUQQ2PD_ZMMf64_MASKmskw_MEMu64_AVX512 = 2427,
    XED_IFORM_VCVTUQQ2PD_ZMMf64_MASKmskw_ZMMu64_AVX512 = 2428,
    XED_IFORM_VCVTUQQ2PS_XMMf32_MASKmskw_MEMu64_AVX512_VL128 = 2429,
    XED_IFORM_VCVTUQQ2PS_XMMf32_MASKmskw_MEMu64_AVX512_VL256 = 2430,
    XED_IFORM_VCVTUQQ2PS_XMMf32_MASKmskw_XMMu64_AVX512_VL128 = 2431,
    XED_IFORM_VCVTUQQ2PS_XMMf32_MASKmskw_YMMu64_AVX512_VL256 = 2432,
    XED_IFORM_VCVTUQQ2PS_YMMf32_MASKmskw_MEMu64_AVX512_VL512 = 2433,
    XED_IFORM_VCVTUQQ2PS_YMMf32_MASKmskw_ZMMu64_AVX512_VL512 = 2434,
    XED_IFORM_VCVTUSI2SD_XMMf64_XMMf64_GPR32u32_AVX512 = 2435,
    XED_IFORM_VCVTUSI2SD_XMMf64_XMMf64_GPR64u64_AVX512 = 2436,
    XED_IFORM_VCVTUSI2SD_XMMf64_XMMf64_MEMu32_AVX512 = 2437,
    XED_IFORM_VCVTUSI2SD_XMMf64_XMMf64_MEMu64_AVX512 = 2438,
    XED_IFORM_VCVTUSI2SS_XMMf32_XMMf32_GPR32u32_AVX512 = 2439,
    XED_IFORM_VCVTUSI2SS_XMMf32_XMMf32_GPR64u64_AVX512 = 2440,
    XED_IFORM_VCVTUSI2SS_XMMf32_XMMf32_MEMu32_AVX512 = 2441,
    XED_IFORM_VCVTUSI2SS_XMMf32_XMMf32_MEMu64_AVX512 = 2442,
    XED_IFORM_VDBPSADBW_XMMu16_MASKmskw_XMMu8_MEMu8_IMM8_AVX512 = 2443,
    XED_IFORM_VDBPSADBW_XMMu16_MASKmskw_XMMu8_XMMu8_IMM8_AVX512 = 2444,
    XED_IFORM_VDBPSADBW_YMMu16_MASKmskw_YMMu8_MEMu8_IMM8_AVX512 = 2445,
    XED_IFORM_VDBPSADBW_YMMu16_MASKmskw_YMMu8_YMMu8_IMM8_AVX512 = 2446,
    XED_IFORM_VDBPSADBW_ZMMu16_MASKmskw_ZMMu8_MEMu8_IMM8_AVX512 = 2447,
    XED_IFORM_VDBPSADBW_ZMMu16_MASKmskw_ZMMu8_ZMMu8_IMM8_AVX512 = 2448,
    XED_IFORM_VDIVPD_XMMdq_XMMdq_MEMdq = 2449,
    XED_IFORM_VDIVPD_XMMdq_XMMdq_XMMdq = 2450,
    XED_IFORM_VDIVPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2451,
    XED_IFORM_VDIVPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2452,
    XED_IFORM_VDIVPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2453,
    XED_IFORM_VDIVPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2454,
    XED_IFORM_VDIVPD_YMMqq_YMMqq_MEMqq = 2455,
    XED_IFORM_VDIVPD_YMMqq_YMMqq_YMMqq = 2456,
    XED_IFORM_VDIVPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2457,
    XED_IFORM_VDIVPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2458,
    XED_IFORM_VDIVPS_XMMdq_XMMdq_MEMdq = 2459,
    XED_IFORM_VDIVPS_XMMdq_XMMdq_XMMdq = 2460,
    XED_IFORM_VDIVPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2461,
    XED_IFORM_VDIVPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2462,
    XED_IFORM_VDIVPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2463,
    XED_IFORM_VDIVPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2464,
    XED_IFORM_VDIVPS_YMMqq_YMMqq_MEMqq = 2465,
    XED_IFORM_VDIVPS_YMMqq_YMMqq_YMMqq = 2466,
    XED_IFORM_VDIVPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2467,
    XED_IFORM_VDIVPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2468,
    XED_IFORM_VDIVSD_XMMdq_XMMdq_MEMq = 2469,
    XED_IFORM_VDIVSD_XMMdq_XMMdq_XMMq = 2470,
    XED_IFORM_VDIVSD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2471,
    XED_IFORM_VDIVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2472,
    XED_IFORM_VDIVSS_XMMdq_XMMdq_MEMd = 2473,
    XED_IFORM_VDIVSS_XMMdq_XMMdq_XMMd = 2474,
    XED_IFORM_VDIVSS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2475,
    XED_IFORM_VDIVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2476,
    XED_IFORM_VDPPD_XMMdq_XMMdq_MEMdq_IMMb = 2477,
    XED_IFORM_VDPPD_XMMdq_XMMdq_XMMdq_IMMb = 2478,
    XED_IFORM_VDPPS_XMMdq_XMMdq_MEMdq_IMMb = 2479,
    XED_IFORM_VDPPS_XMMdq_XMMdq_XMMdq_IMMb = 2480,
    XED_IFORM_VDPPS_YMMqq_YMMqq_MEMqq_IMMb = 2481,
    XED_IFORM_VDPPS_YMMqq_YMMqq_YMMqq_IMMb = 2482,
    XED_IFORM_VERR_GPR16 = 2483,
    XED_IFORM_VERR_MEMw = 2484,
    XED_IFORM_VERW_GPR16 = 2485,
    XED_IFORM_VERW_MEMw = 2486,
    XED_IFORM_VEXP2PD_ZMMf64_MASKmskw_MEMf64_AVX512ER = 2487,
    XED_IFORM_VEXP2PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER = 2488,
    XED_IFORM_VEXP2PS_ZMMf32_MASKmskw_MEMf32_AVX512ER = 2489,
    XED_IFORM_VEXP2PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER = 2490,
    XED_IFORM_VEXPANDPD_XMMf64_MASKmskw_MEMf64_AVX512 = 2491,
    XED_IFORM_VEXPANDPD_XMMf64_MASKmskw_XMMf64_AVX512 = 2492,
    XED_IFORM_VEXPANDPD_YMMf64_MASKmskw_MEMf64_AVX512 = 2493,
    XED_IFORM_VEXPANDPD_YMMf64_MASKmskw_YMMf64_AVX512 = 2494,
    XED_IFORM_VEXPANDPD_ZMMf64_MASKmskw_MEMf64_AVX512 = 2495,
    XED_IFORM_VEXPANDPD_ZMMf64_MASKmskw_ZMMf64_AVX512 = 2496,
    XED_IFORM_VEXPANDPS_XMMf32_MASKmskw_MEMf32_AVX512 = 2497,
    XED_IFORM_VEXPANDPS_XMMf32_MASKmskw_XMMf32_AVX512 = 2498,
    XED_IFORM_VEXPANDPS_YMMf32_MASKmskw_MEMf32_AVX512 = 2499,
    XED_IFORM_VEXPANDPS_YMMf32_MASKmskw_YMMf32_AVX512 = 2500,
    XED_IFORM_VEXPANDPS_ZMMf32_MASKmskw_MEMf32_AVX512 = 2501,
    XED_IFORM_VEXPANDPS_ZMMf32_MASKmskw_ZMMf32_AVX512 = 2502,
    XED_IFORM_VEXTRACTF128_MEMdq_YMMdq_IMMb = 2503,
    XED_IFORM_VEXTRACTF128_XMMdq_YMMdq_IMMb = 2504,
    XED_IFORM_VEXTRACTF32X4_MEMf32_MASKmskw_YMMf32_IMM8_AVX512 = 2505,
    XED_IFORM_VEXTRACTF32X4_MEMf32_MASKmskw_ZMMf32_IMM8_AVX512 = 2506,
    XED_IFORM_VEXTRACTF32X4_XMMf32_MASKmskw_YMMf32_IMM8_AVX512 = 2507,
    XED_IFORM_VEXTRACTF32X4_XMMf32_MASKmskw_ZMMf32_IMM8_AVX512 = 2508,
    XED_IFORM_VEXTRACTF32X8_MEMf32_MASKmskw_ZMMf32_IMM8_AVX512 = 2509,
    XED_IFORM_VEXTRACTF32X8_YMMf32_MASKmskw_ZMMf32_IMM8_AVX512 = 2510,
    XED_IFORM_VEXTRACTF64X2_MEMf64_MASKmskw_YMMf64_IMM8_AVX512 = 2511,
    XED_IFORM_VEXTRACTF64X2_MEMf64_MASKmskw_ZMMf64_IMM8_AVX512 = 2512,
    XED_IFORM_VEXTRACTF64X2_XMMf64_MASKmskw_YMMf64_IMM8_AVX512 = 2513,
    XED_IFORM_VEXTRACTF64X2_XMMf64_MASKmskw_ZMMf64_IMM8_AVX512 = 2514,
    XED_IFORM_VEXTRACTF64X4_MEMf64_MASKmskw_ZMMf64_IMM8_AVX512 = 2515,
    XED_IFORM_VEXTRACTF64X4_YMMf64_MASKmskw_ZMMf64_IMM8_AVX512 = 2516,
    XED_IFORM_VEXTRACTI128_MEMdq_YMMqq_IMMb = 2517,
    XED_IFORM_VEXTRACTI128_XMMdq_YMMqq_IMMb = 2518,
    XED_IFORM_VEXTRACTI32X4_MEMu32_MASKmskw_YMMu32_IMM8_AVX512 = 2519,
    XED_IFORM_VEXTRACTI32X4_MEMu32_MASKmskw_ZMMu32_IMM8_AVX512 = 2520,
    XED_IFORM_VEXTRACTI32X4_XMMu32_MASKmskw_YMMu32_IMM8_AVX512 = 2521,
    XED_IFORM_VEXTRACTI32X4_XMMu32_MASKmskw_ZMMu32_IMM8_AVX512 = 2522,
    XED_IFORM_VEXTRACTI32X8_MEMu32_MASKmskw_ZMMu32_IMM8_AVX512 = 2523,
    XED_IFORM_VEXTRACTI32X8_YMMu32_MASKmskw_ZMMu32_IMM8_AVX512 = 2524,
    XED_IFORM_VEXTRACTI64X2_MEMu64_MASKmskw_YMMu64_IMM8_AVX512 = 2525,
    XED_IFORM_VEXTRACTI64X2_MEMu64_MASKmskw_ZMMu64_IMM8_AVX512 = 2526,
    XED_IFORM_VEXTRACTI64X2_XMMu64_MASKmskw_YMMu64_IMM8_AVX512 = 2527,
    XED_IFORM_VEXTRACTI64X2_XMMu64_MASKmskw_ZMMu64_IMM8_AVX512 = 2528,
    XED_IFORM_VEXTRACTI64X4_MEMu64_MASKmskw_ZMMu64_IMM8_AVX512 = 2529,
    XED_IFORM_VEXTRACTI64X4_YMMu64_MASKmskw_ZMMu64_IMM8_AVX512 = 2530,
    XED_IFORM_VEXTRACTPS_GPR32_XMMdq_IMMb = 2531,
    XED_IFORM_VEXTRACTPS_GPR32f32_XMMf32_IMM8_AVX512 = 2532,
    XED_IFORM_VEXTRACTPS_MEMd_XMMdq_IMMb = 2533,
    XED_IFORM_VEXTRACTPS_MEMf32_XMMf32_IMM8_AVX512 = 2534,
    XED_IFORM_VFIXUPIMMPD_XMMf64_MASKmskw_XMMf64_MEMf64_IMM8_AVX512 = 2535,
    XED_IFORM_VFIXUPIMMPD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512 = 2536,
    XED_IFORM_VFIXUPIMMPD_YMMf64_MASKmskw_YMMf64_MEMf64_IMM8_AVX512 = 2537,
    XED_IFORM_VFIXUPIMMPD_YMMf64_MASKmskw_YMMf64_YMMf64_IMM8_AVX512 = 2538,
    XED_IFORM_VFIXUPIMMPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_IMM8_AVX512 = 2539,
    XED_IFORM_VFIXUPIMMPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512 = 2540,
    XED_IFORM_VFIXUPIMMPS_XMMf32_MASKmskw_XMMf32_MEMf32_IMM8_AVX512 = 2541,
    XED_IFORM_VFIXUPIMMPS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512 = 2542,
    XED_IFORM_VFIXUPIMMPS_YMMf32_MASKmskw_YMMf32_MEMf32_IMM8_AVX512 = 2543,
    XED_IFORM_VFIXUPIMMPS_YMMf32_MASKmskw_YMMf32_YMMf32_IMM8_AVX512 = 2544,
    XED_IFORM_VFIXUPIMMPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_IMM8_AVX512 = 2545,
    XED_IFORM_VFIXUPIMMPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512 = 2546,
    XED_IFORM_VFIXUPIMMSD_XMMf64_MASKmskw_XMMf64_MEMf64_IMM8_AVX512 = 2547,
    XED_IFORM_VFIXUPIMMSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512 = 2548,
    XED_IFORM_VFIXUPIMMSS_XMMf32_MASKmskw_XMMf32_MEMf32_IMM8_AVX512 = 2549,
    XED_IFORM_VFIXUPIMMSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512 = 2550,
    XED_IFORM_VFMADD132PD_XMMdq_XMMdq_MEMdq = 2551,
    XED_IFORM_VFMADD132PD_XMMdq_XMMdq_XMMdq = 2552,
    XED_IFORM_VFMADD132PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2553,
    XED_IFORM_VFMADD132PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2554,
    XED_IFORM_VFMADD132PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2555,
    XED_IFORM_VFMADD132PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2556,
    XED_IFORM_VFMADD132PD_YMMqq_YMMqq_MEMqq = 2557,
    XED_IFORM_VFMADD132PD_YMMqq_YMMqq_YMMqq = 2558,
    XED_IFORM_VFMADD132PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2559,
    XED_IFORM_VFMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2560,
    XED_IFORM_VFMADD132PS_XMMdq_XMMdq_MEMdq = 2561,
    XED_IFORM_VFMADD132PS_XMMdq_XMMdq_XMMdq = 2562,
    XED_IFORM_VFMADD132PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2563,
    XED_IFORM_VFMADD132PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2564,
    XED_IFORM_VFMADD132PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2565,
    XED_IFORM_VFMADD132PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2566,
    XED_IFORM_VFMADD132PS_YMMqq_YMMqq_MEMqq = 2567,
    XED_IFORM_VFMADD132PS_YMMqq_YMMqq_YMMqq = 2568,
    XED_IFORM_VFMADD132PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2569,
    XED_IFORM_VFMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2570,
    XED_IFORM_VFMADD132SD_XMMdq_XMMq_MEMq = 2571,
    XED_IFORM_VFMADD132SD_XMMdq_XMMq_XMMq = 2572,
    XED_IFORM_VFMADD132SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2573,
    XED_IFORM_VFMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2574,
    XED_IFORM_VFMADD132SS_XMMdq_XMMd_MEMd = 2575,
    XED_IFORM_VFMADD132SS_XMMdq_XMMd_XMMd = 2576,
    XED_IFORM_VFMADD132SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2577,
    XED_IFORM_VFMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2578,
    XED_IFORM_VFMADD213PD_XMMdq_XMMdq_MEMdq = 2579,
    XED_IFORM_VFMADD213PD_XMMdq_XMMdq_XMMdq = 2580,
    XED_IFORM_VFMADD213PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2581,
    XED_IFORM_VFMADD213PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2582,
    XED_IFORM_VFMADD213PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2583,
    XED_IFORM_VFMADD213PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2584,
    XED_IFORM_VFMADD213PD_YMMqq_YMMqq_MEMqq = 2585,
    XED_IFORM_VFMADD213PD_YMMqq_YMMqq_YMMqq = 2586,
    XED_IFORM_VFMADD213PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2587,
    XED_IFORM_VFMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2588,
    XED_IFORM_VFMADD213PS_XMMdq_XMMdq_MEMdq = 2589,
    XED_IFORM_VFMADD213PS_XMMdq_XMMdq_XMMdq = 2590,
    XED_IFORM_VFMADD213PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2591,
    XED_IFORM_VFMADD213PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2592,
    XED_IFORM_VFMADD213PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2593,
    XED_IFORM_VFMADD213PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2594,
    XED_IFORM_VFMADD213PS_YMMqq_YMMqq_MEMqq = 2595,
    XED_IFORM_VFMADD213PS_YMMqq_YMMqq_YMMqq = 2596,
    XED_IFORM_VFMADD213PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2597,
    XED_IFORM_VFMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2598,
    XED_IFORM_VFMADD213SD_XMMdq_XMMq_MEMq = 2599,
    XED_IFORM_VFMADD213SD_XMMdq_XMMq_XMMq = 2600,
    XED_IFORM_VFMADD213SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2601,
    XED_IFORM_VFMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2602,
    XED_IFORM_VFMADD213SS_XMMdq_XMMd_MEMd = 2603,
    XED_IFORM_VFMADD213SS_XMMdq_XMMd_XMMd = 2604,
    XED_IFORM_VFMADD213SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2605,
    XED_IFORM_VFMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2606,
    XED_IFORM_VFMADD231PD_XMMdq_XMMdq_MEMdq = 2607,
    XED_IFORM_VFMADD231PD_XMMdq_XMMdq_XMMdq = 2608,
    XED_IFORM_VFMADD231PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2609,
    XED_IFORM_VFMADD231PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2610,
    XED_IFORM_VFMADD231PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2611,
    XED_IFORM_VFMADD231PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2612,
    XED_IFORM_VFMADD231PD_YMMqq_YMMqq_MEMqq = 2613,
    XED_IFORM_VFMADD231PD_YMMqq_YMMqq_YMMqq = 2614,
    XED_IFORM_VFMADD231PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2615,
    XED_IFORM_VFMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2616,
    XED_IFORM_VFMADD231PS_XMMdq_XMMdq_MEMdq = 2617,
    XED_IFORM_VFMADD231PS_XMMdq_XMMdq_XMMdq = 2618,
    XED_IFORM_VFMADD231PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2619,
    XED_IFORM_VFMADD231PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2620,
    XED_IFORM_VFMADD231PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2621,
    XED_IFORM_VFMADD231PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2622,
    XED_IFORM_VFMADD231PS_YMMqq_YMMqq_MEMqq = 2623,
    XED_IFORM_VFMADD231PS_YMMqq_YMMqq_YMMqq = 2624,
    XED_IFORM_VFMADD231PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2625,
    XED_IFORM_VFMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2626,
    XED_IFORM_VFMADD231SD_XMMdq_XMMq_MEMq = 2627,
    XED_IFORM_VFMADD231SD_XMMdq_XMMq_XMMq = 2628,
    XED_IFORM_VFMADD231SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2629,
    XED_IFORM_VFMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2630,
    XED_IFORM_VFMADD231SS_XMMdq_XMMd_MEMd = 2631,
    XED_IFORM_VFMADD231SS_XMMdq_XMMd_XMMd = 2632,
    XED_IFORM_VFMADD231SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2633,
    XED_IFORM_VFMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2634,
    XED_IFORM_VFMADDPD_XMMdq_XMMdq_MEMdq_XMMdq = 2635,
    XED_IFORM_VFMADDPD_XMMdq_XMMdq_XMMdq_MEMdq = 2636,
    XED_IFORM_VFMADDPD_XMMdq_XMMdq_XMMdq_XMMdq = 2637,
    XED_IFORM_VFMADDPD_YMMqq_YMMqq_MEMqq_YMMqq = 2638,
    XED_IFORM_VFMADDPD_YMMqq_YMMqq_YMMqq_MEMqq = 2639,
    XED_IFORM_VFMADDPD_YMMqq_YMMqq_YMMqq_YMMqq = 2640,
    XED_IFORM_VFMADDPS_XMMdq_XMMdq_MEMdq_XMMdq = 2641,
    XED_IFORM_VFMADDPS_XMMdq_XMMdq_XMMdq_MEMdq = 2642,
    XED_IFORM_VFMADDPS_XMMdq_XMMdq_XMMdq_XMMdq = 2643,
    XED_IFORM_VFMADDPS_YMMqq_YMMqq_MEMqq_YMMqq = 2644,
    XED_IFORM_VFMADDPS_YMMqq_YMMqq_YMMqq_MEMqq = 2645,
    XED_IFORM_VFMADDPS_YMMqq_YMMqq_YMMqq_YMMqq = 2646,
    XED_IFORM_VFMADDSD_XMMdq_XMMdq_MEMq_XMMdq = 2647,
    XED_IFORM_VFMADDSD_XMMdq_XMMdq_XMMdq_MEMq = 2648,
    XED_IFORM_VFMADDSD_XMMdq_XMMdq_XMMdq_XMMq = 2649,
    XED_IFORM_VFMADDSD_XMMdq_XMMdq_XMMq_XMMdq = 2650,
    XED_IFORM_VFMADDSS_XMMdq_XMMdq_MEMd_XMMdq = 2651,
    XED_IFORM_VFMADDSS_XMMdq_XMMdq_XMMd_XMMdq = 2652,
    XED_IFORM_VFMADDSS_XMMdq_XMMdq_XMMdq_MEMd = 2653,
    XED_IFORM_VFMADDSS_XMMdq_XMMdq_XMMdq_XMMd = 2654,
    XED_IFORM_VFMADDSUB132PD_XMMdq_XMMdq_MEMdq = 2655,
    XED_IFORM_VFMADDSUB132PD_XMMdq_XMMdq_XMMdq = 2656,
    XED_IFORM_VFMADDSUB132PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2657,
    XED_IFORM_VFMADDSUB132PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2658,
    XED_IFORM_VFMADDSUB132PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2659,
    XED_IFORM_VFMADDSUB132PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2660,
    XED_IFORM_VFMADDSUB132PD_YMMqq_YMMqq_MEMqq = 2661,
    XED_IFORM_VFMADDSUB132PD_YMMqq_YMMqq_YMMqq = 2662,
    XED_IFORM_VFMADDSUB132PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2663,
    XED_IFORM_VFMADDSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2664,
    XED_IFORM_VFMADDSUB132PS_XMMdq_XMMdq_MEMdq = 2665,
    XED_IFORM_VFMADDSUB132PS_XMMdq_XMMdq_XMMdq = 2666,
    XED_IFORM_VFMADDSUB132PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2667,
    XED_IFORM_VFMADDSUB132PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2668,
    XED_IFORM_VFMADDSUB132PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2669,
    XED_IFORM_VFMADDSUB132PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2670,
    XED_IFORM_VFMADDSUB132PS_YMMqq_YMMqq_MEMqq = 2671,
    XED_IFORM_VFMADDSUB132PS_YMMqq_YMMqq_YMMqq = 2672,
    XED_IFORM_VFMADDSUB132PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2673,
    XED_IFORM_VFMADDSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2674,
    XED_IFORM_VFMADDSUB213PD_XMMdq_XMMdq_MEMdq = 2675,
    XED_IFORM_VFMADDSUB213PD_XMMdq_XMMdq_XMMdq = 2676,
    XED_IFORM_VFMADDSUB213PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2677,
    XED_IFORM_VFMADDSUB213PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2678,
    XED_IFORM_VFMADDSUB213PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2679,
    XED_IFORM_VFMADDSUB213PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2680,
    XED_IFORM_VFMADDSUB213PD_YMMqq_YMMqq_MEMqq = 2681,
    XED_IFORM_VFMADDSUB213PD_YMMqq_YMMqq_YMMqq = 2682,
    XED_IFORM_VFMADDSUB213PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2683,
    XED_IFORM_VFMADDSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2684,
    XED_IFORM_VFMADDSUB213PS_XMMdq_XMMdq_MEMdq = 2685,
    XED_IFORM_VFMADDSUB213PS_XMMdq_XMMdq_XMMdq = 2686,
    XED_IFORM_VFMADDSUB213PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2687,
    XED_IFORM_VFMADDSUB213PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2688,
    XED_IFORM_VFMADDSUB213PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2689,
    XED_IFORM_VFMADDSUB213PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2690,
    XED_IFORM_VFMADDSUB213PS_YMMqq_YMMqq_MEMqq = 2691,
    XED_IFORM_VFMADDSUB213PS_YMMqq_YMMqq_YMMqq = 2692,
    XED_IFORM_VFMADDSUB213PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2693,
    XED_IFORM_VFMADDSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2694,
    XED_IFORM_VFMADDSUB231PD_XMMdq_XMMdq_MEMdq = 2695,
    XED_IFORM_VFMADDSUB231PD_XMMdq_XMMdq_XMMdq = 2696,
    XED_IFORM_VFMADDSUB231PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2697,
    XED_IFORM_VFMADDSUB231PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2698,
    XED_IFORM_VFMADDSUB231PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2699,
    XED_IFORM_VFMADDSUB231PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2700,
    XED_IFORM_VFMADDSUB231PD_YMMqq_YMMqq_MEMqq = 2701,
    XED_IFORM_VFMADDSUB231PD_YMMqq_YMMqq_YMMqq = 2702,
    XED_IFORM_VFMADDSUB231PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2703,
    XED_IFORM_VFMADDSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2704,
    XED_IFORM_VFMADDSUB231PS_XMMdq_XMMdq_MEMdq = 2705,
    XED_IFORM_VFMADDSUB231PS_XMMdq_XMMdq_XMMdq = 2706,
    XED_IFORM_VFMADDSUB231PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2707,
    XED_IFORM_VFMADDSUB231PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2708,
    XED_IFORM_VFMADDSUB231PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2709,
    XED_IFORM_VFMADDSUB231PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2710,
    XED_IFORM_VFMADDSUB231PS_YMMqq_YMMqq_MEMqq = 2711,
    XED_IFORM_VFMADDSUB231PS_YMMqq_YMMqq_YMMqq = 2712,
    XED_IFORM_VFMADDSUB231PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2713,
    XED_IFORM_VFMADDSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2714,
    XED_IFORM_VFMADDSUBPD_XMMdq_XMMdq_MEMdq_XMMdq = 2715,
    XED_IFORM_VFMADDSUBPD_XMMdq_XMMdq_XMMdq_MEMdq = 2716,
    XED_IFORM_VFMADDSUBPD_XMMdq_XMMdq_XMMdq_XMMdq = 2717,
    XED_IFORM_VFMADDSUBPD_YMMqq_YMMqq_MEMqq_YMMqq = 2718,
    XED_IFORM_VFMADDSUBPD_YMMqq_YMMqq_YMMqq_MEMqq = 2719,
    XED_IFORM_VFMADDSUBPD_YMMqq_YMMqq_YMMqq_YMMqq = 2720,
    XED_IFORM_VFMADDSUBPS_XMMdq_XMMdq_MEMdq_XMMdq = 2721,
    XED_IFORM_VFMADDSUBPS_XMMdq_XMMdq_XMMdq_MEMdq = 2722,
    XED_IFORM_VFMADDSUBPS_XMMdq_XMMdq_XMMdq_XMMdq = 2723,
    XED_IFORM_VFMADDSUBPS_YMMqq_YMMqq_MEMqq_YMMqq = 2724,
    XED_IFORM_VFMADDSUBPS_YMMqq_YMMqq_YMMqq_MEMqq = 2725,
    XED_IFORM_VFMADDSUBPS_YMMqq_YMMqq_YMMqq_YMMqq = 2726,
    XED_IFORM_VFMSUB132PD_XMMdq_XMMdq_MEMdq = 2727,
    XED_IFORM_VFMSUB132PD_XMMdq_XMMdq_XMMdq = 2728,
    XED_IFORM_VFMSUB132PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2729,
    XED_IFORM_VFMSUB132PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2730,
    XED_IFORM_VFMSUB132PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2731,
    XED_IFORM_VFMSUB132PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2732,
    XED_IFORM_VFMSUB132PD_YMMqq_YMMqq_MEMqq = 2733,
    XED_IFORM_VFMSUB132PD_YMMqq_YMMqq_YMMqq = 2734,
    XED_IFORM_VFMSUB132PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2735,
    XED_IFORM_VFMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2736,
    XED_IFORM_VFMSUB132PS_XMMdq_XMMdq_MEMdq = 2737,
    XED_IFORM_VFMSUB132PS_XMMdq_XMMdq_XMMdq = 2738,
    XED_IFORM_VFMSUB132PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2739,
    XED_IFORM_VFMSUB132PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2740,
    XED_IFORM_VFMSUB132PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2741,
    XED_IFORM_VFMSUB132PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2742,
    XED_IFORM_VFMSUB132PS_YMMqq_YMMqq_MEMqq = 2743,
    XED_IFORM_VFMSUB132PS_YMMqq_YMMqq_YMMqq = 2744,
    XED_IFORM_VFMSUB132PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2745,
    XED_IFORM_VFMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2746,
    XED_IFORM_VFMSUB132SD_XMMdq_XMMq_MEMq = 2747,
    XED_IFORM_VFMSUB132SD_XMMdq_XMMq_XMMq = 2748,
    XED_IFORM_VFMSUB132SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2749,
    XED_IFORM_VFMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2750,
    XED_IFORM_VFMSUB132SS_XMMdq_XMMd_MEMd = 2751,
    XED_IFORM_VFMSUB132SS_XMMdq_XMMd_XMMd = 2752,
    XED_IFORM_VFMSUB132SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2753,
    XED_IFORM_VFMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2754,
    XED_IFORM_VFMSUB213PD_XMMdq_XMMdq_MEMdq = 2755,
    XED_IFORM_VFMSUB213PD_XMMdq_XMMdq_XMMdq = 2756,
    XED_IFORM_VFMSUB213PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2757,
    XED_IFORM_VFMSUB213PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2758,
    XED_IFORM_VFMSUB213PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2759,
    XED_IFORM_VFMSUB213PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2760,
    XED_IFORM_VFMSUB213PD_YMMqq_YMMqq_MEMqq = 2761,
    XED_IFORM_VFMSUB213PD_YMMqq_YMMqq_YMMqq = 2762,
    XED_IFORM_VFMSUB213PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2763,
    XED_IFORM_VFMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2764,
    XED_IFORM_VFMSUB213PS_XMMdq_XMMdq_MEMdq = 2765,
    XED_IFORM_VFMSUB213PS_XMMdq_XMMdq_XMMdq = 2766,
    XED_IFORM_VFMSUB213PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2767,
    XED_IFORM_VFMSUB213PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2768,
    XED_IFORM_VFMSUB213PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2769,
    XED_IFORM_VFMSUB213PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2770,
    XED_IFORM_VFMSUB213PS_YMMqq_YMMqq_MEMqq = 2771,
    XED_IFORM_VFMSUB213PS_YMMqq_YMMqq_YMMqq = 2772,
    XED_IFORM_VFMSUB213PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2773,
    XED_IFORM_VFMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2774,
    XED_IFORM_VFMSUB213SD_XMMdq_XMMq_MEMq = 2775,
    XED_IFORM_VFMSUB213SD_XMMdq_XMMq_XMMq = 2776,
    XED_IFORM_VFMSUB213SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2777,
    XED_IFORM_VFMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2778,
    XED_IFORM_VFMSUB213SS_XMMdq_XMMd_MEMd = 2779,
    XED_IFORM_VFMSUB213SS_XMMdq_XMMd_XMMd = 2780,
    XED_IFORM_VFMSUB213SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2781,
    XED_IFORM_VFMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2782,
    XED_IFORM_VFMSUB231PD_XMMdq_XMMdq_MEMdq = 2783,
    XED_IFORM_VFMSUB231PD_XMMdq_XMMdq_XMMdq = 2784,
    XED_IFORM_VFMSUB231PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2785,
    XED_IFORM_VFMSUB231PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2786,
    XED_IFORM_VFMSUB231PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2787,
    XED_IFORM_VFMSUB231PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2788,
    XED_IFORM_VFMSUB231PD_YMMqq_YMMqq_MEMqq = 2789,
    XED_IFORM_VFMSUB231PD_YMMqq_YMMqq_YMMqq = 2790,
    XED_IFORM_VFMSUB231PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2791,
    XED_IFORM_VFMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2792,
    XED_IFORM_VFMSUB231PS_XMMdq_XMMdq_MEMdq = 2793,
    XED_IFORM_VFMSUB231PS_XMMdq_XMMdq_XMMdq = 2794,
    XED_IFORM_VFMSUB231PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2795,
    XED_IFORM_VFMSUB231PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2796,
    XED_IFORM_VFMSUB231PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2797,
    XED_IFORM_VFMSUB231PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2798,
    XED_IFORM_VFMSUB231PS_YMMqq_YMMqq_MEMqq = 2799,
    XED_IFORM_VFMSUB231PS_YMMqq_YMMqq_YMMqq = 2800,
    XED_IFORM_VFMSUB231PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2801,
    XED_IFORM_VFMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2802,
    XED_IFORM_VFMSUB231SD_XMMdq_XMMq_MEMq = 2803,
    XED_IFORM_VFMSUB231SD_XMMdq_XMMq_XMMq = 2804,
    XED_IFORM_VFMSUB231SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2805,
    XED_IFORM_VFMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2806,
    XED_IFORM_VFMSUB231SS_XMMdq_XMMd_MEMd = 2807,
    XED_IFORM_VFMSUB231SS_XMMdq_XMMd_XMMd = 2808,
    XED_IFORM_VFMSUB231SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2809,
    XED_IFORM_VFMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2810,
    XED_IFORM_VFMSUBADD132PD_XMMdq_XMMdq_MEMdq = 2811,
    XED_IFORM_VFMSUBADD132PD_XMMdq_XMMdq_XMMdq = 2812,
    XED_IFORM_VFMSUBADD132PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2813,
    XED_IFORM_VFMSUBADD132PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2814,
    XED_IFORM_VFMSUBADD132PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2815,
    XED_IFORM_VFMSUBADD132PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2816,
    XED_IFORM_VFMSUBADD132PD_YMMqq_YMMqq_MEMqq = 2817,
    XED_IFORM_VFMSUBADD132PD_YMMqq_YMMqq_YMMqq = 2818,
    XED_IFORM_VFMSUBADD132PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2819,
    XED_IFORM_VFMSUBADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2820,
    XED_IFORM_VFMSUBADD132PS_XMMdq_XMMdq_MEMdq = 2821,
    XED_IFORM_VFMSUBADD132PS_XMMdq_XMMdq_XMMdq = 2822,
    XED_IFORM_VFMSUBADD132PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2823,
    XED_IFORM_VFMSUBADD132PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2824,
    XED_IFORM_VFMSUBADD132PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2825,
    XED_IFORM_VFMSUBADD132PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2826,
    XED_IFORM_VFMSUBADD132PS_YMMqq_YMMqq_MEMqq = 2827,
    XED_IFORM_VFMSUBADD132PS_YMMqq_YMMqq_YMMqq = 2828,
    XED_IFORM_VFMSUBADD132PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2829,
    XED_IFORM_VFMSUBADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2830,
    XED_IFORM_VFMSUBADD213PD_XMMdq_XMMdq_MEMdq = 2831,
    XED_IFORM_VFMSUBADD213PD_XMMdq_XMMdq_XMMdq = 2832,
    XED_IFORM_VFMSUBADD213PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2833,
    XED_IFORM_VFMSUBADD213PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2834,
    XED_IFORM_VFMSUBADD213PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2835,
    XED_IFORM_VFMSUBADD213PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2836,
    XED_IFORM_VFMSUBADD213PD_YMMqq_YMMqq_MEMqq = 2837,
    XED_IFORM_VFMSUBADD213PD_YMMqq_YMMqq_YMMqq = 2838,
    XED_IFORM_VFMSUBADD213PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2839,
    XED_IFORM_VFMSUBADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2840,
    XED_IFORM_VFMSUBADD213PS_XMMdq_XMMdq_MEMdq = 2841,
    XED_IFORM_VFMSUBADD213PS_XMMdq_XMMdq_XMMdq = 2842,
    XED_IFORM_VFMSUBADD213PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2843,
    XED_IFORM_VFMSUBADD213PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2844,
    XED_IFORM_VFMSUBADD213PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2845,
    XED_IFORM_VFMSUBADD213PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2846,
    XED_IFORM_VFMSUBADD213PS_YMMqq_YMMqq_MEMqq = 2847,
    XED_IFORM_VFMSUBADD213PS_YMMqq_YMMqq_YMMqq = 2848,
    XED_IFORM_VFMSUBADD213PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2849,
    XED_IFORM_VFMSUBADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2850,
    XED_IFORM_VFMSUBADD231PD_XMMdq_XMMdq_MEMdq = 2851,
    XED_IFORM_VFMSUBADD231PD_XMMdq_XMMdq_XMMdq = 2852,
    XED_IFORM_VFMSUBADD231PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2853,
    XED_IFORM_VFMSUBADD231PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2854,
    XED_IFORM_VFMSUBADD231PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2855,
    XED_IFORM_VFMSUBADD231PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2856,
    XED_IFORM_VFMSUBADD231PD_YMMqq_YMMqq_MEMqq = 2857,
    XED_IFORM_VFMSUBADD231PD_YMMqq_YMMqq_YMMqq = 2858,
    XED_IFORM_VFMSUBADD231PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2859,
    XED_IFORM_VFMSUBADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2860,
    XED_IFORM_VFMSUBADD231PS_XMMdq_XMMdq_MEMdq = 2861,
    XED_IFORM_VFMSUBADD231PS_XMMdq_XMMdq_XMMdq = 2862,
    XED_IFORM_VFMSUBADD231PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2863,
    XED_IFORM_VFMSUBADD231PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2864,
    XED_IFORM_VFMSUBADD231PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2865,
    XED_IFORM_VFMSUBADD231PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2866,
    XED_IFORM_VFMSUBADD231PS_YMMqq_YMMqq_MEMqq = 2867,
    XED_IFORM_VFMSUBADD231PS_YMMqq_YMMqq_YMMqq = 2868,
    XED_IFORM_VFMSUBADD231PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2869,
    XED_IFORM_VFMSUBADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2870,
    XED_IFORM_VFMSUBADDPD_XMMdq_XMMdq_MEMdq_XMMdq = 2871,
    XED_IFORM_VFMSUBADDPD_XMMdq_XMMdq_XMMdq_MEMdq = 2872,
    XED_IFORM_VFMSUBADDPD_XMMdq_XMMdq_XMMdq_XMMdq = 2873,
    XED_IFORM_VFMSUBADDPD_YMMqq_YMMqq_MEMqq_YMMqq = 2874,
    XED_IFORM_VFMSUBADDPD_YMMqq_YMMqq_YMMqq_MEMqq = 2875,
    XED_IFORM_VFMSUBADDPD_YMMqq_YMMqq_YMMqq_YMMqq = 2876,
    XED_IFORM_VFMSUBADDPS_XMMdq_XMMdq_MEMdq_XMMdq = 2877,
    XED_IFORM_VFMSUBADDPS_XMMdq_XMMdq_XMMdq_MEMdq = 2878,
    XED_IFORM_VFMSUBADDPS_XMMdq_XMMdq_XMMdq_XMMdq = 2879,
    XED_IFORM_VFMSUBADDPS_YMMqq_YMMqq_MEMqq_YMMqq = 2880,
    XED_IFORM_VFMSUBADDPS_YMMqq_YMMqq_YMMqq_MEMqq = 2881,
    XED_IFORM_VFMSUBADDPS_YMMqq_YMMqq_YMMqq_YMMqq = 2882,
    XED_IFORM_VFMSUBPD_XMMdq_XMMdq_MEMdq_XMMdq = 2883,
    XED_IFORM_VFMSUBPD_XMMdq_XMMdq_XMMdq_MEMdq = 2884,
    XED_IFORM_VFMSUBPD_XMMdq_XMMdq_XMMdq_XMMdq = 2885,
    XED_IFORM_VFMSUBPD_YMMqq_YMMqq_MEMqq_YMMqq = 2886,
    XED_IFORM_VFMSUBPD_YMMqq_YMMqq_YMMqq_MEMqq = 2887,
    XED_IFORM_VFMSUBPD_YMMqq_YMMqq_YMMqq_YMMqq = 2888,
    XED_IFORM_VFMSUBPS_XMMdq_XMMdq_MEMdq_XMMdq = 2889,
    XED_IFORM_VFMSUBPS_XMMdq_XMMdq_XMMdq_MEMdq = 2890,
    XED_IFORM_VFMSUBPS_XMMdq_XMMdq_XMMdq_XMMdq = 2891,
    XED_IFORM_VFMSUBPS_YMMqq_YMMqq_MEMqq_YMMqq = 2892,
    XED_IFORM_VFMSUBPS_YMMqq_YMMqq_YMMqq_MEMqq = 2893,
    XED_IFORM_VFMSUBPS_YMMqq_YMMqq_YMMqq_YMMqq = 2894,
    XED_IFORM_VFMSUBSD_XMMdq_XMMdq_MEMq_XMMdq = 2895,
    XED_IFORM_VFMSUBSD_XMMdq_XMMdq_XMMdq_MEMq = 2896,
    XED_IFORM_VFMSUBSD_XMMdq_XMMdq_XMMdq_XMMq = 2897,
    XED_IFORM_VFMSUBSD_XMMdq_XMMdq_XMMq_XMMdq = 2898,
    XED_IFORM_VFMSUBSS_XMMdq_XMMdq_MEMd_XMMdq = 2899,
    XED_IFORM_VFMSUBSS_XMMdq_XMMdq_XMMd_XMMdq = 2900,
    XED_IFORM_VFMSUBSS_XMMdq_XMMdq_XMMdq_MEMd = 2901,
    XED_IFORM_VFMSUBSS_XMMdq_XMMdq_XMMdq_XMMd = 2902,
    XED_IFORM_VFNMADD132PD_XMMdq_XMMdq_MEMdq = 2903,
    XED_IFORM_VFNMADD132PD_XMMdq_XMMdq_XMMdq = 2904,
    XED_IFORM_VFNMADD132PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2905,
    XED_IFORM_VFNMADD132PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2906,
    XED_IFORM_VFNMADD132PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2907,
    XED_IFORM_VFNMADD132PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2908,
    XED_IFORM_VFNMADD132PD_YMMqq_YMMqq_MEMqq = 2909,
    XED_IFORM_VFNMADD132PD_YMMqq_YMMqq_YMMqq = 2910,
    XED_IFORM_VFNMADD132PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2911,
    XED_IFORM_VFNMADD132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2912,
    XED_IFORM_VFNMADD132PS_XMMdq_XMMdq_MEMdq = 2913,
    XED_IFORM_VFNMADD132PS_XMMdq_XMMdq_XMMdq = 2914,
    XED_IFORM_VFNMADD132PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2915,
    XED_IFORM_VFNMADD132PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2916,
    XED_IFORM_VFNMADD132PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2917,
    XED_IFORM_VFNMADD132PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2918,
    XED_IFORM_VFNMADD132PS_YMMqq_YMMqq_MEMqq = 2919,
    XED_IFORM_VFNMADD132PS_YMMqq_YMMqq_YMMqq = 2920,
    XED_IFORM_VFNMADD132PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2921,
    XED_IFORM_VFNMADD132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2922,
    XED_IFORM_VFNMADD132SD_XMMdq_XMMq_MEMq = 2923,
    XED_IFORM_VFNMADD132SD_XMMdq_XMMq_XMMq = 2924,
    XED_IFORM_VFNMADD132SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2925,
    XED_IFORM_VFNMADD132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2926,
    XED_IFORM_VFNMADD132SS_XMMdq_XMMd_MEMd = 2927,
    XED_IFORM_VFNMADD132SS_XMMdq_XMMd_XMMd = 2928,
    XED_IFORM_VFNMADD132SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2929,
    XED_IFORM_VFNMADD132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2930,
    XED_IFORM_VFNMADD213PD_XMMdq_XMMdq_MEMdq = 2931,
    XED_IFORM_VFNMADD213PD_XMMdq_XMMdq_XMMdq = 2932,
    XED_IFORM_VFNMADD213PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2933,
    XED_IFORM_VFNMADD213PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2934,
    XED_IFORM_VFNMADD213PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2935,
    XED_IFORM_VFNMADD213PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2936,
    XED_IFORM_VFNMADD213PD_YMMqq_YMMqq_MEMqq = 2937,
    XED_IFORM_VFNMADD213PD_YMMqq_YMMqq_YMMqq = 2938,
    XED_IFORM_VFNMADD213PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2939,
    XED_IFORM_VFNMADD213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2940,
    XED_IFORM_VFNMADD213PS_XMMdq_XMMdq_MEMdq = 2941,
    XED_IFORM_VFNMADD213PS_XMMdq_XMMdq_XMMdq = 2942,
    XED_IFORM_VFNMADD213PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2943,
    XED_IFORM_VFNMADD213PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2944,
    XED_IFORM_VFNMADD213PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2945,
    XED_IFORM_VFNMADD213PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2946,
    XED_IFORM_VFNMADD213PS_YMMqq_YMMqq_MEMqq = 2947,
    XED_IFORM_VFNMADD213PS_YMMqq_YMMqq_YMMqq = 2948,
    XED_IFORM_VFNMADD213PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2949,
    XED_IFORM_VFNMADD213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2950,
    XED_IFORM_VFNMADD213SD_XMMdq_XMMq_MEMq = 2951,
    XED_IFORM_VFNMADD213SD_XMMdq_XMMq_XMMq = 2952,
    XED_IFORM_VFNMADD213SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2953,
    XED_IFORM_VFNMADD213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2954,
    XED_IFORM_VFNMADD213SS_XMMdq_XMMd_MEMd = 2955,
    XED_IFORM_VFNMADD213SS_XMMdq_XMMd_XMMd = 2956,
    XED_IFORM_VFNMADD213SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2957,
    XED_IFORM_VFNMADD213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2958,
    XED_IFORM_VFNMADD231PD_XMMdq_XMMdq_MEMdq = 2959,
    XED_IFORM_VFNMADD231PD_XMMdq_XMMdq_XMMdq = 2960,
    XED_IFORM_VFNMADD231PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2961,
    XED_IFORM_VFNMADD231PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2962,
    XED_IFORM_VFNMADD231PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 2963,
    XED_IFORM_VFNMADD231PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 2964,
    XED_IFORM_VFNMADD231PD_YMMqq_YMMqq_MEMqq = 2965,
    XED_IFORM_VFNMADD231PD_YMMqq_YMMqq_YMMqq = 2966,
    XED_IFORM_VFNMADD231PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 2967,
    XED_IFORM_VFNMADD231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 2968,
    XED_IFORM_VFNMADD231PS_XMMdq_XMMdq_MEMdq = 2969,
    XED_IFORM_VFNMADD231PS_XMMdq_XMMdq_XMMdq = 2970,
    XED_IFORM_VFNMADD231PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2971,
    XED_IFORM_VFNMADD231PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2972,
    XED_IFORM_VFNMADD231PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 2973,
    XED_IFORM_VFNMADD231PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 2974,
    XED_IFORM_VFNMADD231PS_YMMqq_YMMqq_MEMqq = 2975,
    XED_IFORM_VFNMADD231PS_YMMqq_YMMqq_YMMqq = 2976,
    XED_IFORM_VFNMADD231PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 2977,
    XED_IFORM_VFNMADD231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 2978,
    XED_IFORM_VFNMADD231SD_XMMdq_XMMq_MEMq = 2979,
    XED_IFORM_VFNMADD231SD_XMMdq_XMMq_XMMq = 2980,
    XED_IFORM_VFNMADD231SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 2981,
    XED_IFORM_VFNMADD231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 2982,
    XED_IFORM_VFNMADD231SS_XMMdq_XMMd_MEMd = 2983,
    XED_IFORM_VFNMADD231SS_XMMdq_XMMd_XMMd = 2984,
    XED_IFORM_VFNMADD231SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 2985,
    XED_IFORM_VFNMADD231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 2986,
    XED_IFORM_VFNMADDPD_XMMdq_XMMdq_MEMdq_XMMdq = 2987,
    XED_IFORM_VFNMADDPD_XMMdq_XMMdq_XMMdq_MEMdq = 2988,
    XED_IFORM_VFNMADDPD_XMMdq_XMMdq_XMMdq_XMMdq = 2989,
    XED_IFORM_VFNMADDPD_YMMqq_YMMqq_MEMqq_YMMqq = 2990,
    XED_IFORM_VFNMADDPD_YMMqq_YMMqq_YMMqq_MEMqq = 2991,
    XED_IFORM_VFNMADDPD_YMMqq_YMMqq_YMMqq_YMMqq = 2992,
    XED_IFORM_VFNMADDPS_XMMdq_XMMdq_MEMdq_XMMdq = 2993,
    XED_IFORM_VFNMADDPS_XMMdq_XMMdq_XMMdq_MEMdq = 2994,
    XED_IFORM_VFNMADDPS_XMMdq_XMMdq_XMMdq_XMMdq = 2995,
    XED_IFORM_VFNMADDPS_YMMqq_YMMqq_MEMqq_YMMqq = 2996,
    XED_IFORM_VFNMADDPS_YMMqq_YMMqq_YMMqq_MEMqq = 2997,
    XED_IFORM_VFNMADDPS_YMMqq_YMMqq_YMMqq_YMMqq = 2998,
    XED_IFORM_VFNMADDSD_XMMdq_XMMdq_MEMq_XMMdq = 2999,
    XED_IFORM_VFNMADDSD_XMMdq_XMMdq_XMMdq_MEMq = 3000,
    XED_IFORM_VFNMADDSD_XMMdq_XMMdq_XMMdq_XMMq = 3001,
    XED_IFORM_VFNMADDSD_XMMdq_XMMdq_XMMq_XMMdq = 3002,
    XED_IFORM_VFNMADDSS_XMMdq_XMMdq_MEMd_XMMdq = 3003,
    XED_IFORM_VFNMADDSS_XMMdq_XMMdq_XMMd_XMMdq = 3004,
    XED_IFORM_VFNMADDSS_XMMdq_XMMdq_XMMdq_MEMd = 3005,
    XED_IFORM_VFNMADDSS_XMMdq_XMMdq_XMMdq_XMMd = 3006,
    XED_IFORM_VFNMSUB132PD_XMMdq_XMMdq_MEMdq = 3007,
    XED_IFORM_VFNMSUB132PD_XMMdq_XMMdq_XMMdq = 3008,
    XED_IFORM_VFNMSUB132PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3009,
    XED_IFORM_VFNMSUB132PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3010,
    XED_IFORM_VFNMSUB132PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 3011,
    XED_IFORM_VFNMSUB132PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 3012,
    XED_IFORM_VFNMSUB132PD_YMMqq_YMMqq_MEMqq = 3013,
    XED_IFORM_VFNMSUB132PD_YMMqq_YMMqq_YMMqq = 3014,
    XED_IFORM_VFNMSUB132PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 3015,
    XED_IFORM_VFNMSUB132PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 3016,
    XED_IFORM_VFNMSUB132PS_XMMdq_XMMdq_MEMdq = 3017,
    XED_IFORM_VFNMSUB132PS_XMMdq_XMMdq_XMMdq = 3018,
    XED_IFORM_VFNMSUB132PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3019,
    XED_IFORM_VFNMSUB132PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3020,
    XED_IFORM_VFNMSUB132PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 3021,
    XED_IFORM_VFNMSUB132PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 3022,
    XED_IFORM_VFNMSUB132PS_YMMqq_YMMqq_MEMqq = 3023,
    XED_IFORM_VFNMSUB132PS_YMMqq_YMMqq_YMMqq = 3024,
    XED_IFORM_VFNMSUB132PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 3025,
    XED_IFORM_VFNMSUB132PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 3026,
    XED_IFORM_VFNMSUB132SD_XMMdq_XMMq_MEMq = 3027,
    XED_IFORM_VFNMSUB132SD_XMMdq_XMMq_XMMq = 3028,
    XED_IFORM_VFNMSUB132SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3029,
    XED_IFORM_VFNMSUB132SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3030,
    XED_IFORM_VFNMSUB132SS_XMMdq_XMMd_MEMd = 3031,
    XED_IFORM_VFNMSUB132SS_XMMdq_XMMd_XMMd = 3032,
    XED_IFORM_VFNMSUB132SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3033,
    XED_IFORM_VFNMSUB132SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3034,
    XED_IFORM_VFNMSUB213PD_XMMdq_XMMdq_MEMdq = 3035,
    XED_IFORM_VFNMSUB213PD_XMMdq_XMMdq_XMMdq = 3036,
    XED_IFORM_VFNMSUB213PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3037,
    XED_IFORM_VFNMSUB213PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3038,
    XED_IFORM_VFNMSUB213PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 3039,
    XED_IFORM_VFNMSUB213PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 3040,
    XED_IFORM_VFNMSUB213PD_YMMqq_YMMqq_MEMqq = 3041,
    XED_IFORM_VFNMSUB213PD_YMMqq_YMMqq_YMMqq = 3042,
    XED_IFORM_VFNMSUB213PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 3043,
    XED_IFORM_VFNMSUB213PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 3044,
    XED_IFORM_VFNMSUB213PS_XMMdq_XMMdq_MEMdq = 3045,
    XED_IFORM_VFNMSUB213PS_XMMdq_XMMdq_XMMdq = 3046,
    XED_IFORM_VFNMSUB213PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3047,
    XED_IFORM_VFNMSUB213PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3048,
    XED_IFORM_VFNMSUB213PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 3049,
    XED_IFORM_VFNMSUB213PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 3050,
    XED_IFORM_VFNMSUB213PS_YMMqq_YMMqq_MEMqq = 3051,
    XED_IFORM_VFNMSUB213PS_YMMqq_YMMqq_YMMqq = 3052,
    XED_IFORM_VFNMSUB213PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 3053,
    XED_IFORM_VFNMSUB213PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 3054,
    XED_IFORM_VFNMSUB213SD_XMMdq_XMMq_MEMq = 3055,
    XED_IFORM_VFNMSUB213SD_XMMdq_XMMq_XMMq = 3056,
    XED_IFORM_VFNMSUB213SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3057,
    XED_IFORM_VFNMSUB213SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3058,
    XED_IFORM_VFNMSUB213SS_XMMdq_XMMd_MEMd = 3059,
    XED_IFORM_VFNMSUB213SS_XMMdq_XMMd_XMMd = 3060,
    XED_IFORM_VFNMSUB213SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3061,
    XED_IFORM_VFNMSUB213SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3062,
    XED_IFORM_VFNMSUB231PD_XMMdq_XMMdq_MEMdq = 3063,
    XED_IFORM_VFNMSUB231PD_XMMdq_XMMdq_XMMdq = 3064,
    XED_IFORM_VFNMSUB231PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3065,
    XED_IFORM_VFNMSUB231PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3066,
    XED_IFORM_VFNMSUB231PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 3067,
    XED_IFORM_VFNMSUB231PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 3068,
    XED_IFORM_VFNMSUB231PD_YMMqq_YMMqq_MEMqq = 3069,
    XED_IFORM_VFNMSUB231PD_YMMqq_YMMqq_YMMqq = 3070,
    XED_IFORM_VFNMSUB231PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 3071,
    XED_IFORM_VFNMSUB231PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 3072,
    XED_IFORM_VFNMSUB231PS_XMMdq_XMMdq_MEMdq = 3073,
    XED_IFORM_VFNMSUB231PS_XMMdq_XMMdq_XMMdq = 3074,
    XED_IFORM_VFNMSUB231PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3075,
    XED_IFORM_VFNMSUB231PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3076,
    XED_IFORM_VFNMSUB231PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 3077,
    XED_IFORM_VFNMSUB231PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 3078,
    XED_IFORM_VFNMSUB231PS_YMMqq_YMMqq_MEMqq = 3079,
    XED_IFORM_VFNMSUB231PS_YMMqq_YMMqq_YMMqq = 3080,
    XED_IFORM_VFNMSUB231PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 3081,
    XED_IFORM_VFNMSUB231PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 3082,
    XED_IFORM_VFNMSUB231SD_XMMdq_XMMq_MEMq = 3083,
    XED_IFORM_VFNMSUB231SD_XMMdq_XMMq_XMMq = 3084,
    XED_IFORM_VFNMSUB231SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3085,
    XED_IFORM_VFNMSUB231SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3086,
    XED_IFORM_VFNMSUB231SS_XMMdq_XMMd_MEMd = 3087,
    XED_IFORM_VFNMSUB231SS_XMMdq_XMMd_XMMd = 3088,
    XED_IFORM_VFNMSUB231SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3089,
    XED_IFORM_VFNMSUB231SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3090,
    XED_IFORM_VFNMSUBPD_XMMdq_XMMdq_MEMdq_XMMdq = 3091,
    XED_IFORM_VFNMSUBPD_XMMdq_XMMdq_XMMdq_MEMdq = 3092,
    XED_IFORM_VFNMSUBPD_XMMdq_XMMdq_XMMdq_XMMdq = 3093,
    XED_IFORM_VFNMSUBPD_YMMqq_YMMqq_MEMqq_YMMqq = 3094,
    XED_IFORM_VFNMSUBPD_YMMqq_YMMqq_YMMqq_MEMqq = 3095,
    XED_IFORM_VFNMSUBPD_YMMqq_YMMqq_YMMqq_YMMqq = 3096,
    XED_IFORM_VFNMSUBPS_XMMdq_XMMdq_MEMdq_XMMdq = 3097,
    XED_IFORM_VFNMSUBPS_XMMdq_XMMdq_XMMdq_MEMdq = 3098,
    XED_IFORM_VFNMSUBPS_XMMdq_XMMdq_XMMdq_XMMdq = 3099,
    XED_IFORM_VFNMSUBPS_YMMqq_YMMqq_MEMqq_YMMqq = 3100,
    XED_IFORM_VFNMSUBPS_YMMqq_YMMqq_YMMqq_MEMqq = 3101,
    XED_IFORM_VFNMSUBPS_YMMqq_YMMqq_YMMqq_YMMqq = 3102,
    XED_IFORM_VFNMSUBSD_XMMdq_XMMdq_MEMq_XMMdq = 3103,
    XED_IFORM_VFNMSUBSD_XMMdq_XMMdq_XMMdq_MEMq = 3104,
    XED_IFORM_VFNMSUBSD_XMMdq_XMMdq_XMMdq_XMMq = 3105,
    XED_IFORM_VFNMSUBSD_XMMdq_XMMdq_XMMq_XMMdq = 3106,
    XED_IFORM_VFNMSUBSS_XMMdq_XMMdq_MEMd_XMMdq = 3107,
    XED_IFORM_VFNMSUBSS_XMMdq_XMMdq_XMMd_XMMdq = 3108,
    XED_IFORM_VFNMSUBSS_XMMdq_XMMdq_XMMdq_MEMd = 3109,
    XED_IFORM_VFNMSUBSS_XMMdq_XMMdq_XMMdq_XMMd = 3110,
    XED_IFORM_VFPCLASSPD_MASKmskw_MASKmskw_MEMf64_IMM8_AVX512_VL128 = 3111,
    XED_IFORM_VFPCLASSPD_MASKmskw_MASKmskw_MEMf64_IMM8_AVX512_VL256 = 3112,
    XED_IFORM_VFPCLASSPD_MASKmskw_MASKmskw_MEMf64_IMM8_AVX512_VL512 = 3113,
    XED_IFORM_VFPCLASSPD_MASKmskw_MASKmskw_XMMf64_IMM8_AVX512 = 3114,
    XED_IFORM_VFPCLASSPD_MASKmskw_MASKmskw_YMMf64_IMM8_AVX512 = 3115,
    XED_IFORM_VFPCLASSPD_MASKmskw_MASKmskw_ZMMf64_IMM8_AVX512 = 3116,
    XED_IFORM_VFPCLASSPS_MASKmskw_MASKmskw_MEMf32_IMM8_AVX512_VL128 = 3117,
    XED_IFORM_VFPCLASSPS_MASKmskw_MASKmskw_MEMf32_IMM8_AVX512_VL256 = 3118,
    XED_IFORM_VFPCLASSPS_MASKmskw_MASKmskw_MEMf32_IMM8_AVX512_VL512 = 3119,
    XED_IFORM_VFPCLASSPS_MASKmskw_MASKmskw_XMMf32_IMM8_AVX512 = 3120,
    XED_IFORM_VFPCLASSPS_MASKmskw_MASKmskw_YMMf32_IMM8_AVX512 = 3121,
    XED_IFORM_VFPCLASSPS_MASKmskw_MASKmskw_ZMMf32_IMM8_AVX512 = 3122,
    XED_IFORM_VFPCLASSSD_MASKmskw_MASKmskw_MEMf64_IMM8_AVX512 = 3123,
    XED_IFORM_VFPCLASSSD_MASKmskw_MASKmskw_XMMf64_IMM8_AVX512 = 3124,
    XED_IFORM_VFPCLASSSS_MASKmskw_MASKmskw_MEMf32_IMM8_AVX512 = 3125,
    XED_IFORM_VFPCLASSSS_MASKmskw_MASKmskw_XMMf32_IMM8_AVX512 = 3126,
    XED_IFORM_VFRCZPD_XMMdq_MEMdq = 3127,
    XED_IFORM_VFRCZPD_XMMdq_XMMdq = 3128,
    XED_IFORM_VFRCZPD_YMMqq_MEMqq = 3129,
    XED_IFORM_VFRCZPD_YMMqq_YMMqq = 3130,
    XED_IFORM_VFRCZPS_XMMdq_MEMdq = 3131,
    XED_IFORM_VFRCZPS_XMMdq_XMMdq = 3132,
    XED_IFORM_VFRCZPS_YMMqq_MEMqq = 3133,
    XED_IFORM_VFRCZPS_YMMqq_YMMqq = 3134,
    XED_IFORM_VFRCZSD_XMMdq_MEMq = 3135,
    XED_IFORM_VFRCZSD_XMMdq_XMMq = 3136,
    XED_IFORM_VFRCZSS_XMMdq_MEMd = 3137,
    XED_IFORM_VFRCZSS_XMMdq_XMMd = 3138,
    XED_IFORM_VGATHERDPD_XMMf64_MASKmskw_MEMf64_AVX512_VL128 = 3139,
    XED_IFORM_VGATHERDPD_XMMf64_MEMdq_XMMi64_VL128 = 3140,
    XED_IFORM_VGATHERDPD_YMMf64_MASKmskw_MEMf64_AVX512_VL256 = 3141,
    XED_IFORM_VGATHERDPD_YMMf64_MEMqq_YMMi64_VL256 = 3142,
    XED_IFORM_VGATHERDPD_ZMMf64_MASKmskw_MEMf64_AVX512_VL512 = 3143,
    XED_IFORM_VGATHERDPS_XMMf32_MASKmskw_MEMf32_AVX512_VL128 = 3144,
    XED_IFORM_VGATHERDPS_XMMf32_MEMdq_XMMi32_VL128 = 3145,
    XED_IFORM_VGATHERDPS_YMMf32_MASKmskw_MEMf32_AVX512_VL256 = 3146,
    XED_IFORM_VGATHERDPS_YMMf32_MEMqq_YMMi32_VL256 = 3147,
    XED_IFORM_VGATHERDPS_ZMMf32_MASKmskw_MEMf32_AVX512_VL512 = 3148,
    XED_IFORM_VGATHERPF0DPD_MEMf64_MASKmskw_AVX512PF_VL512 = 3149,
    XED_IFORM_VGATHERPF0DPS_MEMf32_MASKmskw_AVX512PF_VL512 = 3150,
    XED_IFORM_VGATHERPF0QPD_MEMf64_MASKmskw_AVX512PF_VL512 = 3151,
    XED_IFORM_VGATHERPF0QPS_MEMf32_MASKmskw_AVX512PF_VL512 = 3152,
    XED_IFORM_VGATHERPF1DPD_MEMf64_MASKmskw_AVX512PF_VL512 = 3153,
    XED_IFORM_VGATHERPF1DPS_MEMf32_MASKmskw_AVX512PF_VL512 = 3154,
    XED_IFORM_VGATHERPF1QPD_MEMf64_MASKmskw_AVX512PF_VL512 = 3155,
    XED_IFORM_VGATHERPF1QPS_MEMf32_MASKmskw_AVX512PF_VL512 = 3156,
    XED_IFORM_VGATHERQPD_XMMf64_MASKmskw_MEMf64_AVX512_VL128 = 3157,
    XED_IFORM_VGATHERQPD_XMMf64_MEMdq_XMMi64_VL128 = 3158,
    XED_IFORM_VGATHERQPD_YMMf64_MASKmskw_MEMf64_AVX512_VL256 = 3159,
    XED_IFORM_VGATHERQPD_YMMf64_MEMqq_YMMi64_VL256 = 3160,
    XED_IFORM_VGATHERQPD_ZMMf64_MASKmskw_MEMf64_AVX512_VL512 = 3161,
    XED_IFORM_VGATHERQPS_XMMf32_MASKmskw_MEMf32_AVX512_VL128 = 3162,
    XED_IFORM_VGATHERQPS_XMMf32_MASKmskw_MEMf32_AVX512_VL256 = 3163,
    XED_IFORM_VGATHERQPS_XMMf32_MEMdq_XMMi32_VL256 = 3164,
    XED_IFORM_VGATHERQPS_XMMf32_MEMq_XMMi32_VL128 = 3165,
    XED_IFORM_VGATHERQPS_YMMf32_MASKmskw_MEMf32_AVX512_VL512 = 3166,
    XED_IFORM_VGETEXPPD_XMMf64_MASKmskw_MEMf64_AVX512 = 3167,
    XED_IFORM_VGETEXPPD_XMMf64_MASKmskw_XMMf64_AVX512 = 3168,
    XED_IFORM_VGETEXPPD_YMMf64_MASKmskw_MEMf64_AVX512 = 3169,
    XED_IFORM_VGETEXPPD_YMMf64_MASKmskw_YMMf64_AVX512 = 3170,
    XED_IFORM_VGETEXPPD_ZMMf64_MASKmskw_MEMf64_AVX512 = 3171,
    XED_IFORM_VGETEXPPD_ZMMf64_MASKmskw_ZMMf64_AVX512 = 3172,
    XED_IFORM_VGETEXPPS_XMMf32_MASKmskw_MEMf32_AVX512 = 3173,
    XED_IFORM_VGETEXPPS_XMMf32_MASKmskw_XMMf32_AVX512 = 3174,
    XED_IFORM_VGETEXPPS_YMMf32_MASKmskw_MEMf32_AVX512 = 3175,
    XED_IFORM_VGETEXPPS_YMMf32_MASKmskw_YMMf32_AVX512 = 3176,
    XED_IFORM_VGETEXPPS_ZMMf32_MASKmskw_MEMf32_AVX512 = 3177,
    XED_IFORM_VGETEXPPS_ZMMf32_MASKmskw_ZMMf32_AVX512 = 3178,
    XED_IFORM_VGETEXPSD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3179,
    XED_IFORM_VGETEXPSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3180,
    XED_IFORM_VGETEXPSS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3181,
    XED_IFORM_VGETEXPSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3182,
    XED_IFORM_VGETMANTPD_XMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 3183,
    XED_IFORM_VGETMANTPD_XMMf64_MASKmskw_XMMf64_IMM8_AVX512 = 3184,
    XED_IFORM_VGETMANTPD_YMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 3185,
    XED_IFORM_VGETMANTPD_YMMf64_MASKmskw_YMMf64_IMM8_AVX512 = 3186,
    XED_IFORM_VGETMANTPD_ZMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 3187,
    XED_IFORM_VGETMANTPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512 = 3188,
    XED_IFORM_VGETMANTPS_XMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 3189,
    XED_IFORM_VGETMANTPS_XMMf32_MASKmskw_XMMf32_IMM8_AVX512 = 3190,
    XED_IFORM_VGETMANTPS_YMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 3191,
    XED_IFORM_VGETMANTPS_YMMf32_MASKmskw_YMMf32_IMM8_AVX512 = 3192,
    XED_IFORM_VGETMANTPS_ZMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 3193,
    XED_IFORM_VGETMANTPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512 = 3194,
    XED_IFORM_VGETMANTSD_XMMf64_MASKmskw_XMMf64_MEMf64_IMM8_AVX512 = 3195,
    XED_IFORM_VGETMANTSD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512 = 3196,
    XED_IFORM_VGETMANTSS_XMMf32_MASKmskw_XMMf32_MEMf32_IMM8_AVX512 = 3197,
    XED_IFORM_VGETMANTSS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512 = 3198,
    XED_IFORM_VHADDPD_XMMdq_XMMdq_MEMdq = 3199,
    XED_IFORM_VHADDPD_XMMdq_XMMdq_XMMdq = 3200,
    XED_IFORM_VHADDPD_YMMqq_YMMqq_MEMqq = 3201,
    XED_IFORM_VHADDPD_YMMqq_YMMqq_YMMqq = 3202,
    XED_IFORM_VHADDPS_XMMdq_XMMdq_MEMdq = 3203,
    XED_IFORM_VHADDPS_XMMdq_XMMdq_XMMdq = 3204,
    XED_IFORM_VHADDPS_YMMqq_YMMqq_MEMqq = 3205,
    XED_IFORM_VHADDPS_YMMqq_YMMqq_YMMqq = 3206,
    XED_IFORM_VHSUBPD_XMMdq_XMMdq_MEMdq = 3207,
    XED_IFORM_VHSUBPD_XMMdq_XMMdq_XMMdq = 3208,
    XED_IFORM_VHSUBPD_YMMqq_YMMqq_MEMqq = 3209,
    XED_IFORM_VHSUBPD_YMMqq_YMMqq_YMMqq = 3210,
    XED_IFORM_VHSUBPS_XMMdq_XMMdq_MEMdq = 3211,
    XED_IFORM_VHSUBPS_XMMdq_XMMdq_XMMdq = 3212,
    XED_IFORM_VHSUBPS_YMMqq_YMMqq_MEMqq = 3213,
    XED_IFORM_VHSUBPS_YMMqq_YMMqq_YMMqq = 3214,
    XED_IFORM_VINSERTF128_YMMqq_YMMqq_MEMdq_IMMb = 3215,
    XED_IFORM_VINSERTF128_YMMqq_YMMqq_XMMdq_IMMb = 3216,
    XED_IFORM_VINSERTF32X4_YMMf32_MASKmskw_YMMf32_MEMf32_IMM8_AVX512 = 3217,
    XED_IFORM_VINSERTF32X4_YMMf32_MASKmskw_YMMf32_XMMf32_IMM8_AVX512 = 3218,
    XED_IFORM_VINSERTF32X4_ZMMf32_MASKmskw_ZMMf32_MEMf32_IMM8_AVX512 = 3219,
    XED_IFORM_VINSERTF32X4_ZMMf32_MASKmskw_ZMMf32_XMMf32_IMM8_AVX512 = 3220,
    XED_IFORM_VINSERTF32X8_ZMMf32_MASKmskw_ZMMf32_MEMf32_IMM8_AVX512 = 3221,
    XED_IFORM_VINSERTF32X8_ZMMf32_MASKmskw_ZMMf32_YMMf32_IMM8_AVX512 = 3222,
    XED_IFORM_VINSERTF64X2_YMMf64_MASKmskw_YMMf64_MEMf64_IMM8_AVX512 = 3223,
    XED_IFORM_VINSERTF64X2_YMMf64_MASKmskw_YMMf64_XMMf64_IMM8_AVX512 = 3224,
    XED_IFORM_VINSERTF64X2_ZMMf64_MASKmskw_ZMMf64_MEMf64_IMM8_AVX512 = 3225,
    XED_IFORM_VINSERTF64X2_ZMMf64_MASKmskw_ZMMf64_XMMf64_IMM8_AVX512 = 3226,
    XED_IFORM_VINSERTF64X4_ZMMf64_MASKmskw_ZMMf64_MEMf64_IMM8_AVX512 = 3227,
    XED_IFORM_VINSERTF64X4_ZMMf64_MASKmskw_ZMMf64_YMMf64_IMM8_AVX512 = 3228,
    XED_IFORM_VINSERTI128_YMMqq_YMMqq_MEMdq_IMMb = 3229,
    XED_IFORM_VINSERTI128_YMMqq_YMMqq_XMMdq_IMMb = 3230,
    XED_IFORM_VINSERTI32X4_YMMu32_MASKmskw_YMMu32_MEMu32_IMM8_AVX512 = 3231,
    XED_IFORM_VINSERTI32X4_YMMu32_MASKmskw_YMMu32_XMMu32_IMM8_AVX512 = 3232,
    XED_IFORM_VINSERTI32X4_ZMMu32_MASKmskw_ZMMu32_MEMu32_IMM8_AVX512 = 3233,
    XED_IFORM_VINSERTI32X4_ZMMu32_MASKmskw_ZMMu32_XMMu32_IMM8_AVX512 = 3234,
    XED_IFORM_VINSERTI32X8_ZMMu32_MASKmskw_ZMMu32_MEMu32_IMM8_AVX512 = 3235,
    XED_IFORM_VINSERTI32X8_ZMMu32_MASKmskw_ZMMu32_YMMu32_IMM8_AVX512 = 3236,
    XED_IFORM_VINSERTI64X2_YMMu64_MASKmskw_YMMu64_MEMu64_IMM8_AVX512 = 3237,
    XED_IFORM_VINSERTI64X2_YMMu64_MASKmskw_YMMu64_XMMu64_IMM8_AVX512 = 3238,
    XED_IFORM_VINSERTI64X2_ZMMu64_MASKmskw_ZMMu64_MEMu64_IMM8_AVX512 = 3239,
    XED_IFORM_VINSERTI64X2_ZMMu64_MASKmskw_ZMMu64_XMMu64_IMM8_AVX512 = 3240,
    XED_IFORM_VINSERTI64X4_ZMMu64_MASKmskw_ZMMu64_MEMu64_IMM8_AVX512 = 3241,
    XED_IFORM_VINSERTI64X4_ZMMu64_MASKmskw_ZMMu64_YMMu64_IMM8_AVX512 = 3242,
    XED_IFORM_VINSERTPS_XMMdq_XMMdq_MEMd_IMMb = 3243,
    XED_IFORM_VINSERTPS_XMMdq_XMMdq_XMMdq_IMMb = 3244,
    XED_IFORM_VINSERTPS_XMMf32_XMMf32_MEMf32_IMM8_AVX512 = 3245,
    XED_IFORM_VINSERTPS_XMMf32_XMMf32_XMMf32_IMM8_AVX512 = 3246,
    XED_IFORM_VLDDQU_XMMdq_MEMdq = 3247,
    XED_IFORM_VLDDQU_YMMqq_MEMqq = 3248,
    XED_IFORM_VLDMXCSR_MEMd = 3249,
    XED_IFORM_VMASKMOVDQU_XMMdq_XMMdq = 3250,
    XED_IFORM_VMASKMOVPD_MEMdq_XMMdq_XMMdq = 3251,
    XED_IFORM_VMASKMOVPD_MEMqq_YMMqq_YMMqq = 3252,
    XED_IFORM_VMASKMOVPD_XMMdq_XMMdq_MEMdq = 3253,
    XED_IFORM_VMASKMOVPD_YMMqq_YMMqq_MEMqq = 3254,
    XED_IFORM_VMASKMOVPS_MEMdq_XMMdq_XMMdq = 3255,
    XED_IFORM_VMASKMOVPS_MEMqq_YMMqq_YMMqq = 3256,
    XED_IFORM_VMASKMOVPS_XMMdq_XMMdq_MEMdq = 3257,
    XED_IFORM_VMASKMOVPS_YMMqq_YMMqq_MEMqq = 3258,
    XED_IFORM_VMAXPD_XMMdq_XMMdq_MEMdq = 3259,
    XED_IFORM_VMAXPD_XMMdq_XMMdq_XMMdq = 3260,
    XED_IFORM_VMAXPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3261,
    XED_IFORM_VMAXPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3262,
    XED_IFORM_VMAXPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 3263,
    XED_IFORM_VMAXPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 3264,
    XED_IFORM_VMAXPD_YMMqq_YMMqq_MEMqq = 3265,
    XED_IFORM_VMAXPD_YMMqq_YMMqq_YMMqq = 3266,
    XED_IFORM_VMAXPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 3267,
    XED_IFORM_VMAXPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 3268,
    XED_IFORM_VMAXPS_XMMdq_XMMdq_MEMdq = 3269,
    XED_IFORM_VMAXPS_XMMdq_XMMdq_XMMdq = 3270,
    XED_IFORM_VMAXPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3271,
    XED_IFORM_VMAXPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3272,
    XED_IFORM_VMAXPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 3273,
    XED_IFORM_VMAXPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 3274,
    XED_IFORM_VMAXPS_YMMqq_YMMqq_MEMqq = 3275,
    XED_IFORM_VMAXPS_YMMqq_YMMqq_YMMqq = 3276,
    XED_IFORM_VMAXPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 3277,
    XED_IFORM_VMAXPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 3278,
    XED_IFORM_VMAXSD_XMMdq_XMMdq_MEMq = 3279,
    XED_IFORM_VMAXSD_XMMdq_XMMdq_XMMq = 3280,
    XED_IFORM_VMAXSD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3281,
    XED_IFORM_VMAXSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3282,
    XED_IFORM_VMAXSS_XMMdq_XMMdq_MEMd = 3283,
    XED_IFORM_VMAXSS_XMMdq_XMMdq_XMMd = 3284,
    XED_IFORM_VMAXSS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3285,
    XED_IFORM_VMAXSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3286,
    XED_IFORM_VMCALL = 3287,
    XED_IFORM_VMCLEAR_MEMq = 3288,
    XED_IFORM_VMFUNC = 3289,
    XED_IFORM_VMINPD_XMMdq_XMMdq_MEMdq = 3290,
    XED_IFORM_VMINPD_XMMdq_XMMdq_XMMdq = 3291,
    XED_IFORM_VMINPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3292,
    XED_IFORM_VMINPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3293,
    XED_IFORM_VMINPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 3294,
    XED_IFORM_VMINPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 3295,
    XED_IFORM_VMINPD_YMMqq_YMMqq_MEMqq = 3296,
    XED_IFORM_VMINPD_YMMqq_YMMqq_YMMqq = 3297,
    XED_IFORM_VMINPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 3298,
    XED_IFORM_VMINPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 3299,
    XED_IFORM_VMINPS_XMMdq_XMMdq_MEMdq = 3300,
    XED_IFORM_VMINPS_XMMdq_XMMdq_XMMdq = 3301,
    XED_IFORM_VMINPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3302,
    XED_IFORM_VMINPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3303,
    XED_IFORM_VMINPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 3304,
    XED_IFORM_VMINPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 3305,
    XED_IFORM_VMINPS_YMMqq_YMMqq_MEMqq = 3306,
    XED_IFORM_VMINPS_YMMqq_YMMqq_YMMqq = 3307,
    XED_IFORM_VMINPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 3308,
    XED_IFORM_VMINPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 3309,
    XED_IFORM_VMINSD_XMMdq_XMMdq_MEMq = 3310,
    XED_IFORM_VMINSD_XMMdq_XMMdq_XMMq = 3311,
    XED_IFORM_VMINSD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3312,
    XED_IFORM_VMINSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3313,
    XED_IFORM_VMINSS_XMMdq_XMMdq_MEMd = 3314,
    XED_IFORM_VMINSS_XMMdq_XMMdq_XMMd = 3315,
    XED_IFORM_VMINSS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3316,
    XED_IFORM_VMINSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3317,
    XED_IFORM_VMLAUNCH = 3318,
    XED_IFORM_VMLOAD_OrAX = 3319,
    XED_IFORM_VMMCALL = 3320,
    XED_IFORM_VMOVAPD_MEMdq_XMMdq = 3321,
    XED_IFORM_VMOVAPD_MEMf64_MASKmskw_XMMf64_AVX512 = 3322,
    XED_IFORM_VMOVAPD_MEMf64_MASKmskw_YMMf64_AVX512 = 3323,
    XED_IFORM_VMOVAPD_MEMf64_MASKmskw_ZMMf64_AVX512 = 3324,
    XED_IFORM_VMOVAPD_MEMqq_YMMqq = 3325,
    XED_IFORM_VMOVAPD_XMMdq_MEMdq = 3326,
    XED_IFORM_VMOVAPD_XMMdq_XMMdq_28 = 3327,
    XED_IFORM_VMOVAPD_XMMdq_XMMdq_29 = 3328,
    XED_IFORM_VMOVAPD_XMMf64_MASKmskw_MEMf64_AVX512 = 3329,
    XED_IFORM_VMOVAPD_XMMf64_MASKmskw_XMMf64_AVX512 = 3330,
    XED_IFORM_VMOVAPD_YMMf64_MASKmskw_MEMf64_AVX512 = 3331,
    XED_IFORM_VMOVAPD_YMMf64_MASKmskw_YMMf64_AVX512 = 3332,
    XED_IFORM_VMOVAPD_YMMqq_MEMqq = 3333,
    XED_IFORM_VMOVAPD_YMMqq_YMMqq_28 = 3334,
    XED_IFORM_VMOVAPD_YMMqq_YMMqq_29 = 3335,
    XED_IFORM_VMOVAPD_ZMMf64_MASKmskw_MEMf64_AVX512 = 3336,
    XED_IFORM_VMOVAPD_ZMMf64_MASKmskw_ZMMf64_AVX512 = 3337,
    XED_IFORM_VMOVAPS_MEMdq_XMMdq = 3338,
    XED_IFORM_VMOVAPS_MEMf32_MASKmskw_XMMf32_AVX512 = 3339,
    XED_IFORM_VMOVAPS_MEMf32_MASKmskw_YMMf32_AVX512 = 3340,
    XED_IFORM_VMOVAPS_MEMf32_MASKmskw_ZMMf32_AVX512 = 3341,
    XED_IFORM_VMOVAPS_MEMqq_YMMqq = 3342,
    XED_IFORM_VMOVAPS_XMMdq_MEMdq = 3343,
    XED_IFORM_VMOVAPS_XMMdq_XMMdq_28 = 3344,
    XED_IFORM_VMOVAPS_XMMdq_XMMdq_29 = 3345,
    XED_IFORM_VMOVAPS_XMMf32_MASKmskw_MEMf32_AVX512 = 3346,
    XED_IFORM_VMOVAPS_XMMf32_MASKmskw_XMMf32_AVX512 = 3347,
    XED_IFORM_VMOVAPS_YMMf32_MASKmskw_MEMf32_AVX512 = 3348,
    XED_IFORM_VMOVAPS_YMMf32_MASKmskw_YMMf32_AVX512 = 3349,
    XED_IFORM_VMOVAPS_YMMqq_MEMqq = 3350,
    XED_IFORM_VMOVAPS_YMMqq_YMMqq_28 = 3351,
    XED_IFORM_VMOVAPS_YMMqq_YMMqq_29 = 3352,
    XED_IFORM_VMOVAPS_ZMMf32_MASKmskw_MEMf32_AVX512 = 3353,
    XED_IFORM_VMOVAPS_ZMMf32_MASKmskw_ZMMf32_AVX512 = 3354,
    XED_IFORM_VMOVD_GPR32d_XMMd = 3355,
    XED_IFORM_VMOVD_GPR32u32_XMMu32_AVX512 = 3356,
    XED_IFORM_VMOVD_MEMd_XMMd = 3357,
    XED_IFORM_VMOVD_MEMu32_XMMu32_AVX512 = 3358,
    XED_IFORM_VMOVD_XMMdq_GPR32d = 3359,
    XED_IFORM_VMOVD_XMMdq_MEMd = 3360,
    XED_IFORM_VMOVD_XMMu32_GPR32u32_AVX512 = 3361,
    XED_IFORM_VMOVD_XMMu32_MEMu32_AVX512 = 3362,
    XED_IFORM_VMOVDDUP_XMMdq_MEMq = 3363,
    XED_IFORM_VMOVDDUP_XMMdq_XMMdq = 3364,
    XED_IFORM_VMOVDDUP_XMMf64_MASKmskw_MEMf64_AVX512 = 3365,
    XED_IFORM_VMOVDDUP_XMMf64_MASKmskw_XMMf64_AVX512 = 3366,
    XED_IFORM_VMOVDDUP_YMMf64_MASKmskw_MEMf64_AVX512 = 3367,
    XED_IFORM_VMOVDDUP_YMMf64_MASKmskw_YMMf64_AVX512 = 3368,
    XED_IFORM_VMOVDDUP_YMMqq_MEMqq = 3369,
    XED_IFORM_VMOVDDUP_YMMqq_YMMqq = 3370,
    XED_IFORM_VMOVDDUP_ZMMf64_MASKmskw_MEMf64_AVX512 = 3371,
    XED_IFORM_VMOVDDUP_ZMMf64_MASKmskw_ZMMf64_AVX512 = 3372,
    XED_IFORM_VMOVDQA_MEMdq_XMMdq = 3373,
    XED_IFORM_VMOVDQA_MEMqq_YMMqq = 3374,
    XED_IFORM_VMOVDQA_XMMdq_MEMdq = 3375,
    XED_IFORM_VMOVDQA_XMMdq_XMMdq_6F = 3376,
    XED_IFORM_VMOVDQA_XMMdq_XMMdq_7F = 3377,
    XED_IFORM_VMOVDQA_YMMqq_MEMqq = 3378,
    XED_IFORM_VMOVDQA_YMMqq_YMMqq_6F = 3379,
    XED_IFORM_VMOVDQA_YMMqq_YMMqq_7F = 3380,
    XED_IFORM_VMOVDQA32_MEMu32_MASKmskw_XMMu32_AVX512 = 3381,
    XED_IFORM_VMOVDQA32_MEMu32_MASKmskw_YMMu32_AVX512 = 3382,
    XED_IFORM_VMOVDQA32_MEMu32_MASKmskw_ZMMu32_AVX512 = 3383,
    XED_IFORM_VMOVDQA32_XMMu32_MASKmskw_MEMu32_AVX512 = 3384,
    XED_IFORM_VMOVDQA32_XMMu32_MASKmskw_XMMu32_AVX512 = 3385,
    XED_IFORM_VMOVDQA32_YMMu32_MASKmskw_MEMu32_AVX512 = 3386,
    XED_IFORM_VMOVDQA32_YMMu32_MASKmskw_YMMu32_AVX512 = 3387,
    XED_IFORM_VMOVDQA32_ZMMu32_MASKmskw_MEMu32_AVX512 = 3388,
    XED_IFORM_VMOVDQA32_ZMMu32_MASKmskw_ZMMu32_AVX512 = 3389,
    XED_IFORM_VMOVDQA64_MEMu64_MASKmskw_XMMu64_AVX512 = 3390,
    XED_IFORM_VMOVDQA64_MEMu64_MASKmskw_YMMu64_AVX512 = 3391,
    XED_IFORM_VMOVDQA64_MEMu64_MASKmskw_ZMMu64_AVX512 = 3392,
    XED_IFORM_VMOVDQA64_XMMu64_MASKmskw_MEMu64_AVX512 = 3393,
    XED_IFORM_VMOVDQA64_XMMu64_MASKmskw_XMMu64_AVX512 = 3394,
    XED_IFORM_VMOVDQA64_YMMu64_MASKmskw_MEMu64_AVX512 = 3395,
    XED_IFORM_VMOVDQA64_YMMu64_MASKmskw_YMMu64_AVX512 = 3396,
    XED_IFORM_VMOVDQA64_ZMMu64_MASKmskw_MEMu64_AVX512 = 3397,
    XED_IFORM_VMOVDQA64_ZMMu64_MASKmskw_ZMMu64_AVX512 = 3398,
    XED_IFORM_VMOVDQU_MEMdq_XMMdq = 3399,
    XED_IFORM_VMOVDQU_MEMqq_YMMqq = 3400,
    XED_IFORM_VMOVDQU_XMMdq_MEMdq = 3401,
    XED_IFORM_VMOVDQU_XMMdq_XMMdq_6F = 3402,
    XED_IFORM_VMOVDQU_XMMdq_XMMdq_7F = 3403,
    XED_IFORM_VMOVDQU_YMMqq_MEMqq = 3404,
    XED_IFORM_VMOVDQU_YMMqq_YMMqq_6F = 3405,
    XED_IFORM_VMOVDQU_YMMqq_YMMqq_7F = 3406,
    XED_IFORM_VMOVDQU16_MEMu16_MASKmskw_XMMu16_AVX512 = 3407,
    XED_IFORM_VMOVDQU16_MEMu16_MASKmskw_YMMu16_AVX512 = 3408,
    XED_IFORM_VMOVDQU16_MEMu16_MASKmskw_ZMMu16_AVX512 = 3409,
    XED_IFORM_VMOVDQU16_XMMu16_MASKmskw_MEMu16_AVX512 = 3410,
    XED_IFORM_VMOVDQU16_XMMu16_MASKmskw_XMMu16_AVX512 = 3411,
    XED_IFORM_VMOVDQU16_YMMu16_MASKmskw_MEMu16_AVX512 = 3412,
    XED_IFORM_VMOVDQU16_YMMu16_MASKmskw_YMMu16_AVX512 = 3413,
    XED_IFORM_VMOVDQU16_ZMMu16_MASKmskw_MEMu16_AVX512 = 3414,
    XED_IFORM_VMOVDQU16_ZMMu16_MASKmskw_ZMMu16_AVX512 = 3415,
    XED_IFORM_VMOVDQU32_MEMu32_MASKmskw_XMMu32_AVX512 = 3416,
    XED_IFORM_VMOVDQU32_MEMu32_MASKmskw_YMMu32_AVX512 = 3417,
    XED_IFORM_VMOVDQU32_MEMu32_MASKmskw_ZMMu32_AVX512 = 3418,
    XED_IFORM_VMOVDQU32_XMMu32_MASKmskw_MEMu32_AVX512 = 3419,
    XED_IFORM_VMOVDQU32_XMMu32_MASKmskw_XMMu32_AVX512 = 3420,
    XED_IFORM_VMOVDQU32_YMMu32_MASKmskw_MEMu32_AVX512 = 3421,
    XED_IFORM_VMOVDQU32_YMMu32_MASKmskw_YMMu32_AVX512 = 3422,
    XED_IFORM_VMOVDQU32_ZMMu32_MASKmskw_MEMu32_AVX512 = 3423,
    XED_IFORM_VMOVDQU32_ZMMu32_MASKmskw_ZMMu32_AVX512 = 3424,
    XED_IFORM_VMOVDQU64_MEMu64_MASKmskw_XMMu64_AVX512 = 3425,
    XED_IFORM_VMOVDQU64_MEMu64_MASKmskw_YMMu64_AVX512 = 3426,
    XED_IFORM_VMOVDQU64_MEMu64_MASKmskw_ZMMu64_AVX512 = 3427,
    XED_IFORM_VMOVDQU64_XMMu64_MASKmskw_MEMu64_AVX512 = 3428,
    XED_IFORM_VMOVDQU64_XMMu64_MASKmskw_XMMu64_AVX512 = 3429,
    XED_IFORM_VMOVDQU64_YMMu64_MASKmskw_MEMu64_AVX512 = 3430,
    XED_IFORM_VMOVDQU64_YMMu64_MASKmskw_YMMu64_AVX512 = 3431,
    XED_IFORM_VMOVDQU64_ZMMu64_MASKmskw_MEMu64_AVX512 = 3432,
    XED_IFORM_VMOVDQU64_ZMMu64_MASKmskw_ZMMu64_AVX512 = 3433,
    XED_IFORM_VMOVDQU8_MEMu8_MASKmskw_XMMu8_AVX512 = 3434,
    XED_IFORM_VMOVDQU8_MEMu8_MASKmskw_YMMu8_AVX512 = 3435,
    XED_IFORM_VMOVDQU8_MEMu8_MASKmskw_ZMMu8_AVX512 = 3436,
    XED_IFORM_VMOVDQU8_XMMu8_MASKmskw_MEMu8_AVX512 = 3437,
    XED_IFORM_VMOVDQU8_XMMu8_MASKmskw_XMMu8_AVX512 = 3438,
    XED_IFORM_VMOVDQU8_YMMu8_MASKmskw_MEMu8_AVX512 = 3439,
    XED_IFORM_VMOVDQU8_YMMu8_MASKmskw_YMMu8_AVX512 = 3440,
    XED_IFORM_VMOVDQU8_ZMMu8_MASKmskw_MEMu8_AVX512 = 3441,
    XED_IFORM_VMOVDQU8_ZMMu8_MASKmskw_ZMMu8_AVX512 = 3442,
    XED_IFORM_VMOVHLPS_XMMdq_XMMdq_XMMdq = 3443,
    XED_IFORM_VMOVHLPS_XMMf32_XMMf32_XMMf32_AVX512 = 3444,
    XED_IFORM_VMOVHPD_MEMf64_XMMf64_AVX512 = 3445,
    XED_IFORM_VMOVHPD_MEMq_XMMdq = 3446,
    XED_IFORM_VMOVHPD_XMMdq_XMMq_MEMq = 3447,
    XED_IFORM_VMOVHPD_XMMf64_XMMf64_MEMf64_AVX512 = 3448,
    XED_IFORM_VMOVHPS_MEMf32_XMMf32_AVX512 = 3449,
    XED_IFORM_VMOVHPS_MEMq_XMMdq = 3450,
    XED_IFORM_VMOVHPS_XMMdq_XMMq_MEMq = 3451,
    XED_IFORM_VMOVHPS_XMMf32_XMMf32_MEMf32_AVX512 = 3452,
    XED_IFORM_VMOVLHPS_XMMdq_XMMq_XMMq = 3453,
    XED_IFORM_VMOVLHPS_XMMf32_XMMf32_XMMf32_AVX512 = 3454,
    XED_IFORM_VMOVLPD_MEMf64_XMMf64_AVX512 = 3455,
    XED_IFORM_VMOVLPD_MEMq_XMMq = 3456,
    XED_IFORM_VMOVLPD_XMMdq_XMMdq_MEMq = 3457,
    XED_IFORM_VMOVLPD_XMMf64_XMMf64_MEMf64_AVX512 = 3458,
    XED_IFORM_VMOVLPS_MEMf32_XMMf32_AVX512 = 3459,
    XED_IFORM_VMOVLPS_MEMq_XMMq = 3460,
    XED_IFORM_VMOVLPS_XMMdq_XMMdq_MEMq = 3461,
    XED_IFORM_VMOVLPS_XMMf32_XMMf32_MEMf32_AVX512 = 3462,
    XED_IFORM_VMOVMSKPD_GPR32d_XMMdq = 3463,
    XED_IFORM_VMOVMSKPD_GPR32d_YMMqq = 3464,
    XED_IFORM_VMOVMSKPS_GPR32d_XMMdq = 3465,
    XED_IFORM_VMOVMSKPS_GPR32d_YMMqq = 3466,
    XED_IFORM_VMOVNTDQ_MEMdq_XMMdq = 3467,
    XED_IFORM_VMOVNTDQ_MEMqq_YMMqq = 3468,
    XED_IFORM_VMOVNTDQ_MEMu32_XMMu32_AVX512 = 3469,
    XED_IFORM_VMOVNTDQ_MEMu32_YMMu32_AVX512 = 3470,
    XED_IFORM_VMOVNTDQ_MEMu32_ZMMu32_AVX512 = 3471,
    XED_IFORM_VMOVNTDQA_XMMdq_MEMdq = 3472,
    XED_IFORM_VMOVNTDQA_XMMu32_MEMu32_AVX512 = 3473,
    XED_IFORM_VMOVNTDQA_YMMqq_MEMqq = 3474,
    XED_IFORM_VMOVNTDQA_YMMu32_MEMu32_AVX512 = 3475,
    XED_IFORM_VMOVNTDQA_ZMMu32_MEMu32_AVX512 = 3476,
    XED_IFORM_VMOVNTPD_MEMdq_XMMdq = 3477,
    XED_IFORM_VMOVNTPD_MEMf64_XMMf64_AVX512 = 3478,
    XED_IFORM_VMOVNTPD_MEMf64_YMMf64_AVX512 = 3479,
    XED_IFORM_VMOVNTPD_MEMf64_ZMMf64_AVX512 = 3480,
    XED_IFORM_VMOVNTPD_MEMqq_YMMqq = 3481,
    XED_IFORM_VMOVNTPS_MEMdq_XMMdq = 3482,
    XED_IFORM_VMOVNTPS_MEMf32_XMMf32_AVX512 = 3483,
    XED_IFORM_VMOVNTPS_MEMf32_YMMf32_AVX512 = 3484,
    XED_IFORM_VMOVNTPS_MEMf32_ZMMf32_AVX512 = 3485,
    XED_IFORM_VMOVNTPS_MEMqq_YMMqq = 3486,
    XED_IFORM_VMOVQ_GPR64q_XMMq = 3487,
    XED_IFORM_VMOVQ_GPR64u64_XMMu64_AVX512 = 3488,
    XED_IFORM_VMOVQ_MEMq_XMMq_7E = 3489,
    XED_IFORM_VMOVQ_MEMq_XMMq_D6 = 3490,
    XED_IFORM_VMOVQ_MEMu64_XMMu64_AVX512 = 3491,
    XED_IFORM_VMOVQ_XMMdq_GPR64q = 3492,
    XED_IFORM_VMOVQ_XMMdq_MEMq_6E = 3493,
    XED_IFORM_VMOVQ_XMMdq_MEMq_7E = 3494,
    XED_IFORM_VMOVQ_XMMdq_XMMq_7E = 3495,
    XED_IFORM_VMOVQ_XMMdq_XMMq_D6 = 3496,
    XED_IFORM_VMOVQ_XMMu64_GPR64u64_AVX512 = 3497,
    XED_IFORM_VMOVQ_XMMu64_MEMu64_AVX512 = 3498,
    XED_IFORM_VMOVQ_XMMu64_XMMu64_AVX512 = 3499,
    XED_IFORM_VMOVSD_MEMf64_MASKmskw_XMMf64_AVX512 = 3500,
    XED_IFORM_VMOVSD_MEMq_XMMq = 3501,
    XED_IFORM_VMOVSD_XMMdq_MEMq = 3502,
    XED_IFORM_VMOVSD_XMMdq_XMMdq_XMMq_10 = 3503,
    XED_IFORM_VMOVSD_XMMdq_XMMdq_XMMq_11 = 3504,
    XED_IFORM_VMOVSD_XMMf64_MASKmskw_MEMf64_AVX512 = 3505,
    XED_IFORM_VMOVSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3506,
    XED_IFORM_VMOVSHDUP_XMMdq_MEMdq = 3507,
    XED_IFORM_VMOVSHDUP_XMMdq_XMMdq = 3508,
    XED_IFORM_VMOVSHDUP_XMMf32_MASKmskw_MEMf32_AVX512 = 3509,
    XED_IFORM_VMOVSHDUP_XMMf32_MASKmskw_XMMf32_AVX512 = 3510,
    XED_IFORM_VMOVSHDUP_YMMf32_MASKmskw_MEMf32_AVX512 = 3511,
    XED_IFORM_VMOVSHDUP_YMMf32_MASKmskw_YMMf32_AVX512 = 3512,
    XED_IFORM_VMOVSHDUP_YMMqq_MEMqq = 3513,
    XED_IFORM_VMOVSHDUP_YMMqq_YMMqq = 3514,
    XED_IFORM_VMOVSHDUP_ZMMf32_MASKmskw_MEMf32_AVX512 = 3515,
    XED_IFORM_VMOVSHDUP_ZMMf32_MASKmskw_ZMMf32_AVX512 = 3516,
    XED_IFORM_VMOVSLDUP_XMMdq_MEMdq = 3517,
    XED_IFORM_VMOVSLDUP_XMMdq_XMMdq = 3518,
    XED_IFORM_VMOVSLDUP_XMMf32_MASKmskw_MEMf32_AVX512 = 3519,
    XED_IFORM_VMOVSLDUP_XMMf32_MASKmskw_XMMf32_AVX512 = 3520,
    XED_IFORM_VMOVSLDUP_YMMf32_MASKmskw_MEMf32_AVX512 = 3521,
    XED_IFORM_VMOVSLDUP_YMMf32_MASKmskw_YMMf32_AVX512 = 3522,
    XED_IFORM_VMOVSLDUP_YMMqq_MEMqq = 3523,
    XED_IFORM_VMOVSLDUP_YMMqq_YMMqq = 3524,
    XED_IFORM_VMOVSLDUP_ZMMf32_MASKmskw_MEMf32_AVX512 = 3525,
    XED_IFORM_VMOVSLDUP_ZMMf32_MASKmskw_ZMMf32_AVX512 = 3526,
    XED_IFORM_VMOVSS_MEMd_XMMd = 3527,
    XED_IFORM_VMOVSS_MEMf32_MASKmskw_XMMf32_AVX512 = 3528,
    XED_IFORM_VMOVSS_XMMdq_MEMd = 3529,
    XED_IFORM_VMOVSS_XMMdq_XMMdq_XMMd_10 = 3530,
    XED_IFORM_VMOVSS_XMMdq_XMMdq_XMMd_11 = 3531,
    XED_IFORM_VMOVSS_XMMf32_MASKmskw_MEMf32_AVX512 = 3532,
    XED_IFORM_VMOVSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3533,
    XED_IFORM_VMOVUPD_MEMdq_XMMdq = 3534,
    XED_IFORM_VMOVUPD_MEMf64_MASKmskw_XMMf64_AVX512 = 3535,
    XED_IFORM_VMOVUPD_MEMf64_MASKmskw_YMMf64_AVX512 = 3536,
    XED_IFORM_VMOVUPD_MEMf64_MASKmskw_ZMMf64_AVX512 = 3537,
    XED_IFORM_VMOVUPD_MEMqq_YMMqq = 3538,
    XED_IFORM_VMOVUPD_XMMdq_MEMdq = 3539,
    XED_IFORM_VMOVUPD_XMMdq_XMMdq_10 = 3540,
    XED_IFORM_VMOVUPD_XMMdq_XMMdq_11 = 3541,
    XED_IFORM_VMOVUPD_XMMf64_MASKmskw_MEMf64_AVX512 = 3542,
    XED_IFORM_VMOVUPD_XMMf64_MASKmskw_XMMf64_AVX512 = 3543,
    XED_IFORM_VMOVUPD_YMMf64_MASKmskw_MEMf64_AVX512 = 3544,
    XED_IFORM_VMOVUPD_YMMf64_MASKmskw_YMMf64_AVX512 = 3545,
    XED_IFORM_VMOVUPD_YMMqq_MEMqq = 3546,
    XED_IFORM_VMOVUPD_YMMqq_YMMqq_10 = 3547,
    XED_IFORM_VMOVUPD_YMMqq_YMMqq_11 = 3548,
    XED_IFORM_VMOVUPD_ZMMf64_MASKmskw_MEMf64_AVX512 = 3549,
    XED_IFORM_VMOVUPD_ZMMf64_MASKmskw_ZMMf64_AVX512 = 3550,
    XED_IFORM_VMOVUPS_MEMdq_XMMdq = 3551,
    XED_IFORM_VMOVUPS_MEMf32_MASKmskw_XMMf32_AVX512 = 3552,
    XED_IFORM_VMOVUPS_MEMf32_MASKmskw_YMMf32_AVX512 = 3553,
    XED_IFORM_VMOVUPS_MEMf32_MASKmskw_ZMMf32_AVX512 = 3554,
    XED_IFORM_VMOVUPS_MEMqq_YMMqq = 3555,
    XED_IFORM_VMOVUPS_XMMdq_MEMdq = 3556,
    XED_IFORM_VMOVUPS_XMMdq_XMMdq_10 = 3557,
    XED_IFORM_VMOVUPS_XMMdq_XMMdq_11 = 3558,
    XED_IFORM_VMOVUPS_XMMf32_MASKmskw_MEMf32_AVX512 = 3559,
    XED_IFORM_VMOVUPS_XMMf32_MASKmskw_XMMf32_AVX512 = 3560,
    XED_IFORM_VMOVUPS_YMMf32_MASKmskw_MEMf32_AVX512 = 3561,
    XED_IFORM_VMOVUPS_YMMf32_MASKmskw_YMMf32_AVX512 = 3562,
    XED_IFORM_VMOVUPS_YMMqq_MEMqq = 3563,
    XED_IFORM_VMOVUPS_YMMqq_YMMqq_10 = 3564,
    XED_IFORM_VMOVUPS_YMMqq_YMMqq_11 = 3565,
    XED_IFORM_VMOVUPS_ZMMf32_MASKmskw_MEMf32_AVX512 = 3566,
    XED_IFORM_VMOVUPS_ZMMf32_MASKmskw_ZMMf32_AVX512 = 3567,
    XED_IFORM_VMPSADBW_XMMdq_XMMdq_MEMdq_IMMb = 3568,
    XED_IFORM_VMPSADBW_XMMdq_XMMdq_XMMdq_IMMb = 3569,
    XED_IFORM_VMPSADBW_YMMqq_YMMqq_MEMqq_IMMb = 3570,
    XED_IFORM_VMPSADBW_YMMqq_YMMqq_YMMqq_IMMb = 3571,
    XED_IFORM_VMPTRLD_MEMq = 3572,
    XED_IFORM_VMPTRST_MEMq = 3573,
    XED_IFORM_VMREAD_GPR32_GPR32 = 3574,
    XED_IFORM_VMREAD_GPR64_GPR64 = 3575,
    XED_IFORM_VMREAD_MEMd_GPR32 = 3576,
    XED_IFORM_VMREAD_MEMq_GPR64 = 3577,
    XED_IFORM_VMRESUME = 3578,
    XED_IFORM_VMRUN_OrAX = 3579,
    XED_IFORM_VMSAVE = 3580,
    XED_IFORM_VMULPD_XMMdq_XMMdq_MEMdq = 3581,
    XED_IFORM_VMULPD_XMMdq_XMMdq_XMMdq = 3582,
    XED_IFORM_VMULPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3583,
    XED_IFORM_VMULPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3584,
    XED_IFORM_VMULPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 3585,
    XED_IFORM_VMULPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 3586,
    XED_IFORM_VMULPD_YMMqq_YMMqq_MEMqq = 3587,
    XED_IFORM_VMULPD_YMMqq_YMMqq_YMMqq = 3588,
    XED_IFORM_VMULPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 3589,
    XED_IFORM_VMULPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 3590,
    XED_IFORM_VMULPS_XMMdq_XMMdq_MEMdq = 3591,
    XED_IFORM_VMULPS_XMMdq_XMMdq_XMMdq = 3592,
    XED_IFORM_VMULPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3593,
    XED_IFORM_VMULPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3594,
    XED_IFORM_VMULPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 3595,
    XED_IFORM_VMULPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 3596,
    XED_IFORM_VMULPS_YMMqq_YMMqq_MEMqq = 3597,
    XED_IFORM_VMULPS_YMMqq_YMMqq_YMMqq = 3598,
    XED_IFORM_VMULPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 3599,
    XED_IFORM_VMULPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 3600,
    XED_IFORM_VMULSD_XMMdq_XMMdq_MEMq = 3601,
    XED_IFORM_VMULSD_XMMdq_XMMdq_XMMq = 3602,
    XED_IFORM_VMULSD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3603,
    XED_IFORM_VMULSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3604,
    XED_IFORM_VMULSS_XMMdq_XMMdq_MEMd = 3605,
    XED_IFORM_VMULSS_XMMdq_XMMdq_XMMd = 3606,
    XED_IFORM_VMULSS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3607,
    XED_IFORM_VMULSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3608,
    XED_IFORM_VMWRITE_GPR32_GPR32 = 3609,
    XED_IFORM_VMWRITE_GPR32_MEMd = 3610,
    XED_IFORM_VMWRITE_GPR64_GPR64 = 3611,
    XED_IFORM_VMWRITE_GPR64_MEMq = 3612,
    XED_IFORM_VMXOFF = 3613,
    XED_IFORM_VMXON_MEMq = 3614,
    XED_IFORM_VORPD_XMMdq_XMMdq_MEMdq = 3615,
    XED_IFORM_VORPD_XMMdq_XMMdq_XMMdq = 3616,
    XED_IFORM_VORPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 3617,
    XED_IFORM_VORPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 3618,
    XED_IFORM_VORPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 3619,
    XED_IFORM_VORPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 3620,
    XED_IFORM_VORPD_YMMqq_YMMqq_MEMqq = 3621,
    XED_IFORM_VORPD_YMMqq_YMMqq_YMMqq = 3622,
    XED_IFORM_VORPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 3623,
    XED_IFORM_VORPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 3624,
    XED_IFORM_VORPS_XMMdq_XMMdq_MEMdq = 3625,
    XED_IFORM_VORPS_XMMdq_XMMdq_XMMdq = 3626,
    XED_IFORM_VORPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 3627,
    XED_IFORM_VORPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 3628,
    XED_IFORM_VORPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 3629,
    XED_IFORM_VORPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 3630,
    XED_IFORM_VORPS_YMMqq_YMMqq_MEMqq = 3631,
    XED_IFORM_VORPS_YMMqq_YMMqq_YMMqq = 3632,
    XED_IFORM_VORPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 3633,
    XED_IFORM_VORPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 3634,
    XED_IFORM_VP4DPWSSD_ZMMi32_MASKmskw_ZMMi16_MEMu32_AVX512 = 3635,
    XED_IFORM_VP4DPWSSDS_ZMMi32_MASKmskw_ZMMi16_MEMu32_AVX512 = 3636,
    XED_IFORM_VPABSB_XMMdq_MEMdq = 3637,
    XED_IFORM_VPABSB_XMMdq_XMMdq = 3638,
    XED_IFORM_VPABSB_XMMi8_MASKmskw_MEMi8_AVX512 = 3639,
    XED_IFORM_VPABSB_XMMi8_MASKmskw_XMMi8_AVX512 = 3640,
    XED_IFORM_VPABSB_YMMi8_MASKmskw_MEMi8_AVX512 = 3641,
    XED_IFORM_VPABSB_YMMi8_MASKmskw_YMMi8_AVX512 = 3642,
    XED_IFORM_VPABSB_YMMqq_MEMqq = 3643,
    XED_IFORM_VPABSB_YMMqq_YMMqq = 3644,
    XED_IFORM_VPABSB_ZMMi8_MASKmskw_MEMi8_AVX512 = 3645,
    XED_IFORM_VPABSB_ZMMi8_MASKmskw_ZMMi8_AVX512 = 3646,
    XED_IFORM_VPABSD_XMMdq_MEMdq = 3647,
    XED_IFORM_VPABSD_XMMdq_XMMdq = 3648,
    XED_IFORM_VPABSD_XMMi32_MASKmskw_MEMi32_AVX512 = 3649,
    XED_IFORM_VPABSD_XMMi32_MASKmskw_XMMi32_AVX512 = 3650,
    XED_IFORM_VPABSD_YMMi32_MASKmskw_MEMi32_AVX512 = 3651,
    XED_IFORM_VPABSD_YMMi32_MASKmskw_YMMi32_AVX512 = 3652,
    XED_IFORM_VPABSD_YMMqq_MEMqq = 3653,
    XED_IFORM_VPABSD_YMMqq_YMMqq = 3654,
    XED_IFORM_VPABSD_ZMMi32_MASKmskw_MEMi32_AVX512 = 3655,
    XED_IFORM_VPABSD_ZMMi32_MASKmskw_ZMMi32_AVX512 = 3656,
    XED_IFORM_VPABSQ_XMMi64_MASKmskw_MEMi64_AVX512 = 3657,
    XED_IFORM_VPABSQ_XMMi64_MASKmskw_XMMi64_AVX512 = 3658,
    XED_IFORM_VPABSQ_YMMi64_MASKmskw_MEMi64_AVX512 = 3659,
    XED_IFORM_VPABSQ_YMMi64_MASKmskw_YMMi64_AVX512 = 3660,
    XED_IFORM_VPABSQ_ZMMi64_MASKmskw_MEMi64_AVX512 = 3661,
    XED_IFORM_VPABSQ_ZMMi64_MASKmskw_ZMMi64_AVX512 = 3662,
    XED_IFORM_VPABSW_XMMdq_MEMdq = 3663,
    XED_IFORM_VPABSW_XMMdq_XMMdq = 3664,
    XED_IFORM_VPABSW_XMMi16_MASKmskw_MEMi16_AVX512 = 3665,
    XED_IFORM_VPABSW_XMMi16_MASKmskw_XMMi16_AVX512 = 3666,
    XED_IFORM_VPABSW_YMMi16_MASKmskw_MEMi16_AVX512 = 3667,
    XED_IFORM_VPABSW_YMMi16_MASKmskw_YMMi16_AVX512 = 3668,
    XED_IFORM_VPABSW_YMMqq_MEMqq = 3669,
    XED_IFORM_VPABSW_YMMqq_YMMqq = 3670,
    XED_IFORM_VPABSW_ZMMi16_MASKmskw_MEMi16_AVX512 = 3671,
    XED_IFORM_VPABSW_ZMMi16_MASKmskw_ZMMi16_AVX512 = 3672,
    XED_IFORM_VPACKSSDW_XMMdq_XMMdq_MEMdq = 3673,
    XED_IFORM_VPACKSSDW_XMMdq_XMMdq_XMMdq = 3674,
    XED_IFORM_VPACKSSDW_XMMi16_MASKmskw_XMMi32_MEMi32_AVX512 = 3675,
    XED_IFORM_VPACKSSDW_XMMi16_MASKmskw_XMMi32_XMMi32_AVX512 = 3676,
    XED_IFORM_VPACKSSDW_YMMi16_MASKmskw_YMMi32_MEMi32_AVX512 = 3677,
    XED_IFORM_VPACKSSDW_YMMi16_MASKmskw_YMMi32_YMMi32_AVX512 = 3678,
    XED_IFORM_VPACKSSDW_YMMqq_YMMqq_MEMqq = 3679,
    XED_IFORM_VPACKSSDW_YMMqq_YMMqq_YMMqq = 3680,
    XED_IFORM_VPACKSSDW_ZMMi16_MASKmskw_ZMMi32_MEMi32_AVX512 = 3681,
    XED_IFORM_VPACKSSDW_ZMMi16_MASKmskw_ZMMi32_ZMMi32_AVX512 = 3682,
    XED_IFORM_VPACKSSWB_XMMdq_XMMdq_MEMdq = 3683,
    XED_IFORM_VPACKSSWB_XMMdq_XMMdq_XMMdq = 3684,
    XED_IFORM_VPACKSSWB_XMMi8_MASKmskw_XMMi16_MEMi16_AVX512 = 3685,
    XED_IFORM_VPACKSSWB_XMMi8_MASKmskw_XMMi16_XMMi16_AVX512 = 3686,
    XED_IFORM_VPACKSSWB_YMMi8_MASKmskw_YMMi16_MEMi16_AVX512 = 3687,
    XED_IFORM_VPACKSSWB_YMMi8_MASKmskw_YMMi16_YMMi16_AVX512 = 3688,
    XED_IFORM_VPACKSSWB_YMMqq_YMMqq_MEMqq = 3689,
    XED_IFORM_VPACKSSWB_YMMqq_YMMqq_YMMqq = 3690,
    XED_IFORM_VPACKSSWB_ZMMi8_MASKmskw_ZMMi16_MEMi16_AVX512 = 3691,
    XED_IFORM_VPACKSSWB_ZMMi8_MASKmskw_ZMMi16_ZMMi16_AVX512 = 3692,
    XED_IFORM_VPACKUSDW_XMMdq_XMMdq_MEMdq = 3693,
    XED_IFORM_VPACKUSDW_XMMdq_XMMdq_XMMdq = 3694,
    XED_IFORM_VPACKUSDW_XMMu16_MASKmskw_XMMu32_MEMu32_AVX512 = 3695,
    XED_IFORM_VPACKUSDW_XMMu16_MASKmskw_XMMu32_XMMu32_AVX512 = 3696,
    XED_IFORM_VPACKUSDW_YMMqq_YMMqq_MEMqq = 3697,
    XED_IFORM_VPACKUSDW_YMMqq_YMMqq_YMMqq = 3698,
    XED_IFORM_VPACKUSDW_YMMu16_MASKmskw_YMMu32_MEMu32_AVX512 = 3699,
    XED_IFORM_VPACKUSDW_YMMu16_MASKmskw_YMMu32_YMMu32_AVX512 = 3700,
    XED_IFORM_VPACKUSDW_ZMMu16_MASKmskw_ZMMu32_MEMu32_AVX512 = 3701,
    XED_IFORM_VPACKUSDW_ZMMu16_MASKmskw_ZMMu32_ZMMu32_AVX512 = 3702,
    XED_IFORM_VPACKUSWB_XMMdq_XMMdq_MEMdq = 3703,
    XED_IFORM_VPACKUSWB_XMMdq_XMMdq_XMMdq = 3704,
    XED_IFORM_VPACKUSWB_XMMu8_MASKmskw_XMMu16_MEMu16_AVX512 = 3705,
    XED_IFORM_VPACKUSWB_XMMu8_MASKmskw_XMMu16_XMMu16_AVX512 = 3706,
    XED_IFORM_VPACKUSWB_YMMqq_YMMqq_MEMqq = 3707,
    XED_IFORM_VPACKUSWB_YMMqq_YMMqq_YMMqq = 3708,
    XED_IFORM_VPACKUSWB_YMMu8_MASKmskw_YMMu16_MEMu16_AVX512 = 3709,
    XED_IFORM_VPACKUSWB_YMMu8_MASKmskw_YMMu16_YMMu16_AVX512 = 3710,
    XED_IFORM_VPACKUSWB_ZMMu8_MASKmskw_ZMMu16_MEMu16_AVX512 = 3711,
    XED_IFORM_VPACKUSWB_ZMMu8_MASKmskw_ZMMu16_ZMMu16_AVX512 = 3712,
    XED_IFORM_VPADDB_XMMdq_XMMdq_MEMdq = 3713,
    XED_IFORM_VPADDB_XMMdq_XMMdq_XMMdq = 3714,
    XED_IFORM_VPADDB_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 3715,
    XED_IFORM_VPADDB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 3716,
    XED_IFORM_VPADDB_YMMqq_YMMqq_MEMqq = 3717,
    XED_IFORM_VPADDB_YMMqq_YMMqq_YMMqq = 3718,
    XED_IFORM_VPADDB_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 3719,
    XED_IFORM_VPADDB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 3720,
    XED_IFORM_VPADDB_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 3721,
    XED_IFORM_VPADDB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 3722,
    XED_IFORM_VPADDD_XMMdq_XMMdq_MEMdq = 3723,
    XED_IFORM_VPADDD_XMMdq_XMMdq_XMMdq = 3724,
    XED_IFORM_VPADDD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 3725,
    XED_IFORM_VPADDD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 3726,
    XED_IFORM_VPADDD_YMMqq_YMMqq_MEMqq = 3727,
    XED_IFORM_VPADDD_YMMqq_YMMqq_YMMqq = 3728,
    XED_IFORM_VPADDD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 3729,
    XED_IFORM_VPADDD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 3730,
    XED_IFORM_VPADDD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 3731,
    XED_IFORM_VPADDD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 3732,
    XED_IFORM_VPADDQ_XMMdq_XMMdq_MEMdq = 3733,
    XED_IFORM_VPADDQ_XMMdq_XMMdq_XMMdq = 3734,
    XED_IFORM_VPADDQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 3735,
    XED_IFORM_VPADDQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 3736,
    XED_IFORM_VPADDQ_YMMqq_YMMqq_MEMqq = 3737,
    XED_IFORM_VPADDQ_YMMqq_YMMqq_YMMqq = 3738,
    XED_IFORM_VPADDQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 3739,
    XED_IFORM_VPADDQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 3740,
    XED_IFORM_VPADDQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 3741,
    XED_IFORM_VPADDQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 3742,
    XED_IFORM_VPADDSB_XMMdq_XMMdq_MEMdq = 3743,
    XED_IFORM_VPADDSB_XMMdq_XMMdq_XMMdq = 3744,
    XED_IFORM_VPADDSB_XMMi8_MASKmskw_XMMi8_MEMi8_AVX512 = 3745,
    XED_IFORM_VPADDSB_XMMi8_MASKmskw_XMMi8_XMMi8_AVX512 = 3746,
    XED_IFORM_VPADDSB_YMMi8_MASKmskw_YMMi8_MEMi8_AVX512 = 3747,
    XED_IFORM_VPADDSB_YMMi8_MASKmskw_YMMi8_YMMi8_AVX512 = 3748,
    XED_IFORM_VPADDSB_YMMqq_YMMqq_MEMqq = 3749,
    XED_IFORM_VPADDSB_YMMqq_YMMqq_YMMqq = 3750,
    XED_IFORM_VPADDSB_ZMMi8_MASKmskw_ZMMi8_MEMi8_AVX512 = 3751,
    XED_IFORM_VPADDSB_ZMMi8_MASKmskw_ZMMi8_ZMMi8_AVX512 = 3752,
    XED_IFORM_VPADDSW_XMMdq_XMMdq_MEMdq = 3753,
    XED_IFORM_VPADDSW_XMMdq_XMMdq_XMMdq = 3754,
    XED_IFORM_VPADDSW_XMMi16_MASKmskw_XMMi16_MEMi16_AVX512 = 3755,
    XED_IFORM_VPADDSW_XMMi16_MASKmskw_XMMi16_XMMi16_AVX512 = 3756,
    XED_IFORM_VPADDSW_YMMi16_MASKmskw_YMMi16_MEMi16_AVX512 = 3757,
    XED_IFORM_VPADDSW_YMMi16_MASKmskw_YMMi16_YMMi16_AVX512 = 3758,
    XED_IFORM_VPADDSW_YMMqq_YMMqq_MEMqq = 3759,
    XED_IFORM_VPADDSW_YMMqq_YMMqq_YMMqq = 3760,
    XED_IFORM_VPADDSW_ZMMi16_MASKmskw_ZMMi16_MEMi16_AVX512 = 3761,
    XED_IFORM_VPADDSW_ZMMi16_MASKmskw_ZMMi16_ZMMi16_AVX512 = 3762,
    XED_IFORM_VPADDUSB_XMMdq_XMMdq_MEMdq = 3763,
    XED_IFORM_VPADDUSB_XMMdq_XMMdq_XMMdq = 3764,
    XED_IFORM_VPADDUSB_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 3765,
    XED_IFORM_VPADDUSB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 3766,
    XED_IFORM_VPADDUSB_YMMqq_YMMqq_MEMqq = 3767,
    XED_IFORM_VPADDUSB_YMMqq_YMMqq_YMMqq = 3768,
    XED_IFORM_VPADDUSB_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 3769,
    XED_IFORM_VPADDUSB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 3770,
    XED_IFORM_VPADDUSB_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 3771,
    XED_IFORM_VPADDUSB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 3772,
    XED_IFORM_VPADDUSW_XMMdq_XMMdq_MEMdq = 3773,
    XED_IFORM_VPADDUSW_XMMdq_XMMdq_XMMdq = 3774,
    XED_IFORM_VPADDUSW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 3775,
    XED_IFORM_VPADDUSW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 3776,
    XED_IFORM_VPADDUSW_YMMqq_YMMqq_MEMqq = 3777,
    XED_IFORM_VPADDUSW_YMMqq_YMMqq_YMMqq = 3778,
    XED_IFORM_VPADDUSW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 3779,
    XED_IFORM_VPADDUSW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 3780,
    XED_IFORM_VPADDUSW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 3781,
    XED_IFORM_VPADDUSW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 3782,
    XED_IFORM_VPADDW_XMMdq_XMMdq_MEMdq = 3783,
    XED_IFORM_VPADDW_XMMdq_XMMdq_XMMdq = 3784,
    XED_IFORM_VPADDW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 3785,
    XED_IFORM_VPADDW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 3786,
    XED_IFORM_VPADDW_YMMqq_YMMqq_MEMqq = 3787,
    XED_IFORM_VPADDW_YMMqq_YMMqq_YMMqq = 3788,
    XED_IFORM_VPADDW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 3789,
    XED_IFORM_VPADDW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 3790,
    XED_IFORM_VPADDW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 3791,
    XED_IFORM_VPADDW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 3792,
    XED_IFORM_VPALIGNR_XMMdq_XMMdq_MEMdq_IMMb = 3793,
    XED_IFORM_VPALIGNR_XMMdq_XMMdq_XMMdq_IMMb = 3794,
    XED_IFORM_VPALIGNR_XMMu8_MASKmskw_XMMu8_MEMu8_IMM8_AVX512 = 3795,
    XED_IFORM_VPALIGNR_XMMu8_MASKmskw_XMMu8_XMMu8_IMM8_AVX512 = 3796,
    XED_IFORM_VPALIGNR_YMMqq_YMMqq_MEMqq_IMMb = 3797,
    XED_IFORM_VPALIGNR_YMMqq_YMMqq_YMMqq_IMMb = 3798,
    XED_IFORM_VPALIGNR_YMMu8_MASKmskw_YMMu8_MEMu8_IMM8_AVX512 = 3799,
    XED_IFORM_VPALIGNR_YMMu8_MASKmskw_YMMu8_YMMu8_IMM8_AVX512 = 3800,
    XED_IFORM_VPALIGNR_ZMMu8_MASKmskw_ZMMu8_MEMu8_IMM8_AVX512 = 3801,
    XED_IFORM_VPALIGNR_ZMMu8_MASKmskw_ZMMu8_ZMMu8_IMM8_AVX512 = 3802,
    XED_IFORM_VPAND_XMMdq_XMMdq_MEMdq = 3803,
    XED_IFORM_VPAND_XMMdq_XMMdq_XMMdq = 3804,
    XED_IFORM_VPAND_YMMqq_YMMqq_MEMqq = 3805,
    XED_IFORM_VPAND_YMMqq_YMMqq_YMMqq = 3806,
    XED_IFORM_VPANDD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 3807,
    XED_IFORM_VPANDD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 3808,
    XED_IFORM_VPANDD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 3809,
    XED_IFORM_VPANDD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 3810,
    XED_IFORM_VPANDD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 3811,
    XED_IFORM_VPANDD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 3812,
    XED_IFORM_VPANDN_XMMdq_XMMdq_MEMdq = 3813,
    XED_IFORM_VPANDN_XMMdq_XMMdq_XMMdq = 3814,
    XED_IFORM_VPANDN_YMMqq_YMMqq_MEMqq = 3815,
    XED_IFORM_VPANDN_YMMqq_YMMqq_YMMqq = 3816,
    XED_IFORM_VPANDND_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 3817,
    XED_IFORM_VPANDND_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 3818,
    XED_IFORM_VPANDND_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 3819,
    XED_IFORM_VPANDND_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 3820,
    XED_IFORM_VPANDND_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 3821,
    XED_IFORM_VPANDND_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 3822,
    XED_IFORM_VPANDNQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 3823,
    XED_IFORM_VPANDNQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 3824,
    XED_IFORM_VPANDNQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 3825,
    XED_IFORM_VPANDNQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 3826,
    XED_IFORM_VPANDNQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 3827,
    XED_IFORM_VPANDNQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 3828,
    XED_IFORM_VPANDQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 3829,
    XED_IFORM_VPANDQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 3830,
    XED_IFORM_VPANDQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 3831,
    XED_IFORM_VPANDQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 3832,
    XED_IFORM_VPANDQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 3833,
    XED_IFORM_VPANDQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 3834,
    XED_IFORM_VPAVGB_XMMdq_XMMdq_MEMdq = 3835,
    XED_IFORM_VPAVGB_XMMdq_XMMdq_XMMdq = 3836,
    XED_IFORM_VPAVGB_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 3837,
    XED_IFORM_VPAVGB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 3838,
    XED_IFORM_VPAVGB_YMMqq_YMMqq_MEMqq = 3839,
    XED_IFORM_VPAVGB_YMMqq_YMMqq_YMMqq = 3840,
    XED_IFORM_VPAVGB_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 3841,
    XED_IFORM_VPAVGB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 3842,
    XED_IFORM_VPAVGB_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 3843,
    XED_IFORM_VPAVGB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 3844,
    XED_IFORM_VPAVGW_XMMdq_XMMdq_MEMdq = 3845,
    XED_IFORM_VPAVGW_XMMdq_XMMdq_XMMdq = 3846,
    XED_IFORM_VPAVGW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 3847,
    XED_IFORM_VPAVGW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 3848,
    XED_IFORM_VPAVGW_YMMqq_YMMqq_MEMqq = 3849,
    XED_IFORM_VPAVGW_YMMqq_YMMqq_YMMqq = 3850,
    XED_IFORM_VPAVGW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 3851,
    XED_IFORM_VPAVGW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 3852,
    XED_IFORM_VPAVGW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 3853,
    XED_IFORM_VPAVGW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 3854,
    XED_IFORM_VPBLENDD_XMMdq_XMMdq_MEMdq_IMMb = 3855,
    XED_IFORM_VPBLENDD_XMMdq_XMMdq_XMMdq_IMMb = 3856,
    XED_IFORM_VPBLENDD_YMMqq_YMMqq_MEMqq_IMMb = 3857,
    XED_IFORM_VPBLENDD_YMMqq_YMMqq_YMMqq_IMMb = 3858,
    XED_IFORM_VPBLENDMB_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 3859,
    XED_IFORM_VPBLENDMB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 3860,
    XED_IFORM_VPBLENDMB_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 3861,
    XED_IFORM_VPBLENDMB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 3862,
    XED_IFORM_VPBLENDMB_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 3863,
    XED_IFORM_VPBLENDMB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 3864,
    XED_IFORM_VPBLENDMD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 3865,
    XED_IFORM_VPBLENDMD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 3866,
    XED_IFORM_VPBLENDMD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 3867,
    XED_IFORM_VPBLENDMD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 3868,
    XED_IFORM_VPBLENDMD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 3869,
    XED_IFORM_VPBLENDMD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 3870,
    XED_IFORM_VPBLENDMQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 3871,
    XED_IFORM_VPBLENDMQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 3872,
    XED_IFORM_VPBLENDMQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 3873,
    XED_IFORM_VPBLENDMQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 3874,
    XED_IFORM_VPBLENDMQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 3875,
    XED_IFORM_VPBLENDMQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 3876,
    XED_IFORM_VPBLENDMW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 3877,
    XED_IFORM_VPBLENDMW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 3878,
    XED_IFORM_VPBLENDMW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 3879,
    XED_IFORM_VPBLENDMW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 3880,
    XED_IFORM_VPBLENDMW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 3881,
    XED_IFORM_VPBLENDMW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 3882,
    XED_IFORM_VPBLENDVB_XMMdq_XMMdq_MEMdq_XMMdq = 3883,
    XED_IFORM_VPBLENDVB_XMMdq_XMMdq_XMMdq_XMMdq = 3884,
    XED_IFORM_VPBLENDVB_YMMqq_YMMqq_MEMqq_YMMqq = 3885,
    XED_IFORM_VPBLENDVB_YMMqq_YMMqq_YMMqq_YMMqq = 3886,
    XED_IFORM_VPBLENDW_XMMdq_XMMdq_MEMdq_IMMb = 3887,
    XED_IFORM_VPBLENDW_XMMdq_XMMdq_XMMdq_IMMb = 3888,
    XED_IFORM_VPBLENDW_YMMqq_YMMqq_MEMqq_IMMb = 3889,
    XED_IFORM_VPBLENDW_YMMqq_YMMqq_YMMqq_IMMb = 3890,
    XED_IFORM_VPBROADCASTB_XMMdq_MEMb = 3891,
    XED_IFORM_VPBROADCASTB_XMMdq_XMMb = 3892,
    XED_IFORM_VPBROADCASTB_XMMu8_MASKmskw_GPR32u8_AVX512 = 3893,
    XED_IFORM_VPBROADCASTB_XMMu8_MASKmskw_MEMu8_AVX512 = 3894,
    XED_IFORM_VPBROADCASTB_XMMu8_MASKmskw_XMMu8_AVX512 = 3895,
    XED_IFORM_VPBROADCASTB_YMMqq_MEMb = 3896,
    XED_IFORM_VPBROADCASTB_YMMqq_XMMb = 3897,
    XED_IFORM_VPBROADCASTB_YMMu8_MASKmskw_GPR32u8_AVX512 = 3898,
    XED_IFORM_VPBROADCASTB_YMMu8_MASKmskw_MEMu8_AVX512 = 3899,
    XED_IFORM_VPBROADCASTB_YMMu8_MASKmskw_XMMu8_AVX512 = 3900,
    XED_IFORM_VPBROADCASTB_ZMMu8_MASKmskw_GPR32u8_AVX512 = 3901,
    XED_IFORM_VPBROADCASTB_ZMMu8_MASKmskw_MEMu8_AVX512 = 3902,
    XED_IFORM_VPBROADCASTB_ZMMu8_MASKmskw_XMMu8_AVX512 = 3903,
    XED_IFORM_VPBROADCASTD_XMMdq_MEMd = 3904,
    XED_IFORM_VPBROADCASTD_XMMdq_XMMd = 3905,
    XED_IFORM_VPBROADCASTD_XMMu32_MASKmskw_GPR32u32_AVX512 = 3906,
    XED_IFORM_VPBROADCASTD_XMMu32_MASKmskw_MEMu32_AVX512 = 3907,
    XED_IFORM_VPBROADCASTD_XMMu32_MASKmskw_XMMu32_AVX512 = 3908,
    XED_IFORM_VPBROADCASTD_YMMqq_MEMd = 3909,
    XED_IFORM_VPBROADCASTD_YMMqq_XMMd = 3910,
    XED_IFORM_VPBROADCASTD_YMMu32_MASKmskw_GPR32u32_AVX512 = 3911,
    XED_IFORM_VPBROADCASTD_YMMu32_MASKmskw_MEMu32_AVX512 = 3912,
    XED_IFORM_VPBROADCASTD_YMMu32_MASKmskw_XMMu32_AVX512 = 3913,
    XED_IFORM_VPBROADCASTD_ZMMu32_MASKmskw_GPR32u32_AVX512 = 3914,
    XED_IFORM_VPBROADCASTD_ZMMu32_MASKmskw_MEMu32_AVX512 = 3915,
    XED_IFORM_VPBROADCASTD_ZMMu32_MASKmskw_XMMu32_AVX512 = 3916,
    XED_IFORM_VPBROADCASTMB2Q_XMMu64_MASKu64_AVX512 = 3917,
    XED_IFORM_VPBROADCASTMB2Q_YMMu64_MASKu64_AVX512 = 3918,
    XED_IFORM_VPBROADCASTMB2Q_ZMMu64_MASKu64_AVX512CD = 3919,
    XED_IFORM_VPBROADCASTMW2D_XMMu32_MASKu32_AVX512 = 3920,
    XED_IFORM_VPBROADCASTMW2D_YMMu32_MASKu32_AVX512 = 3921,
    XED_IFORM_VPBROADCASTMW2D_ZMMu32_MASKu32_AVX512CD = 3922,
    XED_IFORM_VPBROADCASTQ_XMMdq_MEMq = 3923,
    XED_IFORM_VPBROADCASTQ_XMMdq_XMMq = 3924,
    XED_IFORM_VPBROADCASTQ_XMMu64_MASKmskw_GPR64u64_AVX512 = 3925,
    XED_IFORM_VPBROADCASTQ_XMMu64_MASKmskw_MEMu64_AVX512 = 3926,
    XED_IFORM_VPBROADCASTQ_XMMu64_MASKmskw_XMMu64_AVX512 = 3927,
    XED_IFORM_VPBROADCASTQ_YMMqq_MEMq = 3928,
    XED_IFORM_VPBROADCASTQ_YMMqq_XMMq = 3929,
    XED_IFORM_VPBROADCASTQ_YMMu64_MASKmskw_GPR64u64_AVX512 = 3930,
    XED_IFORM_VPBROADCASTQ_YMMu64_MASKmskw_MEMu64_AVX512 = 3931,
    XED_IFORM_VPBROADCASTQ_YMMu64_MASKmskw_XMMu64_AVX512 = 3932,
    XED_IFORM_VPBROADCASTQ_ZMMu64_MASKmskw_GPR64u64_AVX512 = 3933,
    XED_IFORM_VPBROADCASTQ_ZMMu64_MASKmskw_MEMu64_AVX512 = 3934,
    XED_IFORM_VPBROADCASTQ_ZMMu64_MASKmskw_XMMu64_AVX512 = 3935,
    XED_IFORM_VPBROADCASTW_XMMdq_MEMw = 3936,
    XED_IFORM_VPBROADCASTW_XMMdq_XMMw = 3937,
    XED_IFORM_VPBROADCASTW_XMMu16_MASKmskw_GPR32u16_AVX512 = 3938,
    XED_IFORM_VPBROADCASTW_XMMu16_MASKmskw_MEMu16_AVX512 = 3939,
    XED_IFORM_VPBROADCASTW_XMMu16_MASKmskw_XMMu16_AVX512 = 3940,
    XED_IFORM_VPBROADCASTW_YMMqq_MEMw = 3941,
    XED_IFORM_VPBROADCASTW_YMMqq_XMMw = 3942,
    XED_IFORM_VPBROADCASTW_YMMu16_MASKmskw_GPR32u16_AVX512 = 3943,
    XED_IFORM_VPBROADCASTW_YMMu16_MASKmskw_MEMu16_AVX512 = 3944,
    XED_IFORM_VPBROADCASTW_YMMu16_MASKmskw_XMMu16_AVX512 = 3945,
    XED_IFORM_VPBROADCASTW_ZMMu16_MASKmskw_GPR32u16_AVX512 = 3946,
    XED_IFORM_VPBROADCASTW_ZMMu16_MASKmskw_MEMu16_AVX512 = 3947,
    XED_IFORM_VPBROADCASTW_ZMMu16_MASKmskw_XMMu16_AVX512 = 3948,
    XED_IFORM_VPCLMULQDQ_XMMdq_XMMdq_MEMdq_IMMb = 3949,
    XED_IFORM_VPCLMULQDQ_XMMdq_XMMdq_XMMdq_IMMb = 3950,
    XED_IFORM_VPCMOV_XMMdq_XMMdq_MEMdq_XMMdq = 3951,
    XED_IFORM_VPCMOV_XMMdq_XMMdq_XMMdq_MEMdq = 3952,
    XED_IFORM_VPCMOV_XMMdq_XMMdq_XMMdq_XMMdq = 3953,
    XED_IFORM_VPCMOV_YMMqq_YMMqq_MEMqq_YMMqq = 3954,
    XED_IFORM_VPCMOV_YMMqq_YMMqq_YMMqq_MEMqq = 3955,
    XED_IFORM_VPCMOV_YMMqq_YMMqq_YMMqq_YMMqq = 3956,
    XED_IFORM_VPCMPB_MASKmskw_MASKmskw_XMMi8_MEMi8_IMM8_AVX512 = 3957,
    XED_IFORM_VPCMPB_MASKmskw_MASKmskw_XMMi8_XMMi8_IMM8_AVX512 = 3958,
    XED_IFORM_VPCMPB_MASKmskw_MASKmskw_YMMi8_MEMi8_IMM8_AVX512 = 3959,
    XED_IFORM_VPCMPB_MASKmskw_MASKmskw_YMMi8_YMMi8_IMM8_AVX512 = 3960,
    XED_IFORM_VPCMPB_MASKmskw_MASKmskw_ZMMi8_MEMi8_IMM8_AVX512 = 3961,
    XED_IFORM_VPCMPB_MASKmskw_MASKmskw_ZMMi8_ZMMi8_IMM8_AVX512 = 3962,
    XED_IFORM_VPCMPD_MASKmskw_MASKmskw_XMMi32_MEMi32_IMM8_AVX512 = 3963,
    XED_IFORM_VPCMPD_MASKmskw_MASKmskw_XMMi32_XMMi32_IMM8_AVX512 = 3964,
    XED_IFORM_VPCMPD_MASKmskw_MASKmskw_YMMi32_MEMi32_IMM8_AVX512 = 3965,
    XED_IFORM_VPCMPD_MASKmskw_MASKmskw_YMMi32_YMMi32_IMM8_AVX512 = 3966,
    XED_IFORM_VPCMPD_MASKmskw_MASKmskw_ZMMi32_MEMi32_IMM8_AVX512 = 3967,
    XED_IFORM_VPCMPD_MASKmskw_MASKmskw_ZMMi32_ZMMi32_IMM8_AVX512 = 3968,
    XED_IFORM_VPCMPEQB_MASKmskw_MASKmskw_XMMu8_MEMu8_AVX512 = 3969,
    XED_IFORM_VPCMPEQB_MASKmskw_MASKmskw_XMMu8_XMMu8_AVX512 = 3970,
    XED_IFORM_VPCMPEQB_MASKmskw_MASKmskw_YMMu8_MEMu8_AVX512 = 3971,
    XED_IFORM_VPCMPEQB_MASKmskw_MASKmskw_YMMu8_YMMu8_AVX512 = 3972,
    XED_IFORM_VPCMPEQB_MASKmskw_MASKmskw_ZMMu8_MEMu8_AVX512 = 3973,
    XED_IFORM_VPCMPEQB_MASKmskw_MASKmskw_ZMMu8_ZMMu8_AVX512 = 3974,
    XED_IFORM_VPCMPEQB_XMMdq_XMMdq_MEMdq = 3975,
    XED_IFORM_VPCMPEQB_XMMdq_XMMdq_XMMdq = 3976,
    XED_IFORM_VPCMPEQB_YMMqq_YMMqq_MEMqq = 3977,
    XED_IFORM_VPCMPEQB_YMMqq_YMMqq_YMMqq = 3978,
    XED_IFORM_VPCMPEQD_MASKmskw_MASKmskw_XMMu32_MEMu32_AVX512 = 3979,
    XED_IFORM_VPCMPEQD_MASKmskw_MASKmskw_XMMu32_XMMu32_AVX512 = 3980,
    XED_IFORM_VPCMPEQD_MASKmskw_MASKmskw_YMMu32_MEMu32_AVX512 = 3981,
    XED_IFORM_VPCMPEQD_MASKmskw_MASKmskw_YMMu32_YMMu32_AVX512 = 3982,
    XED_IFORM_VPCMPEQD_MASKmskw_MASKmskw_ZMMu32_MEMu32_AVX512 = 3983,
    XED_IFORM_VPCMPEQD_MASKmskw_MASKmskw_ZMMu32_ZMMu32_AVX512 = 3984,
    XED_IFORM_VPCMPEQD_XMMdq_XMMdq_MEMdq = 3985,
    XED_IFORM_VPCMPEQD_XMMdq_XMMdq_XMMdq = 3986,
    XED_IFORM_VPCMPEQD_YMMqq_YMMqq_MEMqq = 3987,
    XED_IFORM_VPCMPEQD_YMMqq_YMMqq_YMMqq = 3988,
    XED_IFORM_VPCMPEQQ_MASKmskw_MASKmskw_XMMu64_MEMu64_AVX512 = 3989,
    XED_IFORM_VPCMPEQQ_MASKmskw_MASKmskw_XMMu64_XMMu64_AVX512 = 3990,
    XED_IFORM_VPCMPEQQ_MASKmskw_MASKmskw_YMMu64_MEMu64_AVX512 = 3991,
    XED_IFORM_VPCMPEQQ_MASKmskw_MASKmskw_YMMu64_YMMu64_AVX512 = 3992,
    XED_IFORM_VPCMPEQQ_MASKmskw_MASKmskw_ZMMu64_MEMu64_AVX512 = 3993,
    XED_IFORM_VPCMPEQQ_MASKmskw_MASKmskw_ZMMu64_ZMMu64_AVX512 = 3994,
    XED_IFORM_VPCMPEQQ_XMMdq_XMMdq_MEMdq = 3995,
    XED_IFORM_VPCMPEQQ_XMMdq_XMMdq_XMMdq = 3996,
    XED_IFORM_VPCMPEQQ_YMMqq_YMMqq_MEMqq = 3997,
    XED_IFORM_VPCMPEQQ_YMMqq_YMMqq_YMMqq = 3998,
    XED_IFORM_VPCMPEQW_MASKmskw_MASKmskw_XMMu16_MEMu16_AVX512 = 3999,
    XED_IFORM_VPCMPEQW_MASKmskw_MASKmskw_XMMu16_XMMu16_AVX512 = 4000,
    XED_IFORM_VPCMPEQW_MASKmskw_MASKmskw_YMMu16_MEMu16_AVX512 = 4001,
    XED_IFORM_VPCMPEQW_MASKmskw_MASKmskw_YMMu16_YMMu16_AVX512 = 4002,
    XED_IFORM_VPCMPEQW_MASKmskw_MASKmskw_ZMMu16_MEMu16_AVX512 = 4003,
    XED_IFORM_VPCMPEQW_MASKmskw_MASKmskw_ZMMu16_ZMMu16_AVX512 = 4004,
    XED_IFORM_VPCMPEQW_XMMdq_XMMdq_MEMdq = 4005,
    XED_IFORM_VPCMPEQW_XMMdq_XMMdq_XMMdq = 4006,
    XED_IFORM_VPCMPEQW_YMMqq_YMMqq_MEMqq = 4007,
    XED_IFORM_VPCMPEQW_YMMqq_YMMqq_YMMqq = 4008,
    XED_IFORM_VPCMPESTRI_XMMdq_MEMdq_IMMb = 4009,
    XED_IFORM_VPCMPESTRI_XMMdq_XMMdq_IMMb = 4010,
    XED_IFORM_VPCMPESTRM_XMMdq_MEMdq_IMMb = 4011,
    XED_IFORM_VPCMPESTRM_XMMdq_XMMdq_IMMb = 4012,
    XED_IFORM_VPCMPGTB_MASKmskw_MASKmskw_XMMu8_MEMu8_AVX512 = 4013,
    XED_IFORM_VPCMPGTB_MASKmskw_MASKmskw_XMMu8_XMMu8_AVX512 = 4014,
    XED_IFORM_VPCMPGTB_MASKmskw_MASKmskw_YMMu8_MEMu8_AVX512 = 4015,
    XED_IFORM_VPCMPGTB_MASKmskw_MASKmskw_YMMu8_YMMu8_AVX512 = 4016,
    XED_IFORM_VPCMPGTB_MASKmskw_MASKmskw_ZMMu8_MEMu8_AVX512 = 4017,
    XED_IFORM_VPCMPGTB_MASKmskw_MASKmskw_ZMMu8_ZMMu8_AVX512 = 4018,
    XED_IFORM_VPCMPGTB_XMMdq_XMMdq_MEMdq = 4019,
    XED_IFORM_VPCMPGTB_XMMdq_XMMdq_XMMdq = 4020,
    XED_IFORM_VPCMPGTB_YMMqq_YMMqq_MEMqq = 4021,
    XED_IFORM_VPCMPGTB_YMMqq_YMMqq_YMMqq = 4022,
    XED_IFORM_VPCMPGTD_MASKmskw_MASKmskw_XMMi32_MEMi32_AVX512 = 4023,
    XED_IFORM_VPCMPGTD_MASKmskw_MASKmskw_XMMi32_XMMi32_AVX512 = 4024,
    XED_IFORM_VPCMPGTD_MASKmskw_MASKmskw_YMMi32_MEMi32_AVX512 = 4025,
    XED_IFORM_VPCMPGTD_MASKmskw_MASKmskw_YMMi32_YMMi32_AVX512 = 4026,
    XED_IFORM_VPCMPGTD_MASKmskw_MASKmskw_ZMMi32_MEMi32_AVX512 = 4027,
    XED_IFORM_VPCMPGTD_MASKmskw_MASKmskw_ZMMi32_ZMMi32_AVX512 = 4028,
    XED_IFORM_VPCMPGTD_XMMdq_XMMdq_MEMdq = 4029,
    XED_IFORM_VPCMPGTD_XMMdq_XMMdq_XMMdq = 4030,
    XED_IFORM_VPCMPGTD_YMMqq_YMMqq_MEMqq = 4031,
    XED_IFORM_VPCMPGTD_YMMqq_YMMqq_YMMqq = 4032,
    XED_IFORM_VPCMPGTQ_MASKmskw_MASKmskw_XMMi64_MEMi64_AVX512 = 4033,
    XED_IFORM_VPCMPGTQ_MASKmskw_MASKmskw_XMMi64_XMMi64_AVX512 = 4034,
    XED_IFORM_VPCMPGTQ_MASKmskw_MASKmskw_YMMi64_MEMi64_AVX512 = 4035,
    XED_IFORM_VPCMPGTQ_MASKmskw_MASKmskw_YMMi64_YMMi64_AVX512 = 4036,
    XED_IFORM_VPCMPGTQ_MASKmskw_MASKmskw_ZMMi64_MEMi64_AVX512 = 4037,
    XED_IFORM_VPCMPGTQ_MASKmskw_MASKmskw_ZMMi64_ZMMi64_AVX512 = 4038,
    XED_IFORM_VPCMPGTQ_XMMdq_XMMdq_MEMdq = 4039,
    XED_IFORM_VPCMPGTQ_XMMdq_XMMdq_XMMdq = 4040,
    XED_IFORM_VPCMPGTQ_YMMqq_YMMqq_MEMqq = 4041,
    XED_IFORM_VPCMPGTQ_YMMqq_YMMqq_YMMqq = 4042,
    XED_IFORM_VPCMPGTW_MASKmskw_MASKmskw_XMMu16_MEMu16_AVX512 = 4043,
    XED_IFORM_VPCMPGTW_MASKmskw_MASKmskw_XMMu16_XMMu16_AVX512 = 4044,
    XED_IFORM_VPCMPGTW_MASKmskw_MASKmskw_YMMu16_MEMu16_AVX512 = 4045,
    XED_IFORM_VPCMPGTW_MASKmskw_MASKmskw_YMMu16_YMMu16_AVX512 = 4046,
    XED_IFORM_VPCMPGTW_MASKmskw_MASKmskw_ZMMu16_MEMu16_AVX512 = 4047,
    XED_IFORM_VPCMPGTW_MASKmskw_MASKmskw_ZMMu16_ZMMu16_AVX512 = 4048,
    XED_IFORM_VPCMPGTW_XMMdq_XMMdq_MEMdq = 4049,
    XED_IFORM_VPCMPGTW_XMMdq_XMMdq_XMMdq = 4050,
    XED_IFORM_VPCMPGTW_YMMqq_YMMqq_MEMqq = 4051,
    XED_IFORM_VPCMPGTW_YMMqq_YMMqq_YMMqq = 4052,
    XED_IFORM_VPCMPISTRI_XMMdq_MEMdq_IMMb = 4053,
    XED_IFORM_VPCMPISTRI_XMMdq_XMMdq_IMMb = 4054,
    XED_IFORM_VPCMPISTRM_XMMdq_MEMdq_IMMb = 4055,
    XED_IFORM_VPCMPISTRM_XMMdq_XMMdq_IMMb = 4056,
    XED_IFORM_VPCMPQ_MASKmskw_MASKmskw_XMMi64_MEMi64_IMM8_AVX512 = 4057,
    XED_IFORM_VPCMPQ_MASKmskw_MASKmskw_XMMi64_XMMi64_IMM8_AVX512 = 4058,
    XED_IFORM_VPCMPQ_MASKmskw_MASKmskw_YMMi64_MEMi64_IMM8_AVX512 = 4059,
    XED_IFORM_VPCMPQ_MASKmskw_MASKmskw_YMMi64_YMMi64_IMM8_AVX512 = 4060,
    XED_IFORM_VPCMPQ_MASKmskw_MASKmskw_ZMMi64_MEMi64_IMM8_AVX512 = 4061,
    XED_IFORM_VPCMPQ_MASKmskw_MASKmskw_ZMMi64_ZMMi64_IMM8_AVX512 = 4062,
    XED_IFORM_VPCMPUB_MASKmskw_MASKmskw_XMMu8_MEMu8_IMM8_AVX512 = 4063,
    XED_IFORM_VPCMPUB_MASKmskw_MASKmskw_XMMu8_XMMu8_IMM8_AVX512 = 4064,
    XED_IFORM_VPCMPUB_MASKmskw_MASKmskw_YMMu8_MEMu8_IMM8_AVX512 = 4065,
    XED_IFORM_VPCMPUB_MASKmskw_MASKmskw_YMMu8_YMMu8_IMM8_AVX512 = 4066,
    XED_IFORM_VPCMPUB_MASKmskw_MASKmskw_ZMMu8_MEMu8_IMM8_AVX512 = 4067,
    XED_IFORM_VPCMPUB_MASKmskw_MASKmskw_ZMMu8_ZMMu8_IMM8_AVX512 = 4068,
    XED_IFORM_VPCMPUD_MASKmskw_MASKmskw_XMMu32_MEMu32_IMM8_AVX512 = 4069,
    XED_IFORM_VPCMPUD_MASKmskw_MASKmskw_XMMu32_XMMu32_IMM8_AVX512 = 4070,
    XED_IFORM_VPCMPUD_MASKmskw_MASKmskw_YMMu32_MEMu32_IMM8_AVX512 = 4071,
    XED_IFORM_VPCMPUD_MASKmskw_MASKmskw_YMMu32_YMMu32_IMM8_AVX512 = 4072,
    XED_IFORM_VPCMPUD_MASKmskw_MASKmskw_ZMMu32_MEMu32_IMM8_AVX512 = 4073,
    XED_IFORM_VPCMPUD_MASKmskw_MASKmskw_ZMMu32_ZMMu32_IMM8_AVX512 = 4074,
    XED_IFORM_VPCMPUQ_MASKmskw_MASKmskw_XMMu64_MEMu64_IMM8_AVX512 = 4075,
    XED_IFORM_VPCMPUQ_MASKmskw_MASKmskw_XMMu64_XMMu64_IMM8_AVX512 = 4076,
    XED_IFORM_VPCMPUQ_MASKmskw_MASKmskw_YMMu64_MEMu64_IMM8_AVX512 = 4077,
    XED_IFORM_VPCMPUQ_MASKmskw_MASKmskw_YMMu64_YMMu64_IMM8_AVX512 = 4078,
    XED_IFORM_VPCMPUQ_MASKmskw_MASKmskw_ZMMu64_MEMu64_IMM8_AVX512 = 4079,
    XED_IFORM_VPCMPUQ_MASKmskw_MASKmskw_ZMMu64_ZMMu64_IMM8_AVX512 = 4080,
    XED_IFORM_VPCMPUW_MASKmskw_MASKmskw_XMMu16_MEMu16_IMM8_AVX512 = 4081,
    XED_IFORM_VPCMPUW_MASKmskw_MASKmskw_XMMu16_XMMu16_IMM8_AVX512 = 4082,
    XED_IFORM_VPCMPUW_MASKmskw_MASKmskw_YMMu16_MEMu16_IMM8_AVX512 = 4083,
    XED_IFORM_VPCMPUW_MASKmskw_MASKmskw_YMMu16_YMMu16_IMM8_AVX512 = 4084,
    XED_IFORM_VPCMPUW_MASKmskw_MASKmskw_ZMMu16_MEMu16_IMM8_AVX512 = 4085,
    XED_IFORM_VPCMPUW_MASKmskw_MASKmskw_ZMMu16_ZMMu16_IMM8_AVX512 = 4086,
    XED_IFORM_VPCMPW_MASKmskw_MASKmskw_XMMi16_MEMi16_IMM8_AVX512 = 4087,
    XED_IFORM_VPCMPW_MASKmskw_MASKmskw_XMMi16_XMMi16_IMM8_AVX512 = 4088,
    XED_IFORM_VPCMPW_MASKmskw_MASKmskw_YMMi16_MEMi16_IMM8_AVX512 = 4089,
    XED_IFORM_VPCMPW_MASKmskw_MASKmskw_YMMi16_YMMi16_IMM8_AVX512 = 4090,
    XED_IFORM_VPCMPW_MASKmskw_MASKmskw_ZMMi16_MEMi16_IMM8_AVX512 = 4091,
    XED_IFORM_VPCMPW_MASKmskw_MASKmskw_ZMMi16_ZMMi16_IMM8_AVX512 = 4092,
    XED_IFORM_VPCOMB_XMMdq_XMMdq_MEMdq_IMMb = 4093,
    XED_IFORM_VPCOMB_XMMdq_XMMdq_XMMdq_IMMb = 4094,
    XED_IFORM_VPCOMD_XMMdq_XMMdq_MEMdq_IMMb = 4095,
    XED_IFORM_VPCOMD_XMMdq_XMMdq_XMMdq_IMMb = 4096,
    XED_IFORM_VPCOMPRESSD_MEMu32_MASKmskw_XMMu32_AVX512 = 4097,
    XED_IFORM_VPCOMPRESSD_MEMu32_MASKmskw_YMMu32_AVX512 = 4098,
    XED_IFORM_VPCOMPRESSD_MEMu32_MASKmskw_ZMMu32_AVX512 = 4099,
    XED_IFORM_VPCOMPRESSD_XMMu32_MASKmskw_XMMu32_AVX512 = 4100,
    XED_IFORM_VPCOMPRESSD_YMMu32_MASKmskw_YMMu32_AVX512 = 4101,
    XED_IFORM_VPCOMPRESSD_ZMMu32_MASKmskw_ZMMu32_AVX512 = 4102,
    XED_IFORM_VPCOMPRESSQ_MEMu64_MASKmskw_XMMu64_AVX512 = 4103,
    XED_IFORM_VPCOMPRESSQ_MEMu64_MASKmskw_YMMu64_AVX512 = 4104,
    XED_IFORM_VPCOMPRESSQ_MEMu64_MASKmskw_ZMMu64_AVX512 = 4105,
    XED_IFORM_VPCOMPRESSQ_XMMu64_MASKmskw_XMMu64_AVX512 = 4106,
    XED_IFORM_VPCOMPRESSQ_YMMu64_MASKmskw_YMMu64_AVX512 = 4107,
    XED_IFORM_VPCOMPRESSQ_ZMMu64_MASKmskw_ZMMu64_AVX512 = 4108,
    XED_IFORM_VPCOMQ_XMMdq_XMMdq_MEMdq_IMMb = 4109,
    XED_IFORM_VPCOMQ_XMMdq_XMMdq_XMMdq_IMMb = 4110,
    XED_IFORM_VPCOMUB_XMMdq_XMMdq_MEMdq_IMMb = 4111,
    XED_IFORM_VPCOMUB_XMMdq_XMMdq_XMMdq_IMMb = 4112,
    XED_IFORM_VPCOMUD_XMMdq_XMMdq_MEMdq_IMMb = 4113,
    XED_IFORM_VPCOMUD_XMMdq_XMMdq_XMMdq_IMMb = 4114,
    XED_IFORM_VPCOMUQ_XMMdq_XMMdq_MEMdq_IMMb = 4115,
    XED_IFORM_VPCOMUQ_XMMdq_XMMdq_XMMdq_IMMb = 4116,
    XED_IFORM_VPCOMUW_XMMdq_XMMdq_MEMdq_IMMb = 4117,
    XED_IFORM_VPCOMUW_XMMdq_XMMdq_XMMdq_IMMb = 4118,
    XED_IFORM_VPCOMW_XMMdq_XMMdq_MEMdq_IMMb = 4119,
    XED_IFORM_VPCOMW_XMMdq_XMMdq_XMMdq_IMMb = 4120,
    XED_IFORM_VPCONFLICTD_XMMu32_MASKmskw_MEMu32_AVX512 = 4121,
    XED_IFORM_VPCONFLICTD_XMMu32_MASKmskw_XMMu32_AVX512 = 4122,
    XED_IFORM_VPCONFLICTD_YMMu32_MASKmskw_MEMu32_AVX512 = 4123,
    XED_IFORM_VPCONFLICTD_YMMu32_MASKmskw_YMMu32_AVX512 = 4124,
    XED_IFORM_VPCONFLICTD_ZMMu32_MASKmskw_MEMu32_AVX512CD = 4125,
    XED_IFORM_VPCONFLICTD_ZMMu32_MASKmskw_ZMMu32_AVX512CD = 4126,
    XED_IFORM_VPCONFLICTQ_XMMu64_MASKmskw_MEMu64_AVX512 = 4127,
    XED_IFORM_VPCONFLICTQ_XMMu64_MASKmskw_XMMu64_AVX512 = 4128,
    XED_IFORM_VPCONFLICTQ_YMMu64_MASKmskw_MEMu64_AVX512 = 4129,
    XED_IFORM_VPCONFLICTQ_YMMu64_MASKmskw_YMMu64_AVX512 = 4130,
    XED_IFORM_VPCONFLICTQ_ZMMu64_MASKmskw_MEMu64_AVX512CD = 4131,
    XED_IFORM_VPCONFLICTQ_ZMMu64_MASKmskw_ZMMu64_AVX512CD = 4132,
    XED_IFORM_VPERM2F128_YMMqq_YMMqq_MEMqq_IMMb = 4133,
    XED_IFORM_VPERM2F128_YMMqq_YMMqq_YMMqq_IMMb = 4134,
    XED_IFORM_VPERM2I128_YMMqq_YMMqq_MEMqq_IMMb = 4135,
    XED_IFORM_VPERM2I128_YMMqq_YMMqq_YMMqq_IMMb = 4136,
    XED_IFORM_VPERMB_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 4137,
    XED_IFORM_VPERMB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 4138,
    XED_IFORM_VPERMB_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 4139,
    XED_IFORM_VPERMB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 4140,
    XED_IFORM_VPERMB_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 4141,
    XED_IFORM_VPERMB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 4142,
    XED_IFORM_VPERMD_YMMqq_YMMqq_MEMqq = 4143,
    XED_IFORM_VPERMD_YMMqq_YMMqq_YMMqq = 4144,
    XED_IFORM_VPERMD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 4145,
    XED_IFORM_VPERMD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 4146,
    XED_IFORM_VPERMD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 4147,
    XED_IFORM_VPERMD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 4148,
    XED_IFORM_VPERMI2B_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 4149,
    XED_IFORM_VPERMI2B_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 4150,
    XED_IFORM_VPERMI2B_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 4151,
    XED_IFORM_VPERMI2B_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 4152,
    XED_IFORM_VPERMI2B_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 4153,
    XED_IFORM_VPERMI2B_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 4154,
    XED_IFORM_VPERMI2D_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 4155,
    XED_IFORM_VPERMI2D_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 4156,
    XED_IFORM_VPERMI2D_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 4157,
    XED_IFORM_VPERMI2D_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 4158,
    XED_IFORM_VPERMI2D_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 4159,
    XED_IFORM_VPERMI2D_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 4160,
    XED_IFORM_VPERMI2PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 4161,
    XED_IFORM_VPERMI2PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 4162,
    XED_IFORM_VPERMI2PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 4163,
    XED_IFORM_VPERMI2PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 4164,
    XED_IFORM_VPERMI2PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 4165,
    XED_IFORM_VPERMI2PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 4166,
    XED_IFORM_VPERMI2PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 4167,
    XED_IFORM_VPERMI2PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 4168,
    XED_IFORM_VPERMI2PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 4169,
    XED_IFORM_VPERMI2PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 4170,
    XED_IFORM_VPERMI2PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 4171,
    XED_IFORM_VPERMI2PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 4172,
    XED_IFORM_VPERMI2Q_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 4173,
    XED_IFORM_VPERMI2Q_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 4174,
    XED_IFORM_VPERMI2Q_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 4175,
    XED_IFORM_VPERMI2Q_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 4176,
    XED_IFORM_VPERMI2Q_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 4177,
    XED_IFORM_VPERMI2Q_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 4178,
    XED_IFORM_VPERMI2W_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 4179,
    XED_IFORM_VPERMI2W_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 4180,
    XED_IFORM_VPERMI2W_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 4181,
    XED_IFORM_VPERMI2W_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 4182,
    XED_IFORM_VPERMI2W_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 4183,
    XED_IFORM_VPERMI2W_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 4184,
    XED_IFORM_VPERMIL2PD_XMMdq_XMMdq_MEMdq_XMMdq_IMMb = 4185,
    XED_IFORM_VPERMIL2PD_XMMdq_XMMdq_XMMdq_MEMdq_IMMb = 4186,
    XED_IFORM_VPERMIL2PD_XMMdq_XMMdq_XMMdq_XMMdq_IMMb = 4187,
    XED_IFORM_VPERMIL2PD_YMMqq_YMMqq_MEMqq_YMMqq_IMMb = 4188,
    XED_IFORM_VPERMIL2PD_YMMqq_YMMqq_YMMqq_MEMqq_IMMb = 4189,
    XED_IFORM_VPERMIL2PD_YMMqq_YMMqq_YMMqq_YMMqq_IMMb = 4190,
    XED_IFORM_VPERMIL2PS_XMMdq_XMMdq_MEMdq_XMMdq_IMMb = 4191,
    XED_IFORM_VPERMIL2PS_XMMdq_XMMdq_XMMdq_MEMdq_IMMb = 4192,
    XED_IFORM_VPERMIL2PS_XMMdq_XMMdq_XMMdq_XMMdq_IMMb = 4193,
    XED_IFORM_VPERMIL2PS_YMMqq_YMMqq_MEMqq_YMMqq_IMMb = 4194,
    XED_IFORM_VPERMIL2PS_YMMqq_YMMqq_YMMqq_MEMqq_IMMb = 4195,
    XED_IFORM_VPERMIL2PS_YMMqq_YMMqq_YMMqq_YMMqq_IMMb = 4196,
    XED_IFORM_VPERMILPD_XMMdq_MEMdq_IMMb = 4197,
    XED_IFORM_VPERMILPD_XMMdq_XMMdq_IMMb = 4198,
    XED_IFORM_VPERMILPD_XMMdq_XMMdq_MEMdq = 4199,
    XED_IFORM_VPERMILPD_XMMdq_XMMdq_XMMdq = 4200,
    XED_IFORM_VPERMILPD_XMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 4201,
    XED_IFORM_VPERMILPD_XMMf64_MASKmskw_XMMf64_IMM8_AVX512 = 4202,
    XED_IFORM_VPERMILPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 4203,
    XED_IFORM_VPERMILPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 4204,
    XED_IFORM_VPERMILPD_YMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 4205,
    XED_IFORM_VPERMILPD_YMMf64_MASKmskw_YMMf64_IMM8_AVX512 = 4206,
    XED_IFORM_VPERMILPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 4207,
    XED_IFORM_VPERMILPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 4208,
    XED_IFORM_VPERMILPD_YMMqq_MEMqq_IMMb = 4209,
    XED_IFORM_VPERMILPD_YMMqq_YMMqq_IMMb = 4210,
    XED_IFORM_VPERMILPD_YMMqq_YMMqq_MEMqq = 4211,
    XED_IFORM_VPERMILPD_YMMqq_YMMqq_YMMqq = 4212,
    XED_IFORM_VPERMILPD_ZMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 4213,
    XED_IFORM_VPERMILPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512 = 4214,
    XED_IFORM_VPERMILPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 4215,
    XED_IFORM_VPERMILPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 4216,
    XED_IFORM_VPERMILPS_XMMdq_MEMdq_IMMb = 4217,
    XED_IFORM_VPERMILPS_XMMdq_XMMdq_IMMb = 4218,
    XED_IFORM_VPERMILPS_XMMdq_XMMdq_MEMdq = 4219,
    XED_IFORM_VPERMILPS_XMMdq_XMMdq_XMMdq = 4220,
    XED_IFORM_VPERMILPS_XMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 4221,
    XED_IFORM_VPERMILPS_XMMf32_MASKmskw_XMMf32_IMM8_AVX512 = 4222,
    XED_IFORM_VPERMILPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 4223,
    XED_IFORM_VPERMILPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 4224,
    XED_IFORM_VPERMILPS_YMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 4225,
    XED_IFORM_VPERMILPS_YMMf32_MASKmskw_YMMf32_IMM8_AVX512 = 4226,
    XED_IFORM_VPERMILPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 4227,
    XED_IFORM_VPERMILPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 4228,
    XED_IFORM_VPERMILPS_YMMqq_MEMqq_IMMb = 4229,
    XED_IFORM_VPERMILPS_YMMqq_YMMqq_IMMb = 4230,
    XED_IFORM_VPERMILPS_YMMqq_YMMqq_MEMqq = 4231,
    XED_IFORM_VPERMILPS_YMMqq_YMMqq_YMMqq = 4232,
    XED_IFORM_VPERMILPS_ZMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 4233,
    XED_IFORM_VPERMILPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512 = 4234,
    XED_IFORM_VPERMILPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 4235,
    XED_IFORM_VPERMILPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 4236,
    XED_IFORM_VPERMPD_YMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 4237,
    XED_IFORM_VPERMPD_YMMf64_MASKmskw_YMMf64_IMM8_AVX512 = 4238,
    XED_IFORM_VPERMPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 4239,
    XED_IFORM_VPERMPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 4240,
    XED_IFORM_VPERMPD_YMMqq_MEMqq_IMMb = 4241,
    XED_IFORM_VPERMPD_YMMqq_YMMqq_IMMb = 4242,
    XED_IFORM_VPERMPD_ZMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 4243,
    XED_IFORM_VPERMPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512 = 4244,
    XED_IFORM_VPERMPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 4245,
    XED_IFORM_VPERMPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 4246,
    XED_IFORM_VPERMPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 4247,
    XED_IFORM_VPERMPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 4248,
    XED_IFORM_VPERMPS_YMMqq_YMMqq_MEMqq = 4249,
    XED_IFORM_VPERMPS_YMMqq_YMMqq_YMMqq = 4250,
    XED_IFORM_VPERMPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 4251,
    XED_IFORM_VPERMPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 4252,
    XED_IFORM_VPERMQ_YMMqq_MEMqq_IMMb = 4253,
    XED_IFORM_VPERMQ_YMMqq_YMMqq_IMMb = 4254,
    XED_IFORM_VPERMQ_YMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 4255,
    XED_IFORM_VPERMQ_YMMu64_MASKmskw_YMMu64_IMM8_AVX512 = 4256,
    XED_IFORM_VPERMQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 4257,
    XED_IFORM_VPERMQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 4258,
    XED_IFORM_VPERMQ_ZMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 4259,
    XED_IFORM_VPERMQ_ZMMu64_MASKmskw_ZMMu64_IMM8_AVX512 = 4260,
    XED_IFORM_VPERMQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 4261,
    XED_IFORM_VPERMQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 4262,
    XED_IFORM_VPERMT2B_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 4263,
    XED_IFORM_VPERMT2B_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 4264,
    XED_IFORM_VPERMT2B_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 4265,
    XED_IFORM_VPERMT2B_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 4266,
    XED_IFORM_VPERMT2B_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 4267,
    XED_IFORM_VPERMT2B_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 4268,
    XED_IFORM_VPERMT2D_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 4269,
    XED_IFORM_VPERMT2D_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 4270,
    XED_IFORM_VPERMT2D_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 4271,
    XED_IFORM_VPERMT2D_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 4272,
    XED_IFORM_VPERMT2D_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 4273,
    XED_IFORM_VPERMT2D_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 4274,
    XED_IFORM_VPERMT2PD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 4275,
    XED_IFORM_VPERMT2PD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 4276,
    XED_IFORM_VPERMT2PD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 4277,
    XED_IFORM_VPERMT2PD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 4278,
    XED_IFORM_VPERMT2PD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 4279,
    XED_IFORM_VPERMT2PD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 4280,
    XED_IFORM_VPERMT2PS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 4281,
    XED_IFORM_VPERMT2PS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 4282,
    XED_IFORM_VPERMT2PS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 4283,
    XED_IFORM_VPERMT2PS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 4284,
    XED_IFORM_VPERMT2PS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 4285,
    XED_IFORM_VPERMT2PS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 4286,
    XED_IFORM_VPERMT2Q_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 4287,
    XED_IFORM_VPERMT2Q_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 4288,
    XED_IFORM_VPERMT2Q_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 4289,
    XED_IFORM_VPERMT2Q_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 4290,
    XED_IFORM_VPERMT2Q_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 4291,
    XED_IFORM_VPERMT2Q_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 4292,
    XED_IFORM_VPERMT2W_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 4293,
    XED_IFORM_VPERMT2W_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 4294,
    XED_IFORM_VPERMT2W_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 4295,
    XED_IFORM_VPERMT2W_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 4296,
    XED_IFORM_VPERMT2W_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 4297,
    XED_IFORM_VPERMT2W_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 4298,
    XED_IFORM_VPERMW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 4299,
    XED_IFORM_VPERMW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 4300,
    XED_IFORM_VPERMW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 4301,
    XED_IFORM_VPERMW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 4302,
    XED_IFORM_VPERMW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 4303,
    XED_IFORM_VPERMW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 4304,
    XED_IFORM_VPEXPANDD_XMMu32_MASKmskw_MEMu32_AVX512 = 4305,
    XED_IFORM_VPEXPANDD_XMMu32_MASKmskw_XMMu32_AVX512 = 4306,
    XED_IFORM_VPEXPANDD_YMMu32_MASKmskw_MEMu32_AVX512 = 4307,
    XED_IFORM_VPEXPANDD_YMMu32_MASKmskw_YMMu32_AVX512 = 4308,
    XED_IFORM_VPEXPANDD_ZMMu32_MASKmskw_MEMu32_AVX512 = 4309,
    XED_IFORM_VPEXPANDD_ZMMu32_MASKmskw_ZMMu32_AVX512 = 4310,
    XED_IFORM_VPEXPANDQ_XMMu64_MASKmskw_MEMu64_AVX512 = 4311,
    XED_IFORM_VPEXPANDQ_XMMu64_MASKmskw_XMMu64_AVX512 = 4312,
    XED_IFORM_VPEXPANDQ_YMMu64_MASKmskw_MEMu64_AVX512 = 4313,
    XED_IFORM_VPEXPANDQ_YMMu64_MASKmskw_YMMu64_AVX512 = 4314,
    XED_IFORM_VPEXPANDQ_ZMMu64_MASKmskw_MEMu64_AVX512 = 4315,
    XED_IFORM_VPEXPANDQ_ZMMu64_MASKmskw_ZMMu64_AVX512 = 4316,
    XED_IFORM_VPEXTRB_GPR32d_XMMdq_IMMb = 4317,
    XED_IFORM_VPEXTRB_GPR32u8_XMMu8_IMM8_AVX512 = 4318,
    XED_IFORM_VPEXTRB_MEMb_XMMdq_IMMb = 4319,
    XED_IFORM_VPEXTRB_MEMu8_XMMu8_IMM8_AVX512 = 4320,
    XED_IFORM_VPEXTRD_GPR32d_XMMdq_IMMb = 4321,
    XED_IFORM_VPEXTRD_GPR32u32_XMMu32_IMM8_AVX512 = 4322,
    XED_IFORM_VPEXTRD_MEMd_XMMdq_IMMb = 4323,
    XED_IFORM_VPEXTRD_MEMu32_XMMu32_IMM8_AVX512 = 4324,
    XED_IFORM_VPEXTRQ_GPR64q_XMMdq_IMMb = 4325,
    XED_IFORM_VPEXTRQ_GPR64u64_XMMu64_IMM8_AVX512 = 4326,
    XED_IFORM_VPEXTRQ_MEMq_XMMdq_IMMb = 4327,
    XED_IFORM_VPEXTRQ_MEMu64_XMMu64_IMM8_AVX512 = 4328,
    XED_IFORM_VPEXTRW_GPR32d_XMMdq_IMMb_15 = 4329,
    XED_IFORM_VPEXTRW_GPR32d_XMMdq_IMMb_C5 = 4330,
    XED_IFORM_VPEXTRW_GPR32u16_XMMu16_IMM8_AVX512 = 4331,
    XED_IFORM_VPEXTRW_MEMu16_XMMu16_IMM8_AVX512 = 4332,
    XED_IFORM_VPEXTRW_MEMw_XMMdq_IMMb = 4333,
    XED_IFORM_VPGATHERDD_XMMu32_MASKmskw_MEMu32_AVX512_VL128 = 4334,
    XED_IFORM_VPGATHERDD_XMMu32_MEMdq_XMMi32_VL128 = 4335,
    XED_IFORM_VPGATHERDD_YMMu32_MASKmskw_MEMu32_AVX512_VL256 = 4336,
    XED_IFORM_VPGATHERDD_YMMu32_MEMqq_YMMi32_VL256 = 4337,
    XED_IFORM_VPGATHERDD_ZMMu32_MASKmskw_MEMu32_AVX512_VL512 = 4338,
    XED_IFORM_VPGATHERDQ_XMMu64_MASKmskw_MEMu64_AVX512_VL128 = 4339,
    XED_IFORM_VPGATHERDQ_XMMu64_MEMdq_XMMi64_VL128 = 4340,
    XED_IFORM_VPGATHERDQ_YMMu64_MASKmskw_MEMu64_AVX512_VL256 = 4341,
    XED_IFORM_VPGATHERDQ_YMMu64_MEMqq_YMMi64_VL256 = 4342,
    XED_IFORM_VPGATHERDQ_ZMMu64_MASKmskw_MEMu64_AVX512_VL512 = 4343,
    XED_IFORM_VPGATHERQD_XMMu32_MASKmskw_MEMu32_AVX512_VL128 = 4344,
    XED_IFORM_VPGATHERQD_XMMu32_MASKmskw_MEMu32_AVX512_VL256 = 4345,
    XED_IFORM_VPGATHERQD_XMMu32_MEMdq_XMMi32_VL256 = 4346,
    XED_IFORM_VPGATHERQD_XMMu32_MEMq_XMMi32_VL128 = 4347,
    XED_IFORM_VPGATHERQD_YMMu32_MASKmskw_MEMu32_AVX512_VL512 = 4348,
    XED_IFORM_VPGATHERQQ_XMMu64_MASKmskw_MEMu64_AVX512_VL128 = 4349,
    XED_IFORM_VPGATHERQQ_XMMu64_MEMdq_XMMi64_VL128 = 4350,
    XED_IFORM_VPGATHERQQ_YMMu64_MASKmskw_MEMu64_AVX512_VL256 = 4351,
    XED_IFORM_VPGATHERQQ_YMMu64_MEMqq_YMMi64_VL256 = 4352,
    XED_IFORM_VPGATHERQQ_ZMMu64_MASKmskw_MEMu64_AVX512_VL512 = 4353,
    XED_IFORM_VPHADDBD_XMMdq_MEMdq = 4354,
    XED_IFORM_VPHADDBD_XMMdq_XMMdq = 4355,
    XED_IFORM_VPHADDBQ_XMMdq_MEMdq = 4356,
    XED_IFORM_VPHADDBQ_XMMdq_XMMdq = 4357,
    XED_IFORM_VPHADDBW_XMMdq_MEMdq = 4358,
    XED_IFORM_VPHADDBW_XMMdq_XMMdq = 4359,
    XED_IFORM_VPHADDD_XMMdq_XMMdq_MEMdq = 4360,
    XED_IFORM_VPHADDD_XMMdq_XMMdq_XMMdq = 4361,
    XED_IFORM_VPHADDD_YMMqq_YMMqq_MEMqq = 4362,
    XED_IFORM_VPHADDD_YMMqq_YMMqq_YMMqq = 4363,
    XED_IFORM_VPHADDDQ_XMMdq_MEMdq = 4364,
    XED_IFORM_VPHADDDQ_XMMdq_XMMdq = 4365,
    XED_IFORM_VPHADDSW_XMMdq_XMMdq_MEMdq = 4366,
    XED_IFORM_VPHADDSW_XMMdq_XMMdq_XMMdq = 4367,
    XED_IFORM_VPHADDSW_YMMqq_YMMqq_MEMqq = 4368,
    XED_IFORM_VPHADDSW_YMMqq_YMMqq_YMMqq = 4369,
    XED_IFORM_VPHADDUBD_XMMdq_MEMdq = 4370,
    XED_IFORM_VPHADDUBD_XMMdq_XMMdq = 4371,
    XED_IFORM_VPHADDUBQ_XMMdq_MEMdq = 4372,
    XED_IFORM_VPHADDUBQ_XMMdq_XMMdq = 4373,
    XED_IFORM_VPHADDUBW_XMMdq_MEMdq = 4374,
    XED_IFORM_VPHADDUBW_XMMdq_XMMdq = 4375,
    XED_IFORM_VPHADDUDQ_XMMdq_MEMdq = 4376,
    XED_IFORM_VPHADDUDQ_XMMdq_XMMdq = 4377,
    XED_IFORM_VPHADDUWD_XMMdq_MEMdq = 4378,
    XED_IFORM_VPHADDUWD_XMMdq_XMMdq = 4379,
    XED_IFORM_VPHADDUWQ_XMMdq_MEMdq = 4380,
    XED_IFORM_VPHADDUWQ_XMMdq_XMMdq = 4381,
    XED_IFORM_VPHADDW_XMMdq_XMMdq_MEMdq = 4382,
    XED_IFORM_VPHADDW_XMMdq_XMMdq_XMMdq = 4383,
    XED_IFORM_VPHADDW_YMMqq_YMMqq_MEMqq = 4384,
    XED_IFORM_VPHADDW_YMMqq_YMMqq_YMMqq = 4385,
    XED_IFORM_VPHADDWD_XMMdq_MEMdq = 4386,
    XED_IFORM_VPHADDWD_XMMdq_XMMdq = 4387,
    XED_IFORM_VPHADDWQ_XMMdq_MEMdq = 4388,
    XED_IFORM_VPHADDWQ_XMMdq_XMMdq = 4389,
    XED_IFORM_VPHMINPOSUW_XMMdq_MEMdq = 4390,
    XED_IFORM_VPHMINPOSUW_XMMdq_XMMdq = 4391,
    XED_IFORM_VPHSUBBW_XMMdq_MEMdq = 4392,
    XED_IFORM_VPHSUBBW_XMMdq_XMMdq = 4393,
    XED_IFORM_VPHSUBD_XMMdq_XMMdq_MEMdq = 4394,
    XED_IFORM_VPHSUBD_XMMdq_XMMdq_XMMdq = 4395,
    XED_IFORM_VPHSUBD_YMMqq_YMMqq_MEMqq = 4396,
    XED_IFORM_VPHSUBD_YMMqq_YMMqq_YMMqq = 4397,
    XED_IFORM_VPHSUBDQ_XMMdq_MEMdq = 4398,
    XED_IFORM_VPHSUBDQ_XMMdq_XMMdq = 4399,
    XED_IFORM_VPHSUBSW_XMMdq_XMMdq_MEMdq = 4400,
    XED_IFORM_VPHSUBSW_XMMdq_XMMdq_XMMdq = 4401,
    XED_IFORM_VPHSUBSW_YMMqq_YMMqq_MEMqq = 4402,
    XED_IFORM_VPHSUBSW_YMMqq_YMMqq_YMMqq = 4403,
    XED_IFORM_VPHSUBW_XMMdq_XMMdq_MEMdq = 4404,
    XED_IFORM_VPHSUBW_XMMdq_XMMdq_XMMdq = 4405,
    XED_IFORM_VPHSUBW_YMMqq_YMMqq_MEMqq = 4406,
    XED_IFORM_VPHSUBW_YMMqq_YMMqq_YMMqq = 4407,
    XED_IFORM_VPHSUBWD_XMMdq_MEMdq = 4408,
    XED_IFORM_VPHSUBWD_XMMdq_XMMdq = 4409,
    XED_IFORM_VPINSRB_XMMdq_XMMdq_GPR32d_IMMb = 4410,
    XED_IFORM_VPINSRB_XMMdq_XMMdq_MEMb_IMMb = 4411,
    XED_IFORM_VPINSRB_XMMu8_XMMu8_GPR32u8_IMM8_AVX512 = 4412,
    XED_IFORM_VPINSRB_XMMu8_XMMu8_MEMu8_IMM8_AVX512 = 4413,
    XED_IFORM_VPINSRD_XMMdq_XMMdq_GPR32d_IMMb = 4414,
    XED_IFORM_VPINSRD_XMMdq_XMMdq_MEMd_IMMb = 4415,
    XED_IFORM_VPINSRD_XMMu32_XMMu32_GPR32u32_IMM8_AVX512 = 4416,
    XED_IFORM_VPINSRD_XMMu32_XMMu32_MEMu32_IMM8_AVX512 = 4417,
    XED_IFORM_VPINSRQ_XMMdq_XMMdq_GPR64q_IMMb = 4418,
    XED_IFORM_VPINSRQ_XMMdq_XMMdq_MEMq_IMMb = 4419,
    XED_IFORM_VPINSRQ_XMMu64_XMMu64_GPR64u64_IMM8_AVX512 = 4420,
    XED_IFORM_VPINSRQ_XMMu64_XMMu64_MEMu64_IMM8_AVX512 = 4421,
    XED_IFORM_VPINSRW_XMMdq_XMMdq_GPR32d_IMMb = 4422,
    XED_IFORM_VPINSRW_XMMdq_XMMdq_MEMw_IMMb = 4423,
    XED_IFORM_VPINSRW_XMMu16_XMMu16_GPR32u16_IMM8_AVX512 = 4424,
    XED_IFORM_VPINSRW_XMMu16_XMMu16_MEMu16_IMM8_AVX512 = 4425,
    XED_IFORM_VPLZCNTD_XMMu32_MASKmskw_MEMu32_AVX512 = 4426,
    XED_IFORM_VPLZCNTD_XMMu32_MASKmskw_XMMu32_AVX512 = 4427,
    XED_IFORM_VPLZCNTD_YMMu32_MASKmskw_MEMu32_AVX512 = 4428,
    XED_IFORM_VPLZCNTD_YMMu32_MASKmskw_YMMu32_AVX512 = 4429,
    XED_IFORM_VPLZCNTD_ZMMu32_MASKmskw_MEMu32_AVX512CD = 4430,
    XED_IFORM_VPLZCNTD_ZMMu32_MASKmskw_ZMMu32_AVX512CD = 4431,
    XED_IFORM_VPLZCNTQ_XMMu64_MASKmskw_MEMu64_AVX512 = 4432,
    XED_IFORM_VPLZCNTQ_XMMu64_MASKmskw_XMMu64_AVX512 = 4433,
    XED_IFORM_VPLZCNTQ_YMMu64_MASKmskw_MEMu64_AVX512 = 4434,
    XED_IFORM_VPLZCNTQ_YMMu64_MASKmskw_YMMu64_AVX512 = 4435,
    XED_IFORM_VPLZCNTQ_ZMMu64_MASKmskw_MEMu64_AVX512CD = 4436,
    XED_IFORM_VPLZCNTQ_ZMMu64_MASKmskw_ZMMu64_AVX512CD = 4437,
    XED_IFORM_VPMACSDD_XMMdq_XMMdq_MEMdq_XMMdq = 4438,
    XED_IFORM_VPMACSDD_XMMdq_XMMdq_XMMdq_XMMdq = 4439,
    XED_IFORM_VPMACSDQH_XMMdq_XMMdq_MEMdq_XMMdq = 4440,
    XED_IFORM_VPMACSDQH_XMMdq_XMMdq_XMMdq_XMMdq = 4441,
    XED_IFORM_VPMACSDQL_XMMdq_XMMdq_MEMdq_XMMdq = 4442,
    XED_IFORM_VPMACSDQL_XMMdq_XMMdq_XMMdq_XMMdq = 4443,
    XED_IFORM_VPMACSSDD_XMMdq_XMMdq_MEMdq_XMMdq = 4444,
    XED_IFORM_VPMACSSDD_XMMdq_XMMdq_XMMdq_XMMdq = 4445,
    XED_IFORM_VPMACSSDQH_XMMdq_XMMdq_MEMdq_XMMdq = 4446,
    XED_IFORM_VPMACSSDQH_XMMdq_XMMdq_XMMdq_XMMdq = 4447,
    XED_IFORM_VPMACSSDQL_XMMdq_XMMdq_MEMdq_XMMdq = 4448,
    XED_IFORM_VPMACSSDQL_XMMdq_XMMdq_XMMdq_XMMdq = 4449,
    XED_IFORM_VPMACSSWD_XMMdq_XMMdq_MEMdq_XMMdq = 4450,
    XED_IFORM_VPMACSSWD_XMMdq_XMMdq_XMMdq_XMMdq = 4451,
    XED_IFORM_VPMACSSWW_XMMdq_XMMdq_MEMdq_XMMdq = 4452,
    XED_IFORM_VPMACSSWW_XMMdq_XMMdq_XMMdq_XMMdq = 4453,
    XED_IFORM_VPMACSWD_XMMdq_XMMdq_MEMdq_XMMdq = 4454,
    XED_IFORM_VPMACSWD_XMMdq_XMMdq_XMMdq_XMMdq = 4455,
    XED_IFORM_VPMACSWW_XMMdq_XMMdq_MEMdq_XMMdq = 4456,
    XED_IFORM_VPMACSWW_XMMdq_XMMdq_XMMdq_XMMdq = 4457,
    XED_IFORM_VPMADCSSWD_XMMdq_XMMdq_MEMdq_XMMdq = 4458,
    XED_IFORM_VPMADCSSWD_XMMdq_XMMdq_XMMdq_XMMdq = 4459,
    XED_IFORM_VPMADCSWD_XMMdq_XMMdq_MEMdq_XMMdq = 4460,
    XED_IFORM_VPMADCSWD_XMMdq_XMMdq_XMMdq_XMMdq = 4461,
    XED_IFORM_VPMADD52HUQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 4462,
    XED_IFORM_VPMADD52HUQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 4463,
    XED_IFORM_VPMADD52HUQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 4464,
    XED_IFORM_VPMADD52HUQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 4465,
    XED_IFORM_VPMADD52HUQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 4466,
    XED_IFORM_VPMADD52HUQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 4467,
    XED_IFORM_VPMADD52LUQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 4468,
    XED_IFORM_VPMADD52LUQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 4469,
    XED_IFORM_VPMADD52LUQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 4470,
    XED_IFORM_VPMADD52LUQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 4471,
    XED_IFORM_VPMADD52LUQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 4472,
    XED_IFORM_VPMADD52LUQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 4473,
    XED_IFORM_VPMADDUBSW_XMMdq_XMMdq_MEMdq = 4474,
    XED_IFORM_VPMADDUBSW_XMMdq_XMMdq_XMMdq = 4475,
    XED_IFORM_VPMADDUBSW_XMMi16_MASKmskw_XMMi16_MEMi16_AVX512 = 4476,
    XED_IFORM_VPMADDUBSW_XMMi16_MASKmskw_XMMi16_XMMi16_AVX512 = 4477,
    XED_IFORM_VPMADDUBSW_YMMi16_MASKmskw_YMMi16_MEMi16_AVX512 = 4478,
    XED_IFORM_VPMADDUBSW_YMMi16_MASKmskw_YMMi16_YMMi16_AVX512 = 4479,
    XED_IFORM_VPMADDUBSW_YMMqq_YMMqq_MEMqq = 4480,
    XED_IFORM_VPMADDUBSW_YMMqq_YMMqq_YMMqq = 4481,
    XED_IFORM_VPMADDUBSW_ZMMi16_MASKmskw_ZMMi16_MEMi16_AVX512 = 4482,
    XED_IFORM_VPMADDUBSW_ZMMi16_MASKmskw_ZMMi16_ZMMi16_AVX512 = 4483,
    XED_IFORM_VPMADDWD_XMMdq_XMMdq_MEMdq = 4484,
    XED_IFORM_VPMADDWD_XMMdq_XMMdq_XMMdq = 4485,
    XED_IFORM_VPMADDWD_XMMi32_MASKmskw_XMMi16_MEMi16_AVX512 = 4486,
    XED_IFORM_VPMADDWD_XMMi32_MASKmskw_XMMi16_XMMi16_AVX512 = 4487,
    XED_IFORM_VPMADDWD_YMMi32_MASKmskw_YMMi16_MEMi16_AVX512 = 4488,
    XED_IFORM_VPMADDWD_YMMi32_MASKmskw_YMMi16_YMMi16_AVX512 = 4489,
    XED_IFORM_VPMADDWD_YMMqq_YMMqq_MEMqq = 4490,
    XED_IFORM_VPMADDWD_YMMqq_YMMqq_YMMqq = 4491,
    XED_IFORM_VPMADDWD_ZMMi32_MASKmskw_ZMMi16_MEMi16_AVX512 = 4492,
    XED_IFORM_VPMADDWD_ZMMi32_MASKmskw_ZMMi16_ZMMi16_AVX512 = 4493,
    XED_IFORM_VPMASKMOVD_MEMdq_XMMdq_XMMdq = 4494,
    XED_IFORM_VPMASKMOVD_MEMqq_YMMqq_YMMqq = 4495,
    XED_IFORM_VPMASKMOVD_XMMdq_XMMdq_MEMdq = 4496,
    XED_IFORM_VPMASKMOVD_YMMqq_YMMqq_MEMqq = 4497,
    XED_IFORM_VPMASKMOVQ_MEMdq_XMMdq_XMMdq = 4498,
    XED_IFORM_VPMASKMOVQ_MEMqq_YMMqq_YMMqq = 4499,
    XED_IFORM_VPMASKMOVQ_XMMdq_XMMdq_MEMdq = 4500,
    XED_IFORM_VPMASKMOVQ_YMMqq_YMMqq_MEMqq = 4501,
    XED_IFORM_VPMAXSB_XMMdq_XMMdq_MEMdq = 4502,
    XED_IFORM_VPMAXSB_XMMdq_XMMdq_XMMdq = 4503,
    XED_IFORM_VPMAXSB_XMMi8_MASKmskw_XMMi8_MEMi8_AVX512 = 4504,
    XED_IFORM_VPMAXSB_XMMi8_MASKmskw_XMMi8_XMMi8_AVX512 = 4505,
    XED_IFORM_VPMAXSB_YMMi8_MASKmskw_YMMi8_MEMi8_AVX512 = 4506,
    XED_IFORM_VPMAXSB_YMMi8_MASKmskw_YMMi8_YMMi8_AVX512 = 4507,
    XED_IFORM_VPMAXSB_YMMqq_YMMqq_MEMqq = 4508,
    XED_IFORM_VPMAXSB_YMMqq_YMMqq_YMMqq = 4509,
    XED_IFORM_VPMAXSB_ZMMi8_MASKmskw_ZMMi8_MEMi8_AVX512 = 4510,
    XED_IFORM_VPMAXSB_ZMMi8_MASKmskw_ZMMi8_ZMMi8_AVX512 = 4511,
    XED_IFORM_VPMAXSD_XMMdq_XMMdq_MEMdq = 4512,
    XED_IFORM_VPMAXSD_XMMdq_XMMdq_XMMdq = 4513,
    XED_IFORM_VPMAXSD_XMMi32_MASKmskw_XMMi32_MEMi32_AVX512 = 4514,
    XED_IFORM_VPMAXSD_XMMi32_MASKmskw_XMMi32_XMMi32_AVX512 = 4515,
    XED_IFORM_VPMAXSD_YMMi32_MASKmskw_YMMi32_MEMi32_AVX512 = 4516,
    XED_IFORM_VPMAXSD_YMMi32_MASKmskw_YMMi32_YMMi32_AVX512 = 4517,
    XED_IFORM_VPMAXSD_YMMqq_YMMqq_MEMqq = 4518,
    XED_IFORM_VPMAXSD_YMMqq_YMMqq_YMMqq = 4519,
    XED_IFORM_VPMAXSD_ZMMi32_MASKmskw_ZMMi32_MEMi32_AVX512 = 4520,
    XED_IFORM_VPMAXSD_ZMMi32_MASKmskw_ZMMi32_ZMMi32_AVX512 = 4521,
    XED_IFORM_VPMAXSQ_XMMi64_MASKmskw_XMMi64_MEMi64_AVX512 = 4522,
    XED_IFORM_VPMAXSQ_XMMi64_MASKmskw_XMMi64_XMMi64_AVX512 = 4523,
    XED_IFORM_VPMAXSQ_YMMi64_MASKmskw_YMMi64_MEMi64_AVX512 = 4524,
    XED_IFORM_VPMAXSQ_YMMi64_MASKmskw_YMMi64_YMMi64_AVX512 = 4525,
    XED_IFORM_VPMAXSQ_ZMMi64_MASKmskw_ZMMi64_MEMi64_AVX512 = 4526,
    XED_IFORM_VPMAXSQ_ZMMi64_MASKmskw_ZMMi64_ZMMi64_AVX512 = 4527,
    XED_IFORM_VPMAXSW_XMMdq_XMMdq_MEMdq = 4528,
    XED_IFORM_VPMAXSW_XMMdq_XMMdq_XMMdq = 4529,
    XED_IFORM_VPMAXSW_XMMi16_MASKmskw_XMMi16_MEMi16_AVX512 = 4530,
    XED_IFORM_VPMAXSW_XMMi16_MASKmskw_XMMi16_XMMi16_AVX512 = 4531,
    XED_IFORM_VPMAXSW_YMMi16_MASKmskw_YMMi16_MEMi16_AVX512 = 4532,
    XED_IFORM_VPMAXSW_YMMi16_MASKmskw_YMMi16_YMMi16_AVX512 = 4533,
    XED_IFORM_VPMAXSW_YMMqq_YMMqq_MEMqq = 4534,
    XED_IFORM_VPMAXSW_YMMqq_YMMqq_YMMqq = 4535,
    XED_IFORM_VPMAXSW_ZMMi16_MASKmskw_ZMMi16_MEMi16_AVX512 = 4536,
    XED_IFORM_VPMAXSW_ZMMi16_MASKmskw_ZMMi16_ZMMi16_AVX512 = 4537,
    XED_IFORM_VPMAXUB_XMMdq_XMMdq_MEMdq = 4538,
    XED_IFORM_VPMAXUB_XMMdq_XMMdq_XMMdq = 4539,
    XED_IFORM_VPMAXUB_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 4540,
    XED_IFORM_VPMAXUB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 4541,
    XED_IFORM_VPMAXUB_YMMqq_YMMqq_MEMqq = 4542,
    XED_IFORM_VPMAXUB_YMMqq_YMMqq_YMMqq = 4543,
    XED_IFORM_VPMAXUB_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 4544,
    XED_IFORM_VPMAXUB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 4545,
    XED_IFORM_VPMAXUB_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 4546,
    XED_IFORM_VPMAXUB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 4547,
    XED_IFORM_VPMAXUD_XMMdq_XMMdq_MEMdq = 4548,
    XED_IFORM_VPMAXUD_XMMdq_XMMdq_XMMdq = 4549,
    XED_IFORM_VPMAXUD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 4550,
    XED_IFORM_VPMAXUD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 4551,
    XED_IFORM_VPMAXUD_YMMqq_YMMqq_MEMqq = 4552,
    XED_IFORM_VPMAXUD_YMMqq_YMMqq_YMMqq = 4553,
    XED_IFORM_VPMAXUD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 4554,
    XED_IFORM_VPMAXUD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 4555,
    XED_IFORM_VPMAXUD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 4556,
    XED_IFORM_VPMAXUD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 4557,
    XED_IFORM_VPMAXUQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 4558,
    XED_IFORM_VPMAXUQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 4559,
    XED_IFORM_VPMAXUQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 4560,
    XED_IFORM_VPMAXUQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 4561,
    XED_IFORM_VPMAXUQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 4562,
    XED_IFORM_VPMAXUQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 4563,
    XED_IFORM_VPMAXUW_XMMdq_XMMdq_MEMdq = 4564,
    XED_IFORM_VPMAXUW_XMMdq_XMMdq_XMMdq = 4565,
    XED_IFORM_VPMAXUW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 4566,
    XED_IFORM_VPMAXUW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 4567,
    XED_IFORM_VPMAXUW_YMMqq_YMMqq_MEMqq = 4568,
    XED_IFORM_VPMAXUW_YMMqq_YMMqq_YMMqq = 4569,
    XED_IFORM_VPMAXUW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 4570,
    XED_IFORM_VPMAXUW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 4571,
    XED_IFORM_VPMAXUW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 4572,
    XED_IFORM_VPMAXUW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 4573,
    XED_IFORM_VPMINSB_XMMdq_XMMdq_MEMdq = 4574,
    XED_IFORM_VPMINSB_XMMdq_XMMdq_XMMdq = 4575,
    XED_IFORM_VPMINSB_XMMi8_MASKmskw_XMMi8_MEMi8_AVX512 = 4576,
    XED_IFORM_VPMINSB_XMMi8_MASKmskw_XMMi8_XMMi8_AVX512 = 4577,
    XED_IFORM_VPMINSB_YMMi8_MASKmskw_YMMi8_MEMi8_AVX512 = 4578,
    XED_IFORM_VPMINSB_YMMi8_MASKmskw_YMMi8_YMMi8_AVX512 = 4579,
    XED_IFORM_VPMINSB_YMMqq_YMMqq_MEMqq = 4580,
    XED_IFORM_VPMINSB_YMMqq_YMMqq_YMMqq = 4581,
    XED_IFORM_VPMINSB_ZMMi8_MASKmskw_ZMMi8_MEMi8_AVX512 = 4582,
    XED_IFORM_VPMINSB_ZMMi8_MASKmskw_ZMMi8_ZMMi8_AVX512 = 4583,
    XED_IFORM_VPMINSD_XMMdq_XMMdq_MEMdq = 4584,
    XED_IFORM_VPMINSD_XMMdq_XMMdq_XMMdq = 4585,
    XED_IFORM_VPMINSD_XMMi32_MASKmskw_XMMi32_MEMi32_AVX512 = 4586,
    XED_IFORM_VPMINSD_XMMi32_MASKmskw_XMMi32_XMMi32_AVX512 = 4587,
    XED_IFORM_VPMINSD_YMMi32_MASKmskw_YMMi32_MEMi32_AVX512 = 4588,
    XED_IFORM_VPMINSD_YMMi32_MASKmskw_YMMi32_YMMi32_AVX512 = 4589,
    XED_IFORM_VPMINSD_YMMqq_YMMqq_MEMqq = 4590,
    XED_IFORM_VPMINSD_YMMqq_YMMqq_YMMqq = 4591,
    XED_IFORM_VPMINSD_ZMMi32_MASKmskw_ZMMi32_MEMi32_AVX512 = 4592,
    XED_IFORM_VPMINSD_ZMMi32_MASKmskw_ZMMi32_ZMMi32_AVX512 = 4593,
    XED_IFORM_VPMINSQ_XMMi64_MASKmskw_XMMi64_MEMi64_AVX512 = 4594,
    XED_IFORM_VPMINSQ_XMMi64_MASKmskw_XMMi64_XMMi64_AVX512 = 4595,
    XED_IFORM_VPMINSQ_YMMi64_MASKmskw_YMMi64_MEMi64_AVX512 = 4596,
    XED_IFORM_VPMINSQ_YMMi64_MASKmskw_YMMi64_YMMi64_AVX512 = 4597,
    XED_IFORM_VPMINSQ_ZMMi64_MASKmskw_ZMMi64_MEMi64_AVX512 = 4598,
    XED_IFORM_VPMINSQ_ZMMi64_MASKmskw_ZMMi64_ZMMi64_AVX512 = 4599,
    XED_IFORM_VPMINSW_XMMdq_XMMdq_MEMdq = 4600,
    XED_IFORM_VPMINSW_XMMdq_XMMdq_XMMdq = 4601,
    XED_IFORM_VPMINSW_XMMi16_MASKmskw_XMMi16_MEMi16_AVX512 = 4602,
    XED_IFORM_VPMINSW_XMMi16_MASKmskw_XMMi16_XMMi16_AVX512 = 4603,
    XED_IFORM_VPMINSW_YMMi16_MASKmskw_YMMi16_MEMi16_AVX512 = 4604,
    XED_IFORM_VPMINSW_YMMi16_MASKmskw_YMMi16_YMMi16_AVX512 = 4605,
    XED_IFORM_VPMINSW_YMMqq_YMMqq_MEMqq = 4606,
    XED_IFORM_VPMINSW_YMMqq_YMMqq_YMMqq = 4607,
    XED_IFORM_VPMINSW_ZMMi16_MASKmskw_ZMMi16_MEMi16_AVX512 = 4608,
    XED_IFORM_VPMINSW_ZMMi16_MASKmskw_ZMMi16_ZMMi16_AVX512 = 4609,
    XED_IFORM_VPMINUB_XMMdq_XMMdq_MEMdq = 4610,
    XED_IFORM_VPMINUB_XMMdq_XMMdq_XMMdq = 4611,
    XED_IFORM_VPMINUB_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 4612,
    XED_IFORM_VPMINUB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 4613,
    XED_IFORM_VPMINUB_YMMqq_YMMqq_MEMqq = 4614,
    XED_IFORM_VPMINUB_YMMqq_YMMqq_YMMqq = 4615,
    XED_IFORM_VPMINUB_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 4616,
    XED_IFORM_VPMINUB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 4617,
    XED_IFORM_VPMINUB_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 4618,
    XED_IFORM_VPMINUB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 4619,
    XED_IFORM_VPMINUD_XMMdq_XMMdq_MEMdq = 4620,
    XED_IFORM_VPMINUD_XMMdq_XMMdq_XMMdq = 4621,
    XED_IFORM_VPMINUD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 4622,
    XED_IFORM_VPMINUD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 4623,
    XED_IFORM_VPMINUD_YMMqq_YMMqq_MEMqq = 4624,
    XED_IFORM_VPMINUD_YMMqq_YMMqq_YMMqq = 4625,
    XED_IFORM_VPMINUD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 4626,
    XED_IFORM_VPMINUD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 4627,
    XED_IFORM_VPMINUD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 4628,
    XED_IFORM_VPMINUD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 4629,
    XED_IFORM_VPMINUQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 4630,
    XED_IFORM_VPMINUQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 4631,
    XED_IFORM_VPMINUQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 4632,
    XED_IFORM_VPMINUQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 4633,
    XED_IFORM_VPMINUQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 4634,
    XED_IFORM_VPMINUQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 4635,
    XED_IFORM_VPMINUW_XMMdq_XMMdq_MEMdq = 4636,
    XED_IFORM_VPMINUW_XMMdq_XMMdq_XMMdq = 4637,
    XED_IFORM_VPMINUW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 4638,
    XED_IFORM_VPMINUW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 4639,
    XED_IFORM_VPMINUW_YMMqq_YMMqq_MEMqq = 4640,
    XED_IFORM_VPMINUW_YMMqq_YMMqq_YMMqq = 4641,
    XED_IFORM_VPMINUW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 4642,
    XED_IFORM_VPMINUW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 4643,
    XED_IFORM_VPMINUW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 4644,
    XED_IFORM_VPMINUW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 4645,
    XED_IFORM_VPMOVB2M_MASKmskw_XMMu8_AVX512 = 4646,
    XED_IFORM_VPMOVB2M_MASKmskw_YMMu8_AVX512 = 4647,
    XED_IFORM_VPMOVB2M_MASKmskw_ZMMu8_AVX512 = 4648,
    XED_IFORM_VPMOVD2M_MASKmskw_XMMu32_AVX512 = 4649,
    XED_IFORM_VPMOVD2M_MASKmskw_YMMu32_AVX512 = 4650,
    XED_IFORM_VPMOVD2M_MASKmskw_ZMMu32_AVX512 = 4651,
    XED_IFORM_VPMOVDB_MEMu8_MASKmskw_XMMu32_AVX512 = 4652,
    XED_IFORM_VPMOVDB_MEMu8_MASKmskw_YMMu32_AVX512 = 4653,
    XED_IFORM_VPMOVDB_MEMu8_MASKmskw_ZMMu32_AVX512 = 4654,
    XED_IFORM_VPMOVDB_XMMu8_MASKmskw_XMMu32_AVX512 = 4655,
    XED_IFORM_VPMOVDB_XMMu8_MASKmskw_YMMu32_AVX512 = 4656,
    XED_IFORM_VPMOVDB_XMMu8_MASKmskw_ZMMu32_AVX512 = 4657,
    XED_IFORM_VPMOVDW_MEMu16_MASKmskw_XMMu32_AVX512 = 4658,
    XED_IFORM_VPMOVDW_MEMu16_MASKmskw_YMMu32_AVX512 = 4659,
    XED_IFORM_VPMOVDW_MEMu16_MASKmskw_ZMMu32_AVX512 = 4660,
    XED_IFORM_VPMOVDW_XMMu16_MASKmskw_XMMu32_AVX512 = 4661,
    XED_IFORM_VPMOVDW_XMMu16_MASKmskw_YMMu32_AVX512 = 4662,
    XED_IFORM_VPMOVDW_YMMu16_MASKmskw_ZMMu32_AVX512 = 4663,
    XED_IFORM_VPMOVM2B_XMMu8_MASKmskw_AVX512 = 4664,
    XED_IFORM_VPMOVM2B_YMMu8_MASKmskw_AVX512 = 4665,
    XED_IFORM_VPMOVM2B_ZMMu8_MASKmskw_AVX512 = 4666,
    XED_IFORM_VPMOVM2D_XMMu32_MASKmskw_AVX512 = 4667,
    XED_IFORM_VPMOVM2D_YMMu32_MASKmskw_AVX512 = 4668,
    XED_IFORM_VPMOVM2D_ZMMu32_MASKmskw_AVX512 = 4669,
    XED_IFORM_VPMOVM2Q_XMMu64_MASKmskw_AVX512 = 4670,
    XED_IFORM_VPMOVM2Q_YMMu64_MASKmskw_AVX512 = 4671,
    XED_IFORM_VPMOVM2Q_ZMMu64_MASKmskw_AVX512 = 4672,
    XED_IFORM_VPMOVM2W_XMMu16_MASKmskw_AVX512 = 4673,
    XED_IFORM_VPMOVM2W_YMMu16_MASKmskw_AVX512 = 4674,
    XED_IFORM_VPMOVM2W_ZMMu16_MASKmskw_AVX512 = 4675,
    XED_IFORM_VPMOVMSKB_GPR32d_XMMdq = 4676,
    XED_IFORM_VPMOVMSKB_GPR32d_YMMqq = 4677,
    XED_IFORM_VPMOVQ2M_MASKmskw_XMMu64_AVX512 = 4678,
    XED_IFORM_VPMOVQ2M_MASKmskw_YMMu64_AVX512 = 4679,
    XED_IFORM_VPMOVQ2M_MASKmskw_ZMMu64_AVX512 = 4680,
    XED_IFORM_VPMOVQB_MEMu8_MASKmskw_XMMu64_AVX512 = 4681,
    XED_IFORM_VPMOVQB_MEMu8_MASKmskw_YMMu64_AVX512 = 4682,
    XED_IFORM_VPMOVQB_MEMu8_MASKmskw_ZMMu64_AVX512 = 4683,
    XED_IFORM_VPMOVQB_XMMu8_MASKmskw_XMMu64_AVX512 = 4684,
    XED_IFORM_VPMOVQB_XMMu8_MASKmskw_YMMu64_AVX512 = 4685,
    XED_IFORM_VPMOVQB_XMMu8_MASKmskw_ZMMu64_AVX512 = 4686,
    XED_IFORM_VPMOVQD_MEMu32_MASKmskw_XMMu64_AVX512 = 4687,
    XED_IFORM_VPMOVQD_MEMu32_MASKmskw_YMMu64_AVX512 = 4688,
    XED_IFORM_VPMOVQD_MEMu32_MASKmskw_ZMMu64_AVX512 = 4689,
    XED_IFORM_VPMOVQD_XMMu32_MASKmskw_XMMu64_AVX512 = 4690,
    XED_IFORM_VPMOVQD_XMMu32_MASKmskw_YMMu64_AVX512 = 4691,
    XED_IFORM_VPMOVQD_YMMu32_MASKmskw_ZMMu64_AVX512 = 4692,
    XED_IFORM_VPMOVQW_MEMu16_MASKmskw_XMMu64_AVX512 = 4693,
    XED_IFORM_VPMOVQW_MEMu16_MASKmskw_YMMu64_AVX512 = 4694,
    XED_IFORM_VPMOVQW_MEMu16_MASKmskw_ZMMu64_AVX512 = 4695,
    XED_IFORM_VPMOVQW_XMMu16_MASKmskw_XMMu64_AVX512 = 4696,
    XED_IFORM_VPMOVQW_XMMu16_MASKmskw_YMMu64_AVX512 = 4697,
    XED_IFORM_VPMOVQW_XMMu16_MASKmskw_ZMMu64_AVX512 = 4698,
    XED_IFORM_VPMOVSDB_MEMi8_MASKmskw_XMMi32_AVX512 = 4699,
    XED_IFORM_VPMOVSDB_MEMi8_MASKmskw_YMMi32_AVX512 = 4700,
    XED_IFORM_VPMOVSDB_MEMi8_MASKmskw_ZMMi32_AVX512 = 4701,
    XED_IFORM_VPMOVSDB_XMMi8_MASKmskw_XMMi32_AVX512 = 4702,
    XED_IFORM_VPMOVSDB_XMMi8_MASKmskw_YMMi32_AVX512 = 4703,
    XED_IFORM_VPMOVSDB_XMMi8_MASKmskw_ZMMi32_AVX512 = 4704,
    XED_IFORM_VPMOVSDW_MEMi16_MASKmskw_XMMi32_AVX512 = 4705,
    XED_IFORM_VPMOVSDW_MEMi16_MASKmskw_YMMi32_AVX512 = 4706,
    XED_IFORM_VPMOVSDW_MEMi16_MASKmskw_ZMMi32_AVX512 = 4707,
    XED_IFORM_VPMOVSDW_XMMi16_MASKmskw_XMMi32_AVX512 = 4708,
    XED_IFORM_VPMOVSDW_XMMi16_MASKmskw_YMMi32_AVX512 = 4709,
    XED_IFORM_VPMOVSDW_YMMi16_MASKmskw_ZMMi32_AVX512 = 4710,
    XED_IFORM_VPMOVSQB_MEMi8_MASKmskw_XMMi64_AVX512 = 4711,
    XED_IFORM_VPMOVSQB_MEMi8_MASKmskw_YMMi64_AVX512 = 4712,
    XED_IFORM_VPMOVSQB_MEMi8_MASKmskw_ZMMi64_AVX512 = 4713,
    XED_IFORM_VPMOVSQB_XMMi8_MASKmskw_XMMi64_AVX512 = 4714,
    XED_IFORM_VPMOVSQB_XMMi8_MASKmskw_YMMi64_AVX512 = 4715,
    XED_IFORM_VPMOVSQB_XMMi8_MASKmskw_ZMMi64_AVX512 = 4716,
    XED_IFORM_VPMOVSQD_MEMi32_MASKmskw_XMMi64_AVX512 = 4717,
    XED_IFORM_VPMOVSQD_MEMi32_MASKmskw_YMMi64_AVX512 = 4718,
    XED_IFORM_VPMOVSQD_MEMi32_MASKmskw_ZMMi64_AVX512 = 4719,
    XED_IFORM_VPMOVSQD_XMMi32_MASKmskw_XMMi64_AVX512 = 4720,
    XED_IFORM_VPMOVSQD_XMMi32_MASKmskw_YMMi64_AVX512 = 4721,
    XED_IFORM_VPMOVSQD_YMMi32_MASKmskw_ZMMi64_AVX512 = 4722,
    XED_IFORM_VPMOVSQW_MEMi16_MASKmskw_XMMi64_AVX512 = 4723,
    XED_IFORM_VPMOVSQW_MEMi16_MASKmskw_YMMi64_AVX512 = 4724,
    XED_IFORM_VPMOVSQW_MEMi16_MASKmskw_ZMMi64_AVX512 = 4725,
    XED_IFORM_VPMOVSQW_XMMi16_MASKmskw_XMMi64_AVX512 = 4726,
    XED_IFORM_VPMOVSQW_XMMi16_MASKmskw_YMMi64_AVX512 = 4727,
    XED_IFORM_VPMOVSQW_XMMi16_MASKmskw_ZMMi64_AVX512 = 4728,
    XED_IFORM_VPMOVSWB_MEMi8_MASKmskw_XMMi16_AVX512 = 4729,
    XED_IFORM_VPMOVSWB_MEMi8_MASKmskw_YMMi16_AVX512 = 4730,
    XED_IFORM_VPMOVSWB_MEMi8_MASKmskw_ZMMi16_AVX512 = 4731,
    XED_IFORM_VPMOVSWB_XMMi8_MASKmskw_XMMi16_AVX512 = 4732,
    XED_IFORM_VPMOVSWB_XMMi8_MASKmskw_YMMi16_AVX512 = 4733,
    XED_IFORM_VPMOVSWB_YMMi8_MASKmskw_ZMMi16_AVX512 = 4734,
    XED_IFORM_VPMOVSXBD_XMMdq_MEMd = 4735,
    XED_IFORM_VPMOVSXBD_XMMdq_XMMd = 4736,
    XED_IFORM_VPMOVSXBD_XMMi32_MASKmskw_MEMi8_AVX512 = 4737,
    XED_IFORM_VPMOVSXBD_XMMi32_MASKmskw_XMMi8_AVX512 = 4738,
    XED_IFORM_VPMOVSXBD_YMMi32_MASKmskw_MEMi8_AVX512 = 4739,
    XED_IFORM_VPMOVSXBD_YMMi32_MASKmskw_XMMi8_AVX512 = 4740,
    XED_IFORM_VPMOVSXBD_YMMqq_MEMq = 4741,
    XED_IFORM_VPMOVSXBD_YMMqq_XMMq = 4742,
    XED_IFORM_VPMOVSXBD_ZMMi32_MASKmskw_MEMi8_AVX512 = 4743,
    XED_IFORM_VPMOVSXBD_ZMMi32_MASKmskw_XMMi8_AVX512 = 4744,
    XED_IFORM_VPMOVSXBQ_XMMdq_MEMw = 4745,
    XED_IFORM_VPMOVSXBQ_XMMdq_XMMw = 4746,
    XED_IFORM_VPMOVSXBQ_XMMi64_MASKmskw_MEMi8_AVX512 = 4747,
    XED_IFORM_VPMOVSXBQ_XMMi64_MASKmskw_XMMi8_AVX512 = 4748,
    XED_IFORM_VPMOVSXBQ_YMMi64_MASKmskw_MEMi8_AVX512 = 4749,
    XED_IFORM_VPMOVSXBQ_YMMi64_MASKmskw_XMMi8_AVX512 = 4750,
    XED_IFORM_VPMOVSXBQ_YMMqq_MEMd = 4751,
    XED_IFORM_VPMOVSXBQ_YMMqq_XMMd = 4752,
    XED_IFORM_VPMOVSXBQ_ZMMi64_MASKmskw_MEMi8_AVX512 = 4753,
    XED_IFORM_VPMOVSXBQ_ZMMi64_MASKmskw_XMMi8_AVX512 = 4754,
    XED_IFORM_VPMOVSXBW_XMMdq_MEMq = 4755,
    XED_IFORM_VPMOVSXBW_XMMdq_XMMq = 4756,
    XED_IFORM_VPMOVSXBW_XMMi16_MASKmskw_MEMi8_AVX512 = 4757,
    XED_IFORM_VPMOVSXBW_XMMi16_MASKmskw_XMMi8_AVX512 = 4758,
    XED_IFORM_VPMOVSXBW_YMMi16_MASKmskw_MEMi8_AVX512 = 4759,
    XED_IFORM_VPMOVSXBW_YMMi16_MASKmskw_XMMi8_AVX512 = 4760,
    XED_IFORM_VPMOVSXBW_YMMqq_MEMdq = 4761,
    XED_IFORM_VPMOVSXBW_YMMqq_XMMdq = 4762,
    XED_IFORM_VPMOVSXBW_ZMMi16_MASKmskw_MEMi8_AVX512 = 4763,
    XED_IFORM_VPMOVSXBW_ZMMi16_MASKmskw_YMMi8_AVX512 = 4764,
    XED_IFORM_VPMOVSXDQ_XMMdq_MEMq = 4765,
    XED_IFORM_VPMOVSXDQ_XMMdq_XMMq = 4766,
    XED_IFORM_VPMOVSXDQ_XMMi64_MASKmskw_MEMi32_AVX512 = 4767,
    XED_IFORM_VPMOVSXDQ_XMMi64_MASKmskw_XMMi32_AVX512 = 4768,
    XED_IFORM_VPMOVSXDQ_YMMi64_MASKmskw_MEMi32_AVX512 = 4769,
    XED_IFORM_VPMOVSXDQ_YMMi64_MASKmskw_XMMi32_AVX512 = 4770,
    XED_IFORM_VPMOVSXDQ_YMMqq_MEMdq = 4771,
    XED_IFORM_VPMOVSXDQ_YMMqq_XMMdq = 4772,
    XED_IFORM_VPMOVSXDQ_ZMMi64_MASKmskw_MEMi32_AVX512 = 4773,
    XED_IFORM_VPMOVSXDQ_ZMMi64_MASKmskw_YMMi32_AVX512 = 4774,
    XED_IFORM_VPMOVSXWD_XMMdq_MEMq = 4775,
    XED_IFORM_VPMOVSXWD_XMMdq_XMMq = 4776,
    XED_IFORM_VPMOVSXWD_XMMi32_MASKmskw_MEMi16_AVX512 = 4777,
    XED_IFORM_VPMOVSXWD_XMMi32_MASKmskw_XMMi16_AVX512 = 4778,
    XED_IFORM_VPMOVSXWD_YMMi32_MASKmskw_MEMi16_AVX512 = 4779,
    XED_IFORM_VPMOVSXWD_YMMi32_MASKmskw_XMMi16_AVX512 = 4780,
    XED_IFORM_VPMOVSXWD_YMMqq_MEMdq = 4781,
    XED_IFORM_VPMOVSXWD_YMMqq_XMMdq = 4782,
    XED_IFORM_VPMOVSXWD_ZMMi32_MASKmskw_MEMi16_AVX512 = 4783,
    XED_IFORM_VPMOVSXWD_ZMMi32_MASKmskw_YMMi16_AVX512 = 4784,
    XED_IFORM_VPMOVSXWQ_XMMdq_MEMd = 4785,
    XED_IFORM_VPMOVSXWQ_XMMdq_XMMd = 4786,
    XED_IFORM_VPMOVSXWQ_XMMi64_MASKmskw_MEMi16_AVX512 = 4787,
    XED_IFORM_VPMOVSXWQ_XMMi64_MASKmskw_XMMi16_AVX512 = 4788,
    XED_IFORM_VPMOVSXWQ_YMMi64_MASKmskw_MEMi16_AVX512 = 4789,
    XED_IFORM_VPMOVSXWQ_YMMi64_MASKmskw_XMMi16_AVX512 = 4790,
    XED_IFORM_VPMOVSXWQ_YMMqq_MEMq = 4791,
    XED_IFORM_VPMOVSXWQ_YMMqq_XMMq = 4792,
    XED_IFORM_VPMOVSXWQ_ZMMi64_MASKmskw_MEMi16_AVX512 = 4793,
    XED_IFORM_VPMOVSXWQ_ZMMi64_MASKmskw_XMMi16_AVX512 = 4794,
    XED_IFORM_VPMOVUSDB_MEMu8_MASKmskw_XMMu32_AVX512 = 4795,
    XED_IFORM_VPMOVUSDB_MEMu8_MASKmskw_YMMu32_AVX512 = 4796,
    XED_IFORM_VPMOVUSDB_MEMu8_MASKmskw_ZMMu32_AVX512 = 4797,
    XED_IFORM_VPMOVUSDB_XMMu8_MASKmskw_XMMu32_AVX512 = 4798,
    XED_IFORM_VPMOVUSDB_XMMu8_MASKmskw_YMMu32_AVX512 = 4799,
    XED_IFORM_VPMOVUSDB_XMMu8_MASKmskw_ZMMu32_AVX512 = 4800,
    XED_IFORM_VPMOVUSDW_MEMu16_MASKmskw_XMMu32_AVX512 = 4801,
    XED_IFORM_VPMOVUSDW_MEMu16_MASKmskw_YMMu32_AVX512 = 4802,
    XED_IFORM_VPMOVUSDW_MEMu16_MASKmskw_ZMMu32_AVX512 = 4803,
    XED_IFORM_VPMOVUSDW_XMMu16_MASKmskw_XMMu32_AVX512 = 4804,
    XED_IFORM_VPMOVUSDW_XMMu16_MASKmskw_YMMu32_AVX512 = 4805,
    XED_IFORM_VPMOVUSDW_YMMu16_MASKmskw_ZMMu32_AVX512 = 4806,
    XED_IFORM_VPMOVUSQB_MEMu8_MASKmskw_XMMu64_AVX512 = 4807,
    XED_IFORM_VPMOVUSQB_MEMu8_MASKmskw_YMMu64_AVX512 = 4808,
    XED_IFORM_VPMOVUSQB_MEMu8_MASKmskw_ZMMu64_AVX512 = 4809,
    XED_IFORM_VPMOVUSQB_XMMu8_MASKmskw_XMMu64_AVX512 = 4810,
    XED_IFORM_VPMOVUSQB_XMMu8_MASKmskw_YMMu64_AVX512 = 4811,
    XED_IFORM_VPMOVUSQB_XMMu8_MASKmskw_ZMMu64_AVX512 = 4812,
    XED_IFORM_VPMOVUSQD_MEMu32_MASKmskw_XMMu64_AVX512 = 4813,
    XED_IFORM_VPMOVUSQD_MEMu32_MASKmskw_YMMu64_AVX512 = 4814,
    XED_IFORM_VPMOVUSQD_MEMu32_MASKmskw_ZMMu64_AVX512 = 4815,
    XED_IFORM_VPMOVUSQD_XMMu32_MASKmskw_XMMu64_AVX512 = 4816,
    XED_IFORM_VPMOVUSQD_XMMu32_MASKmskw_YMMu64_AVX512 = 4817,
    XED_IFORM_VPMOVUSQD_YMMu32_MASKmskw_ZMMu64_AVX512 = 4818,
    XED_IFORM_VPMOVUSQW_MEMu16_MASKmskw_XMMu64_AVX512 = 4819,
    XED_IFORM_VPMOVUSQW_MEMu16_MASKmskw_YMMu64_AVX512 = 4820,
    XED_IFORM_VPMOVUSQW_MEMu16_MASKmskw_ZMMu64_AVX512 = 4821,
    XED_IFORM_VPMOVUSQW_XMMu16_MASKmskw_XMMu64_AVX512 = 4822,
    XED_IFORM_VPMOVUSQW_XMMu16_MASKmskw_YMMu64_AVX512 = 4823,
    XED_IFORM_VPMOVUSQW_XMMu16_MASKmskw_ZMMu64_AVX512 = 4824,
    XED_IFORM_VPMOVUSWB_MEMu8_MASKmskw_XMMu16_AVX512 = 4825,
    XED_IFORM_VPMOVUSWB_MEMu8_MASKmskw_YMMu16_AVX512 = 4826,
    XED_IFORM_VPMOVUSWB_MEMu8_MASKmskw_ZMMu16_AVX512 = 4827,
    XED_IFORM_VPMOVUSWB_XMMu8_MASKmskw_XMMu16_AVX512 = 4828,
    XED_IFORM_VPMOVUSWB_XMMu8_MASKmskw_YMMu16_AVX512 = 4829,
    XED_IFORM_VPMOVUSWB_YMMu8_MASKmskw_ZMMu16_AVX512 = 4830,
    XED_IFORM_VPMOVW2M_MASKmskw_XMMu16_AVX512 = 4831,
    XED_IFORM_VPMOVW2M_MASKmskw_YMMu16_AVX512 = 4832,
    XED_IFORM_VPMOVW2M_MASKmskw_ZMMu16_AVX512 = 4833,
    XED_IFORM_VPMOVWB_MEMu8_MASKmskw_XMMu16_AVX512 = 4834,
    XED_IFORM_VPMOVWB_MEMu8_MASKmskw_YMMu16_AVX512 = 4835,
    XED_IFORM_VPMOVWB_MEMu8_MASKmskw_ZMMu16_AVX512 = 4836,
    XED_IFORM_VPMOVWB_XMMu8_MASKmskw_XMMu16_AVX512 = 4837,
    XED_IFORM_VPMOVWB_XMMu8_MASKmskw_YMMu16_AVX512 = 4838,
    XED_IFORM_VPMOVWB_YMMu8_MASKmskw_ZMMu16_AVX512 = 4839,
    XED_IFORM_VPMOVZXBD_XMMdq_MEMd = 4840,
    XED_IFORM_VPMOVZXBD_XMMdq_XMMd = 4841,
    XED_IFORM_VPMOVZXBD_XMMi32_MASKmskw_MEMi8_AVX512 = 4842,
    XED_IFORM_VPMOVZXBD_XMMi32_MASKmskw_XMMi8_AVX512 = 4843,
    XED_IFORM_VPMOVZXBD_YMMi32_MASKmskw_MEMi8_AVX512 = 4844,
    XED_IFORM_VPMOVZXBD_YMMi32_MASKmskw_XMMi8_AVX512 = 4845,
    XED_IFORM_VPMOVZXBD_YMMqq_MEMq = 4846,
    XED_IFORM_VPMOVZXBD_YMMqq_XMMq = 4847,
    XED_IFORM_VPMOVZXBD_ZMMi32_MASKmskw_MEMi8_AVX512 = 4848,
    XED_IFORM_VPMOVZXBD_ZMMi32_MASKmskw_XMMi8_AVX512 = 4849,
    XED_IFORM_VPMOVZXBQ_XMMdq_MEMw = 4850,
    XED_IFORM_VPMOVZXBQ_XMMdq_XMMw = 4851,
    XED_IFORM_VPMOVZXBQ_XMMi64_MASKmskw_MEMi8_AVX512 = 4852,
    XED_IFORM_VPMOVZXBQ_XMMi64_MASKmskw_XMMi8_AVX512 = 4853,
    XED_IFORM_VPMOVZXBQ_YMMi64_MASKmskw_MEMi8_AVX512 = 4854,
    XED_IFORM_VPMOVZXBQ_YMMi64_MASKmskw_XMMi8_AVX512 = 4855,
    XED_IFORM_VPMOVZXBQ_YMMqq_MEMd = 4856,
    XED_IFORM_VPMOVZXBQ_YMMqq_XMMd = 4857,
    XED_IFORM_VPMOVZXBQ_ZMMi64_MASKmskw_MEMi8_AVX512 = 4858,
    XED_IFORM_VPMOVZXBQ_ZMMi64_MASKmskw_XMMi8_AVX512 = 4859,
    XED_IFORM_VPMOVZXBW_XMMdq_MEMq = 4860,
    XED_IFORM_VPMOVZXBW_XMMdq_XMMq = 4861,
    XED_IFORM_VPMOVZXBW_XMMi16_MASKmskw_MEMi8_AVX512 = 4862,
    XED_IFORM_VPMOVZXBW_XMMi16_MASKmskw_XMMi8_AVX512 = 4863,
    XED_IFORM_VPMOVZXBW_YMMi16_MASKmskw_MEMi8_AVX512 = 4864,
    XED_IFORM_VPMOVZXBW_YMMi16_MASKmskw_XMMi8_AVX512 = 4865,
    XED_IFORM_VPMOVZXBW_YMMqq_MEMdq = 4866,
    XED_IFORM_VPMOVZXBW_YMMqq_XMMdq = 4867,
    XED_IFORM_VPMOVZXBW_ZMMi16_MASKmskw_MEMi8_AVX512 = 4868,
    XED_IFORM_VPMOVZXBW_ZMMi16_MASKmskw_YMMi8_AVX512 = 4869,
    XED_IFORM_VPMOVZXDQ_XMMdq_MEMq = 4870,
    XED_IFORM_VPMOVZXDQ_XMMdq_XMMq = 4871,
    XED_IFORM_VPMOVZXDQ_XMMi64_MASKmskw_MEMi32_AVX512 = 4872,
    XED_IFORM_VPMOVZXDQ_XMMi64_MASKmskw_XMMi32_AVX512 = 4873,
    XED_IFORM_VPMOVZXDQ_YMMi64_MASKmskw_MEMi32_AVX512 = 4874,
    XED_IFORM_VPMOVZXDQ_YMMi64_MASKmskw_XMMi32_AVX512 = 4875,
    XED_IFORM_VPMOVZXDQ_YMMqq_MEMdq = 4876,
    XED_IFORM_VPMOVZXDQ_YMMqq_XMMdq = 4877,
    XED_IFORM_VPMOVZXDQ_ZMMi64_MASKmskw_MEMi32_AVX512 = 4878,
    XED_IFORM_VPMOVZXDQ_ZMMi64_MASKmskw_YMMi32_AVX512 = 4879,
    XED_IFORM_VPMOVZXWD_XMMdq_MEMq = 4880,
    XED_IFORM_VPMOVZXWD_XMMdq_XMMq = 4881,
    XED_IFORM_VPMOVZXWD_XMMi32_MASKmskw_MEMi16_AVX512 = 4882,
    XED_IFORM_VPMOVZXWD_XMMi32_MASKmskw_XMMi16_AVX512 = 4883,
    XED_IFORM_VPMOVZXWD_YMMi32_MASKmskw_MEMi16_AVX512 = 4884,
    XED_IFORM_VPMOVZXWD_YMMi32_MASKmskw_XMMi16_AVX512 = 4885,
    XED_IFORM_VPMOVZXWD_YMMqq_MEMdq = 4886,
    XED_IFORM_VPMOVZXWD_YMMqq_XMMdq = 4887,
    XED_IFORM_VPMOVZXWD_ZMMi32_MASKmskw_MEMi16_AVX512 = 4888,
    XED_IFORM_VPMOVZXWD_ZMMi32_MASKmskw_YMMi16_AVX512 = 4889,
    XED_IFORM_VPMOVZXWQ_XMMdq_MEMd = 4890,
    XED_IFORM_VPMOVZXWQ_XMMdq_XMMd = 4891,
    XED_IFORM_VPMOVZXWQ_XMMi64_MASKmskw_MEMi16_AVX512 = 4892,
    XED_IFORM_VPMOVZXWQ_XMMi64_MASKmskw_XMMi16_AVX512 = 4893,
    XED_IFORM_VPMOVZXWQ_YMMi64_MASKmskw_MEMi16_AVX512 = 4894,
    XED_IFORM_VPMOVZXWQ_YMMi64_MASKmskw_XMMi16_AVX512 = 4895,
    XED_IFORM_VPMOVZXWQ_YMMqq_MEMq = 4896,
    XED_IFORM_VPMOVZXWQ_YMMqq_XMMq = 4897,
    XED_IFORM_VPMOVZXWQ_ZMMi64_MASKmskw_MEMi16_AVX512 = 4898,
    XED_IFORM_VPMOVZXWQ_ZMMi64_MASKmskw_XMMi16_AVX512 = 4899,
    XED_IFORM_VPMULDQ_XMMdq_XMMdq_MEMdq = 4900,
    XED_IFORM_VPMULDQ_XMMdq_XMMdq_XMMdq = 4901,
    XED_IFORM_VPMULDQ_XMMi64_MASKmskw_XMMi32_MEMi32_AVX512 = 4902,
    XED_IFORM_VPMULDQ_XMMi64_MASKmskw_XMMi32_XMMi32_AVX512 = 4903,
    XED_IFORM_VPMULDQ_YMMi64_MASKmskw_YMMi32_MEMi32_AVX512 = 4904,
    XED_IFORM_VPMULDQ_YMMi64_MASKmskw_YMMi32_YMMi32_AVX512 = 4905,
    XED_IFORM_VPMULDQ_YMMqq_YMMqq_MEMqq = 4906,
    XED_IFORM_VPMULDQ_YMMqq_YMMqq_YMMqq = 4907,
    XED_IFORM_VPMULDQ_ZMMi64_MASKmskw_ZMMi32_MEMi32_AVX512 = 4908,
    XED_IFORM_VPMULDQ_ZMMi64_MASKmskw_ZMMi32_ZMMi32_AVX512 = 4909,
    XED_IFORM_VPMULHRSW_XMMdq_XMMdq_MEMdq = 4910,
    XED_IFORM_VPMULHRSW_XMMdq_XMMdq_XMMdq = 4911,
    XED_IFORM_VPMULHRSW_XMMi16_MASKmskw_XMMi16_MEMi16_AVX512 = 4912,
    XED_IFORM_VPMULHRSW_XMMi16_MASKmskw_XMMi16_XMMi16_AVX512 = 4913,
    XED_IFORM_VPMULHRSW_YMMi16_MASKmskw_YMMi16_MEMi16_AVX512 = 4914,
    XED_IFORM_VPMULHRSW_YMMi16_MASKmskw_YMMi16_YMMi16_AVX512 = 4915,
    XED_IFORM_VPMULHRSW_YMMqq_YMMqq_MEMqq = 4916,
    XED_IFORM_VPMULHRSW_YMMqq_YMMqq_YMMqq = 4917,
    XED_IFORM_VPMULHRSW_ZMMi16_MASKmskw_ZMMi16_MEMi16_AVX512 = 4918,
    XED_IFORM_VPMULHRSW_ZMMi16_MASKmskw_ZMMi16_ZMMi16_AVX512 = 4919,
    XED_IFORM_VPMULHUW_XMMdq_XMMdq_MEMdq = 4920,
    XED_IFORM_VPMULHUW_XMMdq_XMMdq_XMMdq = 4921,
    XED_IFORM_VPMULHUW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 4922,
    XED_IFORM_VPMULHUW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 4923,
    XED_IFORM_VPMULHUW_YMMqq_YMMqq_MEMqq = 4924,
    XED_IFORM_VPMULHUW_YMMqq_YMMqq_YMMqq = 4925,
    XED_IFORM_VPMULHUW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 4926,
    XED_IFORM_VPMULHUW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 4927,
    XED_IFORM_VPMULHUW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 4928,
    XED_IFORM_VPMULHUW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 4929,
    XED_IFORM_VPMULHW_XMMdq_XMMdq_MEMdq = 4930,
    XED_IFORM_VPMULHW_XMMdq_XMMdq_XMMdq = 4931,
    XED_IFORM_VPMULHW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 4932,
    XED_IFORM_VPMULHW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 4933,
    XED_IFORM_VPMULHW_YMMqq_YMMqq_MEMqq = 4934,
    XED_IFORM_VPMULHW_YMMqq_YMMqq_YMMqq = 4935,
    XED_IFORM_VPMULHW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 4936,
    XED_IFORM_VPMULHW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 4937,
    XED_IFORM_VPMULHW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 4938,
    XED_IFORM_VPMULHW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 4939,
    XED_IFORM_VPMULLD_XMMdq_XMMdq_MEMdq = 4940,
    XED_IFORM_VPMULLD_XMMdq_XMMdq_XMMdq = 4941,
    XED_IFORM_VPMULLD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 4942,
    XED_IFORM_VPMULLD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 4943,
    XED_IFORM_VPMULLD_YMMqq_YMMqq_MEMqq = 4944,
    XED_IFORM_VPMULLD_YMMqq_YMMqq_YMMqq = 4945,
    XED_IFORM_VPMULLD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 4946,
    XED_IFORM_VPMULLD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 4947,
    XED_IFORM_VPMULLD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 4948,
    XED_IFORM_VPMULLD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 4949,
    XED_IFORM_VPMULLQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 4950,
    XED_IFORM_VPMULLQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 4951,
    XED_IFORM_VPMULLQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 4952,
    XED_IFORM_VPMULLQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 4953,
    XED_IFORM_VPMULLQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 4954,
    XED_IFORM_VPMULLQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 4955,
    XED_IFORM_VPMULLW_XMMdq_XMMdq_MEMdq = 4956,
    XED_IFORM_VPMULLW_XMMdq_XMMdq_XMMdq = 4957,
    XED_IFORM_VPMULLW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 4958,
    XED_IFORM_VPMULLW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 4959,
    XED_IFORM_VPMULLW_YMMqq_YMMqq_MEMqq = 4960,
    XED_IFORM_VPMULLW_YMMqq_YMMqq_YMMqq = 4961,
    XED_IFORM_VPMULLW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 4962,
    XED_IFORM_VPMULLW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 4963,
    XED_IFORM_VPMULLW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 4964,
    XED_IFORM_VPMULLW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 4965,
    XED_IFORM_VPMULTISHIFTQB_XMMu8_MASKmskw_XMMu8_MEMu64_AVX512 = 4966,
    XED_IFORM_VPMULTISHIFTQB_XMMu8_MASKmskw_XMMu8_XMMu64_AVX512 = 4967,
    XED_IFORM_VPMULTISHIFTQB_YMMu8_MASKmskw_YMMu8_MEMu64_AVX512 = 4968,
    XED_IFORM_VPMULTISHIFTQB_YMMu8_MASKmskw_YMMu8_YMMu64_AVX512 = 4969,
    XED_IFORM_VPMULTISHIFTQB_ZMMu8_MASKmskw_ZMMu8_MEMu64_AVX512 = 4970,
    XED_IFORM_VPMULTISHIFTQB_ZMMu8_MASKmskw_ZMMu8_ZMMu64_AVX512 = 4971,
    XED_IFORM_VPMULUDQ_XMMdq_XMMdq_MEMdq = 4972,
    XED_IFORM_VPMULUDQ_XMMdq_XMMdq_XMMdq = 4973,
    XED_IFORM_VPMULUDQ_XMMu64_MASKmskw_XMMu32_MEMu32_AVX512 = 4974,
    XED_IFORM_VPMULUDQ_XMMu64_MASKmskw_XMMu32_XMMu32_AVX512 = 4975,
    XED_IFORM_VPMULUDQ_YMMqq_YMMqq_MEMqq = 4976,
    XED_IFORM_VPMULUDQ_YMMqq_YMMqq_YMMqq = 4977,
    XED_IFORM_VPMULUDQ_YMMu64_MASKmskw_YMMu32_MEMu32_AVX512 = 4978,
    XED_IFORM_VPMULUDQ_YMMu64_MASKmskw_YMMu32_YMMu32_AVX512 = 4979,
    XED_IFORM_VPMULUDQ_ZMMu64_MASKmskw_ZMMu32_MEMu32_AVX512 = 4980,
    XED_IFORM_VPMULUDQ_ZMMu64_MASKmskw_ZMMu32_ZMMu32_AVX512 = 4981,
    XED_IFORM_VPOPCNTD_ZMMu32_MASKmskw_MEMu32_AVX512 = 4982,
    XED_IFORM_VPOPCNTD_ZMMu32_MASKmskw_ZMMu32_AVX512 = 4983,
    XED_IFORM_VPOPCNTQ_ZMMu64_MASKmskw_MEMu64_AVX512 = 4984,
    XED_IFORM_VPOPCNTQ_ZMMu64_MASKmskw_ZMMu64_AVX512 = 4985,
    XED_IFORM_VPOR_XMMdq_XMMdq_MEMdq = 4986,
    XED_IFORM_VPOR_XMMdq_XMMdq_XMMdq = 4987,
    XED_IFORM_VPOR_YMMqq_YMMqq_MEMqq = 4988,
    XED_IFORM_VPOR_YMMqq_YMMqq_YMMqq = 4989,
    XED_IFORM_VPORD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 4990,
    XED_IFORM_VPORD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 4991,
    XED_IFORM_VPORD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 4992,
    XED_IFORM_VPORD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 4993,
    XED_IFORM_VPORD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 4994,
    XED_IFORM_VPORD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 4995,
    XED_IFORM_VPORQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 4996,
    XED_IFORM_VPORQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 4997,
    XED_IFORM_VPORQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 4998,
    XED_IFORM_VPORQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 4999,
    XED_IFORM_VPORQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5000,
    XED_IFORM_VPORQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5001,
    XED_IFORM_VPPERM_XMMdq_XMMdq_MEMdq_XMMdq = 5002,
    XED_IFORM_VPPERM_XMMdq_XMMdq_XMMdq_MEMdq = 5003,
    XED_IFORM_VPPERM_XMMdq_XMMdq_XMMdq_XMMdq = 5004,
    XED_IFORM_VPROLD_XMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5005,
    XED_IFORM_VPROLD_XMMu32_MASKmskw_XMMu32_IMM8_AVX512 = 5006,
    XED_IFORM_VPROLD_YMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5007,
    XED_IFORM_VPROLD_YMMu32_MASKmskw_YMMu32_IMM8_AVX512 = 5008,
    XED_IFORM_VPROLD_ZMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5009,
    XED_IFORM_VPROLD_ZMMu32_MASKmskw_ZMMu32_IMM8_AVX512 = 5010,
    XED_IFORM_VPROLQ_XMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5011,
    XED_IFORM_VPROLQ_XMMu64_MASKmskw_XMMu64_IMM8_AVX512 = 5012,
    XED_IFORM_VPROLQ_YMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5013,
    XED_IFORM_VPROLQ_YMMu64_MASKmskw_YMMu64_IMM8_AVX512 = 5014,
    XED_IFORM_VPROLQ_ZMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5015,
    XED_IFORM_VPROLQ_ZMMu64_MASKmskw_ZMMu64_IMM8_AVX512 = 5016,
    XED_IFORM_VPROLVD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5017,
    XED_IFORM_VPROLVD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5018,
    XED_IFORM_VPROLVD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5019,
    XED_IFORM_VPROLVD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 5020,
    XED_IFORM_VPROLVD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5021,
    XED_IFORM_VPROLVD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 5022,
    XED_IFORM_VPROLVQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5023,
    XED_IFORM_VPROLVQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5024,
    XED_IFORM_VPROLVQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5025,
    XED_IFORM_VPROLVQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 5026,
    XED_IFORM_VPROLVQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5027,
    XED_IFORM_VPROLVQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5028,
    XED_IFORM_VPRORD_XMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5029,
    XED_IFORM_VPRORD_XMMu32_MASKmskw_XMMu32_IMM8_AVX512 = 5030,
    XED_IFORM_VPRORD_YMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5031,
    XED_IFORM_VPRORD_YMMu32_MASKmskw_YMMu32_IMM8_AVX512 = 5032,
    XED_IFORM_VPRORD_ZMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5033,
    XED_IFORM_VPRORD_ZMMu32_MASKmskw_ZMMu32_IMM8_AVX512 = 5034,
    XED_IFORM_VPRORQ_XMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5035,
    XED_IFORM_VPRORQ_XMMu64_MASKmskw_XMMu64_IMM8_AVX512 = 5036,
    XED_IFORM_VPRORQ_YMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5037,
    XED_IFORM_VPRORQ_YMMu64_MASKmskw_YMMu64_IMM8_AVX512 = 5038,
    XED_IFORM_VPRORQ_ZMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5039,
    XED_IFORM_VPRORQ_ZMMu64_MASKmskw_ZMMu64_IMM8_AVX512 = 5040,
    XED_IFORM_VPRORVD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5041,
    XED_IFORM_VPRORVD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5042,
    XED_IFORM_VPRORVD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5043,
    XED_IFORM_VPRORVD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 5044,
    XED_IFORM_VPRORVD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5045,
    XED_IFORM_VPRORVD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 5046,
    XED_IFORM_VPRORVQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5047,
    XED_IFORM_VPRORVQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5048,
    XED_IFORM_VPRORVQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5049,
    XED_IFORM_VPRORVQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 5050,
    XED_IFORM_VPRORVQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5051,
    XED_IFORM_VPRORVQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5052,
    XED_IFORM_VPROTB_XMMdq_MEMdq_IMMb = 5053,
    XED_IFORM_VPROTB_XMMdq_MEMdq_XMMdq = 5054,
    XED_IFORM_VPROTB_XMMdq_XMMdq_IMMb = 5055,
    XED_IFORM_VPROTB_XMMdq_XMMdq_MEMdq = 5056,
    XED_IFORM_VPROTB_XMMdq_XMMdq_XMMdq = 5057,
    XED_IFORM_VPROTD_XMMdq_MEMdq_IMMb = 5058,
    XED_IFORM_VPROTD_XMMdq_MEMdq_XMMdq = 5059,
    XED_IFORM_VPROTD_XMMdq_XMMdq_IMMb = 5060,
    XED_IFORM_VPROTD_XMMdq_XMMdq_MEMdq = 5061,
    XED_IFORM_VPROTD_XMMdq_XMMdq_XMMdq = 5062,
    XED_IFORM_VPROTQ_XMMdq_MEMdq_IMMb = 5063,
    XED_IFORM_VPROTQ_XMMdq_MEMdq_XMMdq = 5064,
    XED_IFORM_VPROTQ_XMMdq_XMMdq_IMMb = 5065,
    XED_IFORM_VPROTQ_XMMdq_XMMdq_MEMdq = 5066,
    XED_IFORM_VPROTQ_XMMdq_XMMdq_XMMdq = 5067,
    XED_IFORM_VPROTW_XMMdq_MEMdq_IMMb = 5068,
    XED_IFORM_VPROTW_XMMdq_MEMdq_XMMdq = 5069,
    XED_IFORM_VPROTW_XMMdq_XMMdq_IMMb = 5070,
    XED_IFORM_VPROTW_XMMdq_XMMdq_MEMdq = 5071,
    XED_IFORM_VPROTW_XMMdq_XMMdq_XMMdq = 5072,
    XED_IFORM_VPSADBW_XMMdq_XMMdq_MEMdq = 5073,
    XED_IFORM_VPSADBW_XMMdq_XMMdq_XMMdq = 5074,
    XED_IFORM_VPSADBW_XMMu16_XMMu8_MEMu8_AVX512 = 5075,
    XED_IFORM_VPSADBW_XMMu16_XMMu8_XMMu8_AVX512 = 5076,
    XED_IFORM_VPSADBW_YMMqq_YMMqq_MEMqq = 5077,
    XED_IFORM_VPSADBW_YMMqq_YMMqq_YMMqq = 5078,
    XED_IFORM_VPSADBW_YMMu16_YMMu8_MEMu8_AVX512 = 5079,
    XED_IFORM_VPSADBW_YMMu16_YMMu8_YMMu8_AVX512 = 5080,
    XED_IFORM_VPSADBW_ZMMu16_ZMMu8_MEMu8_AVX512 = 5081,
    XED_IFORM_VPSADBW_ZMMu16_ZMMu8_ZMMu8_AVX512 = 5082,
    XED_IFORM_VPSCATTERDD_MEMu32_MASKmskw_XMMu32_AVX512_VL128 = 5083,
    XED_IFORM_VPSCATTERDD_MEMu32_MASKmskw_YMMu32_AVX512_VL256 = 5084,
    XED_IFORM_VPSCATTERDD_MEMu32_MASKmskw_ZMMu32_AVX512_VL512 = 5085,
    XED_IFORM_VPSCATTERDQ_MEMu64_MASKmskw_XMMu64_AVX512_VL128 = 5086,
    XED_IFORM_VPSCATTERDQ_MEMu64_MASKmskw_YMMu64_AVX512_VL256 = 5087,
    XED_IFORM_VPSCATTERDQ_MEMu64_MASKmskw_ZMMu64_AVX512_VL512 = 5088,
    XED_IFORM_VPSCATTERQD_MEMu32_MASKmskw_XMMu32_AVX512_VL128 = 5089,
    XED_IFORM_VPSCATTERQD_MEMu32_MASKmskw_XMMu32_AVX512_VL256 = 5090,
    XED_IFORM_VPSCATTERQD_MEMu32_MASKmskw_YMMu32_AVX512_VL512 = 5091,
    XED_IFORM_VPSCATTERQQ_MEMu64_MASKmskw_XMMu64_AVX512_VL128 = 5092,
    XED_IFORM_VPSCATTERQQ_MEMu64_MASKmskw_YMMu64_AVX512_VL256 = 5093,
    XED_IFORM_VPSCATTERQQ_MEMu64_MASKmskw_ZMMu64_AVX512_VL512 = 5094,
    XED_IFORM_VPSHAB_XMMdq_MEMdq_XMMdq = 5095,
    XED_IFORM_VPSHAB_XMMdq_XMMdq_MEMdq = 5096,
    XED_IFORM_VPSHAB_XMMdq_XMMdq_XMMdq = 5097,
    XED_IFORM_VPSHAD_XMMdq_MEMdq_XMMdq = 5098,
    XED_IFORM_VPSHAD_XMMdq_XMMdq_MEMdq = 5099,
    XED_IFORM_VPSHAD_XMMdq_XMMdq_XMMdq = 5100,
    XED_IFORM_VPSHAQ_XMMdq_MEMdq_XMMdq = 5101,
    XED_IFORM_VPSHAQ_XMMdq_XMMdq_MEMdq = 5102,
    XED_IFORM_VPSHAQ_XMMdq_XMMdq_XMMdq = 5103,
    XED_IFORM_VPSHAW_XMMdq_MEMdq_XMMdq = 5104,
    XED_IFORM_VPSHAW_XMMdq_XMMdq_MEMdq = 5105,
    XED_IFORM_VPSHAW_XMMdq_XMMdq_XMMdq = 5106,
    XED_IFORM_VPSHLB_XMMdq_MEMdq_XMMdq = 5107,
    XED_IFORM_VPSHLB_XMMdq_XMMdq_MEMdq = 5108,
    XED_IFORM_VPSHLB_XMMdq_XMMdq_XMMdq = 5109,
    XED_IFORM_VPSHLD_XMMdq_MEMdq_XMMdq = 5110,
    XED_IFORM_VPSHLD_XMMdq_XMMdq_MEMdq = 5111,
    XED_IFORM_VPSHLD_XMMdq_XMMdq_XMMdq = 5112,
    XED_IFORM_VPSHLQ_XMMdq_MEMdq_XMMdq = 5113,
    XED_IFORM_VPSHLQ_XMMdq_XMMdq_MEMdq = 5114,
    XED_IFORM_VPSHLQ_XMMdq_XMMdq_XMMdq = 5115,
    XED_IFORM_VPSHLW_XMMdq_MEMdq_XMMdq = 5116,
    XED_IFORM_VPSHLW_XMMdq_XMMdq_MEMdq = 5117,
    XED_IFORM_VPSHLW_XMMdq_XMMdq_XMMdq = 5118,
    XED_IFORM_VPSHUFB_XMMdq_XMMdq_MEMdq = 5119,
    XED_IFORM_VPSHUFB_XMMdq_XMMdq_XMMdq = 5120,
    XED_IFORM_VPSHUFB_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 5121,
    XED_IFORM_VPSHUFB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 5122,
    XED_IFORM_VPSHUFB_YMMqq_YMMqq_MEMqq = 5123,
    XED_IFORM_VPSHUFB_YMMqq_YMMqq_YMMqq = 5124,
    XED_IFORM_VPSHUFB_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 5125,
    XED_IFORM_VPSHUFB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 5126,
    XED_IFORM_VPSHUFB_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 5127,
    XED_IFORM_VPSHUFB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 5128,
    XED_IFORM_VPSHUFD_XMMdq_MEMdq_IMMb = 5129,
    XED_IFORM_VPSHUFD_XMMdq_XMMdq_IMMb = 5130,
    XED_IFORM_VPSHUFD_XMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5131,
    XED_IFORM_VPSHUFD_XMMu32_MASKmskw_XMMu32_IMM8_AVX512 = 5132,
    XED_IFORM_VPSHUFD_YMMqq_MEMqq_IMMb = 5133,
    XED_IFORM_VPSHUFD_YMMqq_YMMqq_IMMb = 5134,
    XED_IFORM_VPSHUFD_YMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5135,
    XED_IFORM_VPSHUFD_YMMu32_MASKmskw_YMMu32_IMM8_AVX512 = 5136,
    XED_IFORM_VPSHUFD_ZMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5137,
    XED_IFORM_VPSHUFD_ZMMu32_MASKmskw_ZMMu32_IMM8_AVX512 = 5138,
    XED_IFORM_VPSHUFHW_XMMdq_MEMdq_IMMb = 5139,
    XED_IFORM_VPSHUFHW_XMMdq_XMMdq_IMMb = 5140,
    XED_IFORM_VPSHUFHW_XMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5141,
    XED_IFORM_VPSHUFHW_XMMu16_MASKmskw_XMMu16_IMM8_AVX512 = 5142,
    XED_IFORM_VPSHUFHW_YMMqq_MEMqq_IMMb = 5143,
    XED_IFORM_VPSHUFHW_YMMqq_YMMqq_IMMb = 5144,
    XED_IFORM_VPSHUFHW_YMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5145,
    XED_IFORM_VPSHUFHW_YMMu16_MASKmskw_YMMu16_IMM8_AVX512 = 5146,
    XED_IFORM_VPSHUFHW_ZMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5147,
    XED_IFORM_VPSHUFHW_ZMMu16_MASKmskw_ZMMu16_IMM8_AVX512 = 5148,
    XED_IFORM_VPSHUFLW_XMMdq_MEMdq_IMMb = 5149,
    XED_IFORM_VPSHUFLW_XMMdq_XMMdq_IMMb = 5150,
    XED_IFORM_VPSHUFLW_XMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5151,
    XED_IFORM_VPSHUFLW_XMMu16_MASKmskw_XMMu16_IMM8_AVX512 = 5152,
    XED_IFORM_VPSHUFLW_YMMqq_MEMqq_IMMb = 5153,
    XED_IFORM_VPSHUFLW_YMMqq_YMMqq_IMMb = 5154,
    XED_IFORM_VPSHUFLW_YMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5155,
    XED_IFORM_VPSHUFLW_YMMu16_MASKmskw_YMMu16_IMM8_AVX512 = 5156,
    XED_IFORM_VPSHUFLW_ZMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5157,
    XED_IFORM_VPSHUFLW_ZMMu16_MASKmskw_ZMMu16_IMM8_AVX512 = 5158,
    XED_IFORM_VPSIGNB_XMMdq_XMMdq_MEMdq = 5159,
    XED_IFORM_VPSIGNB_XMMdq_XMMdq_XMMdq = 5160,
    XED_IFORM_VPSIGNB_YMMqq_YMMqq_MEMqq = 5161,
    XED_IFORM_VPSIGNB_YMMqq_YMMqq_YMMqq = 5162,
    XED_IFORM_VPSIGND_XMMdq_XMMdq_MEMdq = 5163,
    XED_IFORM_VPSIGND_XMMdq_XMMdq_XMMdq = 5164,
    XED_IFORM_VPSIGND_YMMqq_YMMqq_MEMqq = 5165,
    XED_IFORM_VPSIGND_YMMqq_YMMqq_YMMqq = 5166,
    XED_IFORM_VPSIGNW_XMMdq_XMMdq_MEMdq = 5167,
    XED_IFORM_VPSIGNW_XMMdq_XMMdq_XMMdq = 5168,
    XED_IFORM_VPSIGNW_YMMqq_YMMqq_MEMqq = 5169,
    XED_IFORM_VPSIGNW_YMMqq_YMMqq_YMMqq = 5170,
    XED_IFORM_VPSLLD_XMMdq_XMMdq_IMMb = 5171,
    XED_IFORM_VPSLLD_XMMdq_XMMdq_MEMdq = 5172,
    XED_IFORM_VPSLLD_XMMdq_XMMdq_XMMdq = 5173,
    XED_IFORM_VPSLLD_XMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5174,
    XED_IFORM_VPSLLD_XMMu32_MASKmskw_XMMu32_IMM8_AVX512 = 5175,
    XED_IFORM_VPSLLD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5176,
    XED_IFORM_VPSLLD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5177,
    XED_IFORM_VPSLLD_YMMqq_YMMqq_IMMb = 5178,
    XED_IFORM_VPSLLD_YMMqq_YMMqq_MEMdq = 5179,
    XED_IFORM_VPSLLD_YMMqq_YMMqq_XMMq = 5180,
    XED_IFORM_VPSLLD_YMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5181,
    XED_IFORM_VPSLLD_YMMu32_MASKmskw_YMMu32_IMM8_AVX512 = 5182,
    XED_IFORM_VPSLLD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5183,
    XED_IFORM_VPSLLD_YMMu32_MASKmskw_YMMu32_XMMu32_AVX512 = 5184,
    XED_IFORM_VPSLLD_ZMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5185,
    XED_IFORM_VPSLLD_ZMMu32_MASKmskw_ZMMu32_IMM8_AVX512 = 5186,
    XED_IFORM_VPSLLD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5187,
    XED_IFORM_VPSLLD_ZMMu32_MASKmskw_ZMMu32_XMMu32_AVX512 = 5188,
    XED_IFORM_VPSLLDQ_XMMdq_XMMdq_IMMb = 5189,
    XED_IFORM_VPSLLDQ_XMMu8_MEMu8_IMM8_AVX512 = 5190,
    XED_IFORM_VPSLLDQ_XMMu8_XMMu8_IMM8_AVX512 = 5191,
    XED_IFORM_VPSLLDQ_YMMqq_YMMqq_IMMb = 5192,
    XED_IFORM_VPSLLDQ_YMMu8_MEMu8_IMM8_AVX512 = 5193,
    XED_IFORM_VPSLLDQ_YMMu8_YMMu8_IMM8_AVX512 = 5194,
    XED_IFORM_VPSLLDQ_ZMMu8_MEMu8_IMM8_AVX512 = 5195,
    XED_IFORM_VPSLLDQ_ZMMu8_ZMMu8_IMM8_AVX512 = 5196,
    XED_IFORM_VPSLLQ_XMMdq_XMMdq_IMMb = 5197,
    XED_IFORM_VPSLLQ_XMMdq_XMMdq_MEMdq = 5198,
    XED_IFORM_VPSLLQ_XMMdq_XMMdq_XMMdq = 5199,
    XED_IFORM_VPSLLQ_XMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5200,
    XED_IFORM_VPSLLQ_XMMu64_MASKmskw_XMMu64_IMM8_AVX512 = 5201,
    XED_IFORM_VPSLLQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5202,
    XED_IFORM_VPSLLQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5203,
    XED_IFORM_VPSLLQ_YMMqq_YMMqq_IMMb = 5204,
    XED_IFORM_VPSLLQ_YMMqq_YMMqq_MEMdq = 5205,
    XED_IFORM_VPSLLQ_YMMqq_YMMqq_XMMq = 5206,
    XED_IFORM_VPSLLQ_YMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5207,
    XED_IFORM_VPSLLQ_YMMu64_MASKmskw_YMMu64_IMM8_AVX512 = 5208,
    XED_IFORM_VPSLLQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5209,
    XED_IFORM_VPSLLQ_YMMu64_MASKmskw_YMMu64_XMMu64_AVX512 = 5210,
    XED_IFORM_VPSLLQ_ZMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5211,
    XED_IFORM_VPSLLQ_ZMMu64_MASKmskw_ZMMu64_IMM8_AVX512 = 5212,
    XED_IFORM_VPSLLQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5213,
    XED_IFORM_VPSLLQ_ZMMu64_MASKmskw_ZMMu64_XMMu64_AVX512 = 5214,
    XED_IFORM_VPSLLVD_XMMdq_XMMdq_MEMdq = 5215,
    XED_IFORM_VPSLLVD_XMMdq_XMMdq_XMMdq = 5216,
    XED_IFORM_VPSLLVD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5217,
    XED_IFORM_VPSLLVD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5218,
    XED_IFORM_VPSLLVD_YMMqq_YMMqq_MEMqq = 5219,
    XED_IFORM_VPSLLVD_YMMqq_YMMqq_YMMqq = 5220,
    XED_IFORM_VPSLLVD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5221,
    XED_IFORM_VPSLLVD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 5222,
    XED_IFORM_VPSLLVD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5223,
    XED_IFORM_VPSLLVD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 5224,
    XED_IFORM_VPSLLVQ_XMMdq_XMMdq_MEMdq = 5225,
    XED_IFORM_VPSLLVQ_XMMdq_XMMdq_XMMdq = 5226,
    XED_IFORM_VPSLLVQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5227,
    XED_IFORM_VPSLLVQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5228,
    XED_IFORM_VPSLLVQ_YMMqq_YMMqq_MEMqq = 5229,
    XED_IFORM_VPSLLVQ_YMMqq_YMMqq_YMMqq = 5230,
    XED_IFORM_VPSLLVQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5231,
    XED_IFORM_VPSLLVQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 5232,
    XED_IFORM_VPSLLVQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5233,
    XED_IFORM_VPSLLVQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5234,
    XED_IFORM_VPSLLVW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 5235,
    XED_IFORM_VPSLLVW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 5236,
    XED_IFORM_VPSLLVW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 5237,
    XED_IFORM_VPSLLVW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 5238,
    XED_IFORM_VPSLLVW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 5239,
    XED_IFORM_VPSLLVW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 5240,
    XED_IFORM_VPSLLW_XMMdq_XMMdq_IMMb = 5241,
    XED_IFORM_VPSLLW_XMMdq_XMMdq_MEMdq = 5242,
    XED_IFORM_VPSLLW_XMMdq_XMMdq_XMMdq = 5243,
    XED_IFORM_VPSLLW_XMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5244,
    XED_IFORM_VPSLLW_XMMu16_MASKmskw_XMMu16_IMM8_AVX512 = 5245,
    XED_IFORM_VPSLLW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 5246,
    XED_IFORM_VPSLLW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 5247,
    XED_IFORM_VPSLLW_YMMqq_YMMqq_IMMb = 5248,
    XED_IFORM_VPSLLW_YMMqq_YMMqq_MEMdq = 5249,
    XED_IFORM_VPSLLW_YMMqq_YMMqq_XMMq = 5250,
    XED_IFORM_VPSLLW_YMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5251,
    XED_IFORM_VPSLLW_YMMu16_MASKmskw_YMMu16_IMM8_AVX512 = 5252,
    XED_IFORM_VPSLLW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 5253,
    XED_IFORM_VPSLLW_YMMu16_MASKmskw_YMMu16_XMMu16_AVX512 = 5254,
    XED_IFORM_VPSLLW_ZMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5255,
    XED_IFORM_VPSLLW_ZMMu16_MASKmskw_ZMMu16_IMM8_AVX512 = 5256,
    XED_IFORM_VPSLLW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 5257,
    XED_IFORM_VPSLLW_ZMMu16_MASKmskw_ZMMu16_XMMu16_AVX512 = 5258,
    XED_IFORM_VPSRAD_XMMdq_XMMdq_IMMb = 5259,
    XED_IFORM_VPSRAD_XMMdq_XMMdq_MEMdq = 5260,
    XED_IFORM_VPSRAD_XMMdq_XMMdq_XMMdq = 5261,
    XED_IFORM_VPSRAD_XMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5262,
    XED_IFORM_VPSRAD_XMMu32_MASKmskw_XMMu32_IMM8_AVX512 = 5263,
    XED_IFORM_VPSRAD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5264,
    XED_IFORM_VPSRAD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5265,
    XED_IFORM_VPSRAD_YMMqq_YMMqq_IMMb = 5266,
    XED_IFORM_VPSRAD_YMMqq_YMMqq_MEMdq = 5267,
    XED_IFORM_VPSRAD_YMMqq_YMMqq_XMMq = 5268,
    XED_IFORM_VPSRAD_YMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5269,
    XED_IFORM_VPSRAD_YMMu32_MASKmskw_YMMu32_IMM8_AVX512 = 5270,
    XED_IFORM_VPSRAD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5271,
    XED_IFORM_VPSRAD_YMMu32_MASKmskw_YMMu32_XMMu32_AVX512 = 5272,
    XED_IFORM_VPSRAD_ZMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5273,
    XED_IFORM_VPSRAD_ZMMu32_MASKmskw_ZMMu32_IMM8_AVX512 = 5274,
    XED_IFORM_VPSRAD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5275,
    XED_IFORM_VPSRAD_ZMMu32_MASKmskw_ZMMu32_XMMu32_AVX512 = 5276,
    XED_IFORM_VPSRAQ_XMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5277,
    XED_IFORM_VPSRAQ_XMMu64_MASKmskw_XMMu64_IMM8_AVX512 = 5278,
    XED_IFORM_VPSRAQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5279,
    XED_IFORM_VPSRAQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5280,
    XED_IFORM_VPSRAQ_YMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5281,
    XED_IFORM_VPSRAQ_YMMu64_MASKmskw_YMMu64_IMM8_AVX512 = 5282,
    XED_IFORM_VPSRAQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5283,
    XED_IFORM_VPSRAQ_YMMu64_MASKmskw_YMMu64_XMMu64_AVX512 = 5284,
    XED_IFORM_VPSRAQ_ZMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5285,
    XED_IFORM_VPSRAQ_ZMMu64_MASKmskw_ZMMu64_IMM8_AVX512 = 5286,
    XED_IFORM_VPSRAQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5287,
    XED_IFORM_VPSRAQ_ZMMu64_MASKmskw_ZMMu64_XMMu64_AVX512 = 5288,
    XED_IFORM_VPSRAVD_XMMdq_XMMdq_MEMdq = 5289,
    XED_IFORM_VPSRAVD_XMMdq_XMMdq_XMMdq = 5290,
    XED_IFORM_VPSRAVD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5291,
    XED_IFORM_VPSRAVD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5292,
    XED_IFORM_VPSRAVD_YMMqq_YMMqq_MEMqq = 5293,
    XED_IFORM_VPSRAVD_YMMqq_YMMqq_YMMqq = 5294,
    XED_IFORM_VPSRAVD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5295,
    XED_IFORM_VPSRAVD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 5296,
    XED_IFORM_VPSRAVD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5297,
    XED_IFORM_VPSRAVD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 5298,
    XED_IFORM_VPSRAVQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5299,
    XED_IFORM_VPSRAVQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5300,
    XED_IFORM_VPSRAVQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5301,
    XED_IFORM_VPSRAVQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 5302,
    XED_IFORM_VPSRAVQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5303,
    XED_IFORM_VPSRAVQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5304,
    XED_IFORM_VPSRAVW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 5305,
    XED_IFORM_VPSRAVW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 5306,
    XED_IFORM_VPSRAVW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 5307,
    XED_IFORM_VPSRAVW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 5308,
    XED_IFORM_VPSRAVW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 5309,
    XED_IFORM_VPSRAVW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 5310,
    XED_IFORM_VPSRAW_XMMdq_XMMdq_IMMb = 5311,
    XED_IFORM_VPSRAW_XMMdq_XMMdq_MEMdq = 5312,
    XED_IFORM_VPSRAW_XMMdq_XMMdq_XMMdq = 5313,
    XED_IFORM_VPSRAW_XMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5314,
    XED_IFORM_VPSRAW_XMMu16_MASKmskw_XMMu16_IMM8_AVX512 = 5315,
    XED_IFORM_VPSRAW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 5316,
    XED_IFORM_VPSRAW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 5317,
    XED_IFORM_VPSRAW_YMMqq_YMMqq_IMMb = 5318,
    XED_IFORM_VPSRAW_YMMqq_YMMqq_MEMdq = 5319,
    XED_IFORM_VPSRAW_YMMqq_YMMqq_XMMq = 5320,
    XED_IFORM_VPSRAW_YMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5321,
    XED_IFORM_VPSRAW_YMMu16_MASKmskw_YMMu16_IMM8_AVX512 = 5322,
    XED_IFORM_VPSRAW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 5323,
    XED_IFORM_VPSRAW_YMMu16_MASKmskw_YMMu16_XMMu16_AVX512 = 5324,
    XED_IFORM_VPSRAW_ZMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5325,
    XED_IFORM_VPSRAW_ZMMu16_MASKmskw_ZMMu16_IMM8_AVX512 = 5326,
    XED_IFORM_VPSRAW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 5327,
    XED_IFORM_VPSRAW_ZMMu16_MASKmskw_ZMMu16_XMMu16_AVX512 = 5328,
    XED_IFORM_VPSRLD_XMMdq_XMMdq_IMMb = 5329,
    XED_IFORM_VPSRLD_XMMdq_XMMdq_MEMdq = 5330,
    XED_IFORM_VPSRLD_XMMdq_XMMdq_XMMdq = 5331,
    XED_IFORM_VPSRLD_XMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5332,
    XED_IFORM_VPSRLD_XMMu32_MASKmskw_XMMu32_IMM8_AVX512 = 5333,
    XED_IFORM_VPSRLD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5334,
    XED_IFORM_VPSRLD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5335,
    XED_IFORM_VPSRLD_YMMqq_YMMqq_IMMb = 5336,
    XED_IFORM_VPSRLD_YMMqq_YMMqq_MEMdq = 5337,
    XED_IFORM_VPSRLD_YMMqq_YMMqq_XMMq = 5338,
    XED_IFORM_VPSRLD_YMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5339,
    XED_IFORM_VPSRLD_YMMu32_MASKmskw_YMMu32_IMM8_AVX512 = 5340,
    XED_IFORM_VPSRLD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5341,
    XED_IFORM_VPSRLD_YMMu32_MASKmskw_YMMu32_XMMu32_AVX512 = 5342,
    XED_IFORM_VPSRLD_ZMMu32_MASKmskw_MEMu32_IMM8_AVX512 = 5343,
    XED_IFORM_VPSRLD_ZMMu32_MASKmskw_ZMMu32_IMM8_AVX512 = 5344,
    XED_IFORM_VPSRLD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5345,
    XED_IFORM_VPSRLD_ZMMu32_MASKmskw_ZMMu32_XMMu32_AVX512 = 5346,
    XED_IFORM_VPSRLDQ_XMMdq_XMMdq_IMMb = 5347,
    XED_IFORM_VPSRLDQ_XMMu8_MEMu8_IMM8_AVX512 = 5348,
    XED_IFORM_VPSRLDQ_XMMu8_XMMu8_IMM8_AVX512 = 5349,
    XED_IFORM_VPSRLDQ_YMMqq_YMMqq_IMMb = 5350,
    XED_IFORM_VPSRLDQ_YMMu8_MEMu8_IMM8_AVX512 = 5351,
    XED_IFORM_VPSRLDQ_YMMu8_YMMu8_IMM8_AVX512 = 5352,
    XED_IFORM_VPSRLDQ_ZMMu8_MEMu8_IMM8_AVX512 = 5353,
    XED_IFORM_VPSRLDQ_ZMMu8_ZMMu8_IMM8_AVX512 = 5354,
    XED_IFORM_VPSRLQ_XMMdq_XMMdq_IMMb = 5355,
    XED_IFORM_VPSRLQ_XMMdq_XMMdq_MEMdq = 5356,
    XED_IFORM_VPSRLQ_XMMdq_XMMdq_XMMdq = 5357,
    XED_IFORM_VPSRLQ_XMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5358,
    XED_IFORM_VPSRLQ_XMMu64_MASKmskw_XMMu64_IMM8_AVX512 = 5359,
    XED_IFORM_VPSRLQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5360,
    XED_IFORM_VPSRLQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5361,
    XED_IFORM_VPSRLQ_YMMqq_YMMqq_IMMb = 5362,
    XED_IFORM_VPSRLQ_YMMqq_YMMqq_MEMdq = 5363,
    XED_IFORM_VPSRLQ_YMMqq_YMMqq_XMMq = 5364,
    XED_IFORM_VPSRLQ_YMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5365,
    XED_IFORM_VPSRLQ_YMMu64_MASKmskw_YMMu64_IMM8_AVX512 = 5366,
    XED_IFORM_VPSRLQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5367,
    XED_IFORM_VPSRLQ_YMMu64_MASKmskw_YMMu64_XMMu64_AVX512 = 5368,
    XED_IFORM_VPSRLQ_ZMMu64_MASKmskw_MEMu64_IMM8_AVX512 = 5369,
    XED_IFORM_VPSRLQ_ZMMu64_MASKmskw_ZMMu64_IMM8_AVX512 = 5370,
    XED_IFORM_VPSRLQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5371,
    XED_IFORM_VPSRLQ_ZMMu64_MASKmskw_ZMMu64_XMMu64_AVX512 = 5372,
    XED_IFORM_VPSRLVD_XMMdq_XMMdq_MEMdq = 5373,
    XED_IFORM_VPSRLVD_XMMdq_XMMdq_XMMdq = 5374,
    XED_IFORM_VPSRLVD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5375,
    XED_IFORM_VPSRLVD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5376,
    XED_IFORM_VPSRLVD_YMMqq_YMMqq_MEMqq = 5377,
    XED_IFORM_VPSRLVD_YMMqq_YMMqq_YMMqq = 5378,
    XED_IFORM_VPSRLVD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5379,
    XED_IFORM_VPSRLVD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 5380,
    XED_IFORM_VPSRLVD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5381,
    XED_IFORM_VPSRLVD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 5382,
    XED_IFORM_VPSRLVQ_XMMdq_XMMdq_MEMdq = 5383,
    XED_IFORM_VPSRLVQ_XMMdq_XMMdq_XMMdq = 5384,
    XED_IFORM_VPSRLVQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5385,
    XED_IFORM_VPSRLVQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5386,
    XED_IFORM_VPSRLVQ_YMMqq_YMMqq_MEMqq = 5387,
    XED_IFORM_VPSRLVQ_YMMqq_YMMqq_YMMqq = 5388,
    XED_IFORM_VPSRLVQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5389,
    XED_IFORM_VPSRLVQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 5390,
    XED_IFORM_VPSRLVQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5391,
    XED_IFORM_VPSRLVQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5392,
    XED_IFORM_VPSRLVW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 5393,
    XED_IFORM_VPSRLVW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 5394,
    XED_IFORM_VPSRLVW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 5395,
    XED_IFORM_VPSRLVW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 5396,
    XED_IFORM_VPSRLVW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 5397,
    XED_IFORM_VPSRLVW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 5398,
    XED_IFORM_VPSRLW_XMMdq_XMMdq_IMMb = 5399,
    XED_IFORM_VPSRLW_XMMdq_XMMdq_MEMdq = 5400,
    XED_IFORM_VPSRLW_XMMdq_XMMdq_XMMdq = 5401,
    XED_IFORM_VPSRLW_XMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5402,
    XED_IFORM_VPSRLW_XMMu16_MASKmskw_XMMu16_IMM8_AVX512 = 5403,
    XED_IFORM_VPSRLW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 5404,
    XED_IFORM_VPSRLW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 5405,
    XED_IFORM_VPSRLW_YMMqq_YMMqq_IMMb = 5406,
    XED_IFORM_VPSRLW_YMMqq_YMMqq_MEMdq = 5407,
    XED_IFORM_VPSRLW_YMMqq_YMMqq_XMMq = 5408,
    XED_IFORM_VPSRLW_YMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5409,
    XED_IFORM_VPSRLW_YMMu16_MASKmskw_YMMu16_IMM8_AVX512 = 5410,
    XED_IFORM_VPSRLW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 5411,
    XED_IFORM_VPSRLW_YMMu16_MASKmskw_YMMu16_XMMu16_AVX512 = 5412,
    XED_IFORM_VPSRLW_ZMMu16_MASKmskw_MEMu16_IMM8_AVX512 = 5413,
    XED_IFORM_VPSRLW_ZMMu16_MASKmskw_ZMMu16_IMM8_AVX512 = 5414,
    XED_IFORM_VPSRLW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 5415,
    XED_IFORM_VPSRLW_ZMMu16_MASKmskw_ZMMu16_XMMu16_AVX512 = 5416,
    XED_IFORM_VPSUBB_XMMdq_XMMdq_MEMdq = 5417,
    XED_IFORM_VPSUBB_XMMdq_XMMdq_XMMdq = 5418,
    XED_IFORM_VPSUBB_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 5419,
    XED_IFORM_VPSUBB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 5420,
    XED_IFORM_VPSUBB_YMMqq_YMMqq_MEMqq = 5421,
    XED_IFORM_VPSUBB_YMMqq_YMMqq_YMMqq = 5422,
    XED_IFORM_VPSUBB_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 5423,
    XED_IFORM_VPSUBB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 5424,
    XED_IFORM_VPSUBB_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 5425,
    XED_IFORM_VPSUBB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 5426,
    XED_IFORM_VPSUBD_XMMdq_XMMdq_MEMdq = 5427,
    XED_IFORM_VPSUBD_XMMdq_XMMdq_XMMdq = 5428,
    XED_IFORM_VPSUBD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5429,
    XED_IFORM_VPSUBD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5430,
    XED_IFORM_VPSUBD_YMMqq_YMMqq_MEMqq = 5431,
    XED_IFORM_VPSUBD_YMMqq_YMMqq_YMMqq = 5432,
    XED_IFORM_VPSUBD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5433,
    XED_IFORM_VPSUBD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 5434,
    XED_IFORM_VPSUBD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5435,
    XED_IFORM_VPSUBD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 5436,
    XED_IFORM_VPSUBQ_XMMdq_XMMdq_MEMdq = 5437,
    XED_IFORM_VPSUBQ_XMMdq_XMMdq_XMMdq = 5438,
    XED_IFORM_VPSUBQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5439,
    XED_IFORM_VPSUBQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5440,
    XED_IFORM_VPSUBQ_YMMqq_YMMqq_MEMqq = 5441,
    XED_IFORM_VPSUBQ_YMMqq_YMMqq_YMMqq = 5442,
    XED_IFORM_VPSUBQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5443,
    XED_IFORM_VPSUBQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 5444,
    XED_IFORM_VPSUBQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5445,
    XED_IFORM_VPSUBQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5446,
    XED_IFORM_VPSUBSB_XMMdq_XMMdq_MEMdq = 5447,
    XED_IFORM_VPSUBSB_XMMdq_XMMdq_XMMdq = 5448,
    XED_IFORM_VPSUBSB_XMMi8_MASKmskw_XMMi8_MEMi8_AVX512 = 5449,
    XED_IFORM_VPSUBSB_XMMi8_MASKmskw_XMMi8_XMMi8_AVX512 = 5450,
    XED_IFORM_VPSUBSB_YMMi8_MASKmskw_YMMi8_MEMi8_AVX512 = 5451,
    XED_IFORM_VPSUBSB_YMMi8_MASKmskw_YMMi8_YMMi8_AVX512 = 5452,
    XED_IFORM_VPSUBSB_YMMqq_YMMqq_MEMqq = 5453,
    XED_IFORM_VPSUBSB_YMMqq_YMMqq_YMMqq = 5454,
    XED_IFORM_VPSUBSB_ZMMi8_MASKmskw_ZMMi8_MEMi8_AVX512 = 5455,
    XED_IFORM_VPSUBSB_ZMMi8_MASKmskw_ZMMi8_ZMMi8_AVX512 = 5456,
    XED_IFORM_VPSUBSW_XMMdq_XMMdq_MEMdq = 5457,
    XED_IFORM_VPSUBSW_XMMdq_XMMdq_XMMdq = 5458,
    XED_IFORM_VPSUBSW_XMMi16_MASKmskw_XMMi16_MEMi16_AVX512 = 5459,
    XED_IFORM_VPSUBSW_XMMi16_MASKmskw_XMMi16_XMMi16_AVX512 = 5460,
    XED_IFORM_VPSUBSW_YMMi16_MASKmskw_YMMi16_MEMi16_AVX512 = 5461,
    XED_IFORM_VPSUBSW_YMMi16_MASKmskw_YMMi16_YMMi16_AVX512 = 5462,
    XED_IFORM_VPSUBSW_YMMqq_YMMqq_MEMqq = 5463,
    XED_IFORM_VPSUBSW_YMMqq_YMMqq_YMMqq = 5464,
    XED_IFORM_VPSUBSW_ZMMi16_MASKmskw_ZMMi16_MEMi16_AVX512 = 5465,
    XED_IFORM_VPSUBSW_ZMMi16_MASKmskw_ZMMi16_ZMMi16_AVX512 = 5466,
    XED_IFORM_VPSUBUSB_XMMdq_XMMdq_MEMdq = 5467,
    XED_IFORM_VPSUBUSB_XMMdq_XMMdq_XMMdq = 5468,
    XED_IFORM_VPSUBUSB_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 5469,
    XED_IFORM_VPSUBUSB_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 5470,
    XED_IFORM_VPSUBUSB_YMMqq_YMMqq_MEMqq = 5471,
    XED_IFORM_VPSUBUSB_YMMqq_YMMqq_YMMqq = 5472,
    XED_IFORM_VPSUBUSB_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 5473,
    XED_IFORM_VPSUBUSB_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 5474,
    XED_IFORM_VPSUBUSB_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 5475,
    XED_IFORM_VPSUBUSB_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 5476,
    XED_IFORM_VPSUBUSW_XMMdq_XMMdq_MEMdq = 5477,
    XED_IFORM_VPSUBUSW_XMMdq_XMMdq_XMMdq = 5478,
    XED_IFORM_VPSUBUSW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 5479,
    XED_IFORM_VPSUBUSW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 5480,
    XED_IFORM_VPSUBUSW_YMMqq_YMMqq_MEMqq = 5481,
    XED_IFORM_VPSUBUSW_YMMqq_YMMqq_YMMqq = 5482,
    XED_IFORM_VPSUBUSW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 5483,
    XED_IFORM_VPSUBUSW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 5484,
    XED_IFORM_VPSUBUSW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 5485,
    XED_IFORM_VPSUBUSW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 5486,
    XED_IFORM_VPSUBW_XMMdq_XMMdq_MEMdq = 5487,
    XED_IFORM_VPSUBW_XMMdq_XMMdq_XMMdq = 5488,
    XED_IFORM_VPSUBW_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 5489,
    XED_IFORM_VPSUBW_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 5490,
    XED_IFORM_VPSUBW_YMMqq_YMMqq_MEMqq = 5491,
    XED_IFORM_VPSUBW_YMMqq_YMMqq_YMMqq = 5492,
    XED_IFORM_VPSUBW_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 5493,
    XED_IFORM_VPSUBW_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 5494,
    XED_IFORM_VPSUBW_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 5495,
    XED_IFORM_VPSUBW_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 5496,
    XED_IFORM_VPTERNLOGD_XMMu32_MASKmskw_XMMu32_MEMu32_IMM8_AVX512 = 5497,
    XED_IFORM_VPTERNLOGD_XMMu32_MASKmskw_XMMu32_XMMu32_IMM8_AVX512 = 5498,
    XED_IFORM_VPTERNLOGD_YMMu32_MASKmskw_YMMu32_MEMu32_IMM8_AVX512 = 5499,
    XED_IFORM_VPTERNLOGD_YMMu32_MASKmskw_YMMu32_YMMu32_IMM8_AVX512 = 5500,
    XED_IFORM_VPTERNLOGD_ZMMu32_MASKmskw_ZMMu32_MEMu32_IMM8_AVX512 = 5501,
    XED_IFORM_VPTERNLOGD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_IMM8_AVX512 = 5502,
    XED_IFORM_VPTERNLOGQ_XMMu64_MASKmskw_XMMu64_MEMu64_IMM8_AVX512 = 5503,
    XED_IFORM_VPTERNLOGQ_XMMu64_MASKmskw_XMMu64_XMMu64_IMM8_AVX512 = 5504,
    XED_IFORM_VPTERNLOGQ_YMMu64_MASKmskw_YMMu64_MEMu64_IMM8_AVX512 = 5505,
    XED_IFORM_VPTERNLOGQ_YMMu64_MASKmskw_YMMu64_YMMu64_IMM8_AVX512 = 5506,
    XED_IFORM_VPTERNLOGQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_IMM8_AVX512 = 5507,
    XED_IFORM_VPTERNLOGQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_IMM8_AVX512 = 5508,
    XED_IFORM_VPTEST_XMMdq_MEMdq = 5509,
    XED_IFORM_VPTEST_XMMdq_XMMdq = 5510,
    XED_IFORM_VPTEST_YMMqq_MEMqq = 5511,
    XED_IFORM_VPTEST_YMMqq_YMMqq = 5512,
    XED_IFORM_VPTESTMB_MASKmskw_MASKmskw_XMMu8_MEMu8_AVX512 = 5513,
    XED_IFORM_VPTESTMB_MASKmskw_MASKmskw_XMMu8_XMMu8_AVX512 = 5514,
    XED_IFORM_VPTESTMB_MASKmskw_MASKmskw_YMMu8_MEMu8_AVX512 = 5515,
    XED_IFORM_VPTESTMB_MASKmskw_MASKmskw_YMMu8_YMMu8_AVX512 = 5516,
    XED_IFORM_VPTESTMB_MASKmskw_MASKmskw_ZMMu8_MEMu8_AVX512 = 5517,
    XED_IFORM_VPTESTMB_MASKmskw_MASKmskw_ZMMu8_ZMMu8_AVX512 = 5518,
    XED_IFORM_VPTESTMD_MASKmskw_MASKmskw_XMMu32_MEMu32_AVX512 = 5519,
    XED_IFORM_VPTESTMD_MASKmskw_MASKmskw_XMMu32_XMMu32_AVX512 = 5520,
    XED_IFORM_VPTESTMD_MASKmskw_MASKmskw_YMMu32_MEMu32_AVX512 = 5521,
    XED_IFORM_VPTESTMD_MASKmskw_MASKmskw_YMMu32_YMMu32_AVX512 = 5522,
    XED_IFORM_VPTESTMD_MASKmskw_MASKmskw_ZMMu32_MEMu32_AVX512 = 5523,
    XED_IFORM_VPTESTMD_MASKmskw_MASKmskw_ZMMu32_ZMMu32_AVX512 = 5524,
    XED_IFORM_VPTESTMQ_MASKmskw_MASKmskw_XMMu64_MEMu64_AVX512 = 5525,
    XED_IFORM_VPTESTMQ_MASKmskw_MASKmskw_XMMu64_XMMu64_AVX512 = 5526,
    XED_IFORM_VPTESTMQ_MASKmskw_MASKmskw_YMMu64_MEMu64_AVX512 = 5527,
    XED_IFORM_VPTESTMQ_MASKmskw_MASKmskw_YMMu64_YMMu64_AVX512 = 5528,
    XED_IFORM_VPTESTMQ_MASKmskw_MASKmskw_ZMMu64_MEMu64_AVX512 = 5529,
    XED_IFORM_VPTESTMQ_MASKmskw_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5530,
    XED_IFORM_VPTESTMW_MASKmskw_MASKmskw_XMMu16_MEMu16_AVX512 = 5531,
    XED_IFORM_VPTESTMW_MASKmskw_MASKmskw_XMMu16_XMMu16_AVX512 = 5532,
    XED_IFORM_VPTESTMW_MASKmskw_MASKmskw_YMMu16_MEMu16_AVX512 = 5533,
    XED_IFORM_VPTESTMW_MASKmskw_MASKmskw_YMMu16_YMMu16_AVX512 = 5534,
    XED_IFORM_VPTESTMW_MASKmskw_MASKmskw_ZMMu16_MEMu16_AVX512 = 5535,
    XED_IFORM_VPTESTMW_MASKmskw_MASKmskw_ZMMu16_ZMMu16_AVX512 = 5536,
    XED_IFORM_VPTESTNMB_MASKmskw_MASKmskw_XMMu8_MEMu8_AVX512 = 5537,
    XED_IFORM_VPTESTNMB_MASKmskw_MASKmskw_XMMu8_XMMu8_AVX512 = 5538,
    XED_IFORM_VPTESTNMB_MASKmskw_MASKmskw_YMMu8_MEMu8_AVX512 = 5539,
    XED_IFORM_VPTESTNMB_MASKmskw_MASKmskw_YMMu8_YMMu8_AVX512 = 5540,
    XED_IFORM_VPTESTNMB_MASKmskw_MASKmskw_ZMMu8_MEMu8_AVX512 = 5541,
    XED_IFORM_VPTESTNMB_MASKmskw_MASKmskw_ZMMu8_ZMMu8_AVX512 = 5542,
    XED_IFORM_VPTESTNMD_MASKmskw_MASKmskw_XMMu32_MEMu32_AVX512 = 5543,
    XED_IFORM_VPTESTNMD_MASKmskw_MASKmskw_XMMu32_XMMu32_AVX512 = 5544,
    XED_IFORM_VPTESTNMD_MASKmskw_MASKmskw_YMMu32_MEMu32_AVX512 = 5545,
    XED_IFORM_VPTESTNMD_MASKmskw_MASKmskw_YMMu32_YMMu32_AVX512 = 5546,
    XED_IFORM_VPTESTNMD_MASKmskw_MASKmskw_ZMMu32_MEMu32_AVX512 = 5547,
    XED_IFORM_VPTESTNMD_MASKmskw_MASKmskw_ZMMu32_ZMMu32_AVX512 = 5548,
    XED_IFORM_VPTESTNMQ_MASKmskw_MASKmskw_XMMu64_MEMu64_AVX512 = 5549,
    XED_IFORM_VPTESTNMQ_MASKmskw_MASKmskw_XMMu64_XMMu64_AVX512 = 5550,
    XED_IFORM_VPTESTNMQ_MASKmskw_MASKmskw_YMMu64_MEMu64_AVX512 = 5551,
    XED_IFORM_VPTESTNMQ_MASKmskw_MASKmskw_YMMu64_YMMu64_AVX512 = 5552,
    XED_IFORM_VPTESTNMQ_MASKmskw_MASKmskw_ZMMu64_MEMu64_AVX512 = 5553,
    XED_IFORM_VPTESTNMQ_MASKmskw_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5554,
    XED_IFORM_VPTESTNMW_MASKmskw_MASKmskw_XMMu16_MEMu16_AVX512 = 5555,
    XED_IFORM_VPTESTNMW_MASKmskw_MASKmskw_XMMu16_XMMu16_AVX512 = 5556,
    XED_IFORM_VPTESTNMW_MASKmskw_MASKmskw_YMMu16_MEMu16_AVX512 = 5557,
    XED_IFORM_VPTESTNMW_MASKmskw_MASKmskw_YMMu16_YMMu16_AVX512 = 5558,
    XED_IFORM_VPTESTNMW_MASKmskw_MASKmskw_ZMMu16_MEMu16_AVX512 = 5559,
    XED_IFORM_VPTESTNMW_MASKmskw_MASKmskw_ZMMu16_ZMMu16_AVX512 = 5560,
    XED_IFORM_VPUNPCKHBW_XMMdq_XMMdq_MEMdq = 5561,
    XED_IFORM_VPUNPCKHBW_XMMdq_XMMdq_XMMdq = 5562,
    XED_IFORM_VPUNPCKHBW_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 5563,
    XED_IFORM_VPUNPCKHBW_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 5564,
    XED_IFORM_VPUNPCKHBW_YMMqq_YMMqq_MEMqq = 5565,
    XED_IFORM_VPUNPCKHBW_YMMqq_YMMqq_YMMqq = 5566,
    XED_IFORM_VPUNPCKHBW_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 5567,
    XED_IFORM_VPUNPCKHBW_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 5568,
    XED_IFORM_VPUNPCKHBW_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 5569,
    XED_IFORM_VPUNPCKHBW_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 5570,
    XED_IFORM_VPUNPCKHDQ_XMMdq_XMMdq_MEMdq = 5571,
    XED_IFORM_VPUNPCKHDQ_XMMdq_XMMdq_XMMdq = 5572,
    XED_IFORM_VPUNPCKHDQ_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5573,
    XED_IFORM_VPUNPCKHDQ_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5574,
    XED_IFORM_VPUNPCKHDQ_YMMqq_YMMqq_MEMqq = 5575,
    XED_IFORM_VPUNPCKHDQ_YMMqq_YMMqq_YMMqq = 5576,
    XED_IFORM_VPUNPCKHDQ_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5577,
    XED_IFORM_VPUNPCKHDQ_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 5578,
    XED_IFORM_VPUNPCKHDQ_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5579,
    XED_IFORM_VPUNPCKHDQ_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 5580,
    XED_IFORM_VPUNPCKHQDQ_XMMdq_XMMdq_MEMdq = 5581,
    XED_IFORM_VPUNPCKHQDQ_XMMdq_XMMdq_XMMdq = 5582,
    XED_IFORM_VPUNPCKHQDQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5583,
    XED_IFORM_VPUNPCKHQDQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5584,
    XED_IFORM_VPUNPCKHQDQ_YMMqq_YMMqq_MEMqq = 5585,
    XED_IFORM_VPUNPCKHQDQ_YMMqq_YMMqq_YMMqq = 5586,
    XED_IFORM_VPUNPCKHQDQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5587,
    XED_IFORM_VPUNPCKHQDQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 5588,
    XED_IFORM_VPUNPCKHQDQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5589,
    XED_IFORM_VPUNPCKHQDQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5590,
    XED_IFORM_VPUNPCKHWD_XMMdq_XMMdq_MEMdq = 5591,
    XED_IFORM_VPUNPCKHWD_XMMdq_XMMdq_XMMdq = 5592,
    XED_IFORM_VPUNPCKHWD_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 5593,
    XED_IFORM_VPUNPCKHWD_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 5594,
    XED_IFORM_VPUNPCKHWD_YMMqq_YMMqq_MEMqq = 5595,
    XED_IFORM_VPUNPCKHWD_YMMqq_YMMqq_YMMqq = 5596,
    XED_IFORM_VPUNPCKHWD_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 5597,
    XED_IFORM_VPUNPCKHWD_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 5598,
    XED_IFORM_VPUNPCKHWD_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 5599,
    XED_IFORM_VPUNPCKHWD_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 5600,
    XED_IFORM_VPUNPCKLBW_XMMdq_XMMdq_MEMdq = 5601,
    XED_IFORM_VPUNPCKLBW_XMMdq_XMMdq_XMMdq = 5602,
    XED_IFORM_VPUNPCKLBW_XMMu8_MASKmskw_XMMu8_MEMu8_AVX512 = 5603,
    XED_IFORM_VPUNPCKLBW_XMMu8_MASKmskw_XMMu8_XMMu8_AVX512 = 5604,
    XED_IFORM_VPUNPCKLBW_YMMqq_YMMqq_MEMqq = 5605,
    XED_IFORM_VPUNPCKLBW_YMMqq_YMMqq_YMMqq = 5606,
    XED_IFORM_VPUNPCKLBW_YMMu8_MASKmskw_YMMu8_MEMu8_AVX512 = 5607,
    XED_IFORM_VPUNPCKLBW_YMMu8_MASKmskw_YMMu8_YMMu8_AVX512 = 5608,
    XED_IFORM_VPUNPCKLBW_ZMMu8_MASKmskw_ZMMu8_MEMu8_AVX512 = 5609,
    XED_IFORM_VPUNPCKLBW_ZMMu8_MASKmskw_ZMMu8_ZMMu8_AVX512 = 5610,
    XED_IFORM_VPUNPCKLDQ_XMMdq_XMMdq_MEMdq = 5611,
    XED_IFORM_VPUNPCKLDQ_XMMdq_XMMdq_XMMdq = 5612,
    XED_IFORM_VPUNPCKLDQ_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5613,
    XED_IFORM_VPUNPCKLDQ_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5614,
    XED_IFORM_VPUNPCKLDQ_YMMqq_YMMqq_MEMqq = 5615,
    XED_IFORM_VPUNPCKLDQ_YMMqq_YMMqq_YMMqq = 5616,
    XED_IFORM_VPUNPCKLDQ_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5617,
    XED_IFORM_VPUNPCKLDQ_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 5618,
    XED_IFORM_VPUNPCKLDQ_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5619,
    XED_IFORM_VPUNPCKLDQ_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 5620,
    XED_IFORM_VPUNPCKLQDQ_XMMdq_XMMdq_MEMdq = 5621,
    XED_IFORM_VPUNPCKLQDQ_XMMdq_XMMdq_XMMdq = 5622,
    XED_IFORM_VPUNPCKLQDQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5623,
    XED_IFORM_VPUNPCKLQDQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5624,
    XED_IFORM_VPUNPCKLQDQ_YMMqq_YMMqq_MEMqq = 5625,
    XED_IFORM_VPUNPCKLQDQ_YMMqq_YMMqq_YMMqq = 5626,
    XED_IFORM_VPUNPCKLQDQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5627,
    XED_IFORM_VPUNPCKLQDQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 5628,
    XED_IFORM_VPUNPCKLQDQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5629,
    XED_IFORM_VPUNPCKLQDQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5630,
    XED_IFORM_VPUNPCKLWD_XMMdq_XMMdq_MEMdq = 5631,
    XED_IFORM_VPUNPCKLWD_XMMdq_XMMdq_XMMdq = 5632,
    XED_IFORM_VPUNPCKLWD_XMMu16_MASKmskw_XMMu16_MEMu16_AVX512 = 5633,
    XED_IFORM_VPUNPCKLWD_XMMu16_MASKmskw_XMMu16_XMMu16_AVX512 = 5634,
    XED_IFORM_VPUNPCKLWD_YMMqq_YMMqq_MEMqq = 5635,
    XED_IFORM_VPUNPCKLWD_YMMqq_YMMqq_YMMqq = 5636,
    XED_IFORM_VPUNPCKLWD_YMMu16_MASKmskw_YMMu16_MEMu16_AVX512 = 5637,
    XED_IFORM_VPUNPCKLWD_YMMu16_MASKmskw_YMMu16_YMMu16_AVX512 = 5638,
    XED_IFORM_VPUNPCKLWD_ZMMu16_MASKmskw_ZMMu16_MEMu16_AVX512 = 5639,
    XED_IFORM_VPUNPCKLWD_ZMMu16_MASKmskw_ZMMu16_ZMMu16_AVX512 = 5640,
    XED_IFORM_VPXOR_XMMdq_XMMdq_MEMdq = 5641,
    XED_IFORM_VPXOR_XMMdq_XMMdq_XMMdq = 5642,
    XED_IFORM_VPXOR_YMMqq_YMMqq_MEMqq = 5643,
    XED_IFORM_VPXOR_YMMqq_YMMqq_YMMqq = 5644,
    XED_IFORM_VPXORD_XMMu32_MASKmskw_XMMu32_MEMu32_AVX512 = 5645,
    XED_IFORM_VPXORD_XMMu32_MASKmskw_XMMu32_XMMu32_AVX512 = 5646,
    XED_IFORM_VPXORD_YMMu32_MASKmskw_YMMu32_MEMu32_AVX512 = 5647,
    XED_IFORM_VPXORD_YMMu32_MASKmskw_YMMu32_YMMu32_AVX512 = 5648,
    XED_IFORM_VPXORD_ZMMu32_MASKmskw_ZMMu32_MEMu32_AVX512 = 5649,
    XED_IFORM_VPXORD_ZMMu32_MASKmskw_ZMMu32_ZMMu32_AVX512 = 5650,
    XED_IFORM_VPXORQ_XMMu64_MASKmskw_XMMu64_MEMu64_AVX512 = 5651,
    XED_IFORM_VPXORQ_XMMu64_MASKmskw_XMMu64_XMMu64_AVX512 = 5652,
    XED_IFORM_VPXORQ_YMMu64_MASKmskw_YMMu64_MEMu64_AVX512 = 5653,
    XED_IFORM_VPXORQ_YMMu64_MASKmskw_YMMu64_YMMu64_AVX512 = 5654,
    XED_IFORM_VPXORQ_ZMMu64_MASKmskw_ZMMu64_MEMu64_AVX512 = 5655,
    XED_IFORM_VPXORQ_ZMMu64_MASKmskw_ZMMu64_ZMMu64_AVX512 = 5656,
    XED_IFORM_VRANGEPD_XMMf64_MASKmskw_XMMf64_MEMf64_IMM8_AVX512 = 5657,
    XED_IFORM_VRANGEPD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512 = 5658,
    XED_IFORM_VRANGEPD_YMMf64_MASKmskw_YMMf64_MEMf64_IMM8_AVX512 = 5659,
    XED_IFORM_VRANGEPD_YMMf64_MASKmskw_YMMf64_YMMf64_IMM8_AVX512 = 5660,
    XED_IFORM_VRANGEPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_IMM8_AVX512 = 5661,
    XED_IFORM_VRANGEPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512 = 5662,
    XED_IFORM_VRANGEPS_XMMf32_MASKmskw_XMMf32_MEMf32_IMM8_AVX512 = 5663,
    XED_IFORM_VRANGEPS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512 = 5664,
    XED_IFORM_VRANGEPS_YMMf32_MASKmskw_YMMf32_MEMf32_IMM8_AVX512 = 5665,
    XED_IFORM_VRANGEPS_YMMf32_MASKmskw_YMMf32_YMMf32_IMM8_AVX512 = 5666,
    XED_IFORM_VRANGEPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_IMM8_AVX512 = 5667,
    XED_IFORM_VRANGEPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512 = 5668,
    XED_IFORM_VRANGESD_XMMf64_MASKmskw_XMMf64_MEMf64_IMM8_AVX512 = 5669,
    XED_IFORM_VRANGESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512 = 5670,
    XED_IFORM_VRANGESS_XMMf32_MASKmskw_XMMf32_MEMf32_IMM8_AVX512 = 5671,
    XED_IFORM_VRANGESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512 = 5672,
    XED_IFORM_VRCP14PD_XMMf64_MASKmskw_MEMf64_AVX512 = 5673,
    XED_IFORM_VRCP14PD_XMMf64_MASKmskw_XMMf64_AVX512 = 5674,
    XED_IFORM_VRCP14PD_YMMf64_MASKmskw_MEMf64_AVX512 = 5675,
    XED_IFORM_VRCP14PD_YMMf64_MASKmskw_YMMf64_AVX512 = 5676,
    XED_IFORM_VRCP14PD_ZMMf64_MASKmskw_MEMf64_AVX512 = 5677,
    XED_IFORM_VRCP14PD_ZMMf64_MASKmskw_ZMMf64_AVX512 = 5678,
    XED_IFORM_VRCP14PS_XMMf32_MASKmskw_MEMf32_AVX512 = 5679,
    XED_IFORM_VRCP14PS_XMMf32_MASKmskw_XMMf32_AVX512 = 5680,
    XED_IFORM_VRCP14PS_YMMf32_MASKmskw_MEMf32_AVX512 = 5681,
    XED_IFORM_VRCP14PS_YMMf32_MASKmskw_YMMf32_AVX512 = 5682,
    XED_IFORM_VRCP14PS_ZMMf32_MASKmskw_MEMf32_AVX512 = 5683,
    XED_IFORM_VRCP14PS_ZMMf32_MASKmskw_ZMMf32_AVX512 = 5684,
    XED_IFORM_VRCP14SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 5685,
    XED_IFORM_VRCP14SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 5686,
    XED_IFORM_VRCP14SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 5687,
    XED_IFORM_VRCP14SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 5688,
    XED_IFORM_VRCP28PD_ZMMf64_MASKmskw_MEMf64_AVX512ER = 5689,
    XED_IFORM_VRCP28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER = 5690,
    XED_IFORM_VRCP28PS_ZMMf32_MASKmskw_MEMf32_AVX512ER = 5691,
    XED_IFORM_VRCP28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER = 5692,
    XED_IFORM_VRCP28SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512ER = 5693,
    XED_IFORM_VRCP28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER = 5694,
    XED_IFORM_VRCP28SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512ER = 5695,
    XED_IFORM_VRCP28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER = 5696,
    XED_IFORM_VRCPPS_XMMdq_MEMdq = 5697,
    XED_IFORM_VRCPPS_XMMdq_XMMdq = 5698,
    XED_IFORM_VRCPPS_YMMqq_MEMqq = 5699,
    XED_IFORM_VRCPPS_YMMqq_YMMqq = 5700,
    XED_IFORM_VRCPSS_XMMdq_XMMdq_MEMd = 5701,
    XED_IFORM_VRCPSS_XMMdq_XMMdq_XMMd = 5702,
    XED_IFORM_VREDUCEPD_XMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 5703,
    XED_IFORM_VREDUCEPD_XMMf64_MASKmskw_XMMf64_IMM8_AVX512 = 5704,
    XED_IFORM_VREDUCEPD_YMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 5705,
    XED_IFORM_VREDUCEPD_YMMf64_MASKmskw_YMMf64_IMM8_AVX512 = 5706,
    XED_IFORM_VREDUCEPD_ZMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 5707,
    XED_IFORM_VREDUCEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512 = 5708,
    XED_IFORM_VREDUCEPS_XMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 5709,
    XED_IFORM_VREDUCEPS_XMMf32_MASKmskw_XMMf32_IMM8_AVX512 = 5710,
    XED_IFORM_VREDUCEPS_YMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 5711,
    XED_IFORM_VREDUCEPS_YMMf32_MASKmskw_YMMf32_IMM8_AVX512 = 5712,
    XED_IFORM_VREDUCEPS_ZMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 5713,
    XED_IFORM_VREDUCEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512 = 5714,
    XED_IFORM_VREDUCESD_XMMf64_MASKmskw_XMMf64_MEMf64_IMM8_AVX512 = 5715,
    XED_IFORM_VREDUCESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512 = 5716,
    XED_IFORM_VREDUCESS_XMMf32_MASKmskw_XMMf32_MEMf32_IMM8_AVX512 = 5717,
    XED_IFORM_VREDUCESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512 = 5718,
    XED_IFORM_VRNDSCALEPD_XMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 5719,
    XED_IFORM_VRNDSCALEPD_XMMf64_MASKmskw_XMMf64_IMM8_AVX512 = 5720,
    XED_IFORM_VRNDSCALEPD_YMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 5721,
    XED_IFORM_VRNDSCALEPD_YMMf64_MASKmskw_YMMf64_IMM8_AVX512 = 5722,
    XED_IFORM_VRNDSCALEPD_ZMMf64_MASKmskw_MEMf64_IMM8_AVX512 = 5723,
    XED_IFORM_VRNDSCALEPD_ZMMf64_MASKmskw_ZMMf64_IMM8_AVX512 = 5724,
    XED_IFORM_VRNDSCALEPS_XMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 5725,
    XED_IFORM_VRNDSCALEPS_XMMf32_MASKmskw_XMMf32_IMM8_AVX512 = 5726,
    XED_IFORM_VRNDSCALEPS_YMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 5727,
    XED_IFORM_VRNDSCALEPS_YMMf32_MASKmskw_YMMf32_IMM8_AVX512 = 5728,
    XED_IFORM_VRNDSCALEPS_ZMMf32_MASKmskw_MEMf32_IMM8_AVX512 = 5729,
    XED_IFORM_VRNDSCALEPS_ZMMf32_MASKmskw_ZMMf32_IMM8_AVX512 = 5730,
    XED_IFORM_VRNDSCALESD_XMMf64_MASKmskw_XMMf64_MEMf64_IMM8_AVX512 = 5731,
    XED_IFORM_VRNDSCALESD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512 = 5732,
    XED_IFORM_VRNDSCALESS_XMMf32_MASKmskw_XMMf32_MEMf32_IMM8_AVX512 = 5733,
    XED_IFORM_VRNDSCALESS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512 = 5734,
    XED_IFORM_VROUNDPD_XMMdq_MEMdq_IMMb = 5735,
    XED_IFORM_VROUNDPD_XMMdq_XMMdq_IMMb = 5736,
    XED_IFORM_VROUNDPD_YMMqq_MEMqq_IMMb = 5737,
    XED_IFORM_VROUNDPD_YMMqq_YMMqq_IMMb = 5738,
    XED_IFORM_VROUNDPS_XMMdq_MEMdq_IMMb = 5739,
    XED_IFORM_VROUNDPS_XMMdq_XMMdq_IMMb = 5740,
    XED_IFORM_VROUNDPS_YMMqq_MEMqq_IMMb = 5741,
    XED_IFORM_VROUNDPS_YMMqq_YMMqq_IMMb = 5742,
    XED_IFORM_VROUNDSD_XMMdq_XMMdq_MEMq_IMMb = 5743,
    XED_IFORM_VROUNDSD_XMMdq_XMMdq_XMMq_IMMb = 5744,
    XED_IFORM_VROUNDSS_XMMdq_XMMdq_MEMd_IMMb = 5745,
    XED_IFORM_VROUNDSS_XMMdq_XMMdq_XMMd_IMMb = 5746,
    XED_IFORM_VRSQRT14PD_XMMf64_MASKmskw_MEMf64_AVX512 = 5747,
    XED_IFORM_VRSQRT14PD_XMMf64_MASKmskw_XMMf64_AVX512 = 5748,
    XED_IFORM_VRSQRT14PD_YMMf64_MASKmskw_MEMf64_AVX512 = 5749,
    XED_IFORM_VRSQRT14PD_YMMf64_MASKmskw_YMMf64_AVX512 = 5750,
    XED_IFORM_VRSQRT14PD_ZMMf64_MASKmskw_MEMf64_AVX512 = 5751,
    XED_IFORM_VRSQRT14PD_ZMMf64_MASKmskw_ZMMf64_AVX512 = 5752,
    XED_IFORM_VRSQRT14PS_XMMf32_MASKmskw_MEMf32_AVX512 = 5753,
    XED_IFORM_VRSQRT14PS_XMMf32_MASKmskw_XMMf32_AVX512 = 5754,
    XED_IFORM_VRSQRT14PS_YMMf32_MASKmskw_MEMf32_AVX512 = 5755,
    XED_IFORM_VRSQRT14PS_YMMf32_MASKmskw_YMMf32_AVX512 = 5756,
    XED_IFORM_VRSQRT14PS_ZMMf32_MASKmskw_MEMf32_AVX512 = 5757,
    XED_IFORM_VRSQRT14PS_ZMMf32_MASKmskw_ZMMf32_AVX512 = 5758,
    XED_IFORM_VRSQRT14SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 5759,
    XED_IFORM_VRSQRT14SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 5760,
    XED_IFORM_VRSQRT14SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 5761,
    XED_IFORM_VRSQRT14SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 5762,
    XED_IFORM_VRSQRT28PD_ZMMf64_MASKmskw_MEMf64_AVX512ER = 5763,
    XED_IFORM_VRSQRT28PD_ZMMf64_MASKmskw_ZMMf64_AVX512ER = 5764,
    XED_IFORM_VRSQRT28PS_ZMMf32_MASKmskw_MEMf32_AVX512ER = 5765,
    XED_IFORM_VRSQRT28PS_ZMMf32_MASKmskw_ZMMf32_AVX512ER = 5766,
    XED_IFORM_VRSQRT28SD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512ER = 5767,
    XED_IFORM_VRSQRT28SD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512ER = 5768,
    XED_IFORM_VRSQRT28SS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512ER = 5769,
    XED_IFORM_VRSQRT28SS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512ER = 5770,
    XED_IFORM_VRSQRTPS_XMMdq_MEMdq = 5771,
    XED_IFORM_VRSQRTPS_XMMdq_XMMdq = 5772,
    XED_IFORM_VRSQRTPS_YMMqq_MEMqq = 5773,
    XED_IFORM_VRSQRTPS_YMMqq_YMMqq = 5774,
    XED_IFORM_VRSQRTSS_XMMdq_XMMdq_MEMd = 5775,
    XED_IFORM_VRSQRTSS_XMMdq_XMMdq_XMMd = 5776,
    XED_IFORM_VSCALEFPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 5777,
    XED_IFORM_VSCALEFPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 5778,
    XED_IFORM_VSCALEFPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 5779,
    XED_IFORM_VSCALEFPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 5780,
    XED_IFORM_VSCALEFPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 5781,
    XED_IFORM_VSCALEFPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 5782,
    XED_IFORM_VSCALEFPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 5783,
    XED_IFORM_VSCALEFPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 5784,
    XED_IFORM_VSCALEFPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 5785,
    XED_IFORM_VSCALEFPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 5786,
    XED_IFORM_VSCALEFPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 5787,
    XED_IFORM_VSCALEFPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 5788,
    XED_IFORM_VSCALEFSD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 5789,
    XED_IFORM_VSCALEFSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 5790,
    XED_IFORM_VSCALEFSS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 5791,
    XED_IFORM_VSCALEFSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 5792,
    XED_IFORM_VSCATTERDPD_MEMf64_MASKmskw_XMMf64_AVX512_VL128 = 5793,
    XED_IFORM_VSCATTERDPD_MEMf64_MASKmskw_YMMf64_AVX512_VL256 = 5794,
    XED_IFORM_VSCATTERDPD_MEMf64_MASKmskw_ZMMf64_AVX512_VL512 = 5795,
    XED_IFORM_VSCATTERDPS_MEMf32_MASKmskw_XMMf32_AVX512_VL128 = 5796,
    XED_IFORM_VSCATTERDPS_MEMf32_MASKmskw_YMMf32_AVX512_VL256 = 5797,
    XED_IFORM_VSCATTERDPS_MEMf32_MASKmskw_ZMMf32_AVX512_VL512 = 5798,
    XED_IFORM_VSCATTERPF0DPD_MEMf64_MASKmskw_AVX512PF_VL512 = 5799,
    XED_IFORM_VSCATTERPF0DPS_MEMf32_MASKmskw_AVX512PF_VL512 = 5800,
    XED_IFORM_VSCATTERPF0QPD_MEMf64_MASKmskw_AVX512PF_VL512 = 5801,
    XED_IFORM_VSCATTERPF0QPS_MEMf32_MASKmskw_AVX512PF_VL512 = 5802,
    XED_IFORM_VSCATTERPF1DPD_MEMf64_MASKmskw_AVX512PF_VL512 = 5803,
    XED_IFORM_VSCATTERPF1DPS_MEMf32_MASKmskw_AVX512PF_VL512 = 5804,
    XED_IFORM_VSCATTERPF1QPD_MEMf64_MASKmskw_AVX512PF_VL512 = 5805,
    XED_IFORM_VSCATTERPF1QPS_MEMf32_MASKmskw_AVX512PF_VL512 = 5806,
    XED_IFORM_VSCATTERQPD_MEMf64_MASKmskw_XMMf64_AVX512_VL128 = 5807,
    XED_IFORM_VSCATTERQPD_MEMf64_MASKmskw_YMMf64_AVX512_VL256 = 5808,
    XED_IFORM_VSCATTERQPD_MEMf64_MASKmskw_ZMMf64_AVX512_VL512 = 5809,
    XED_IFORM_VSCATTERQPS_MEMf32_MASKmskw_XMMf32_AVX512_VL128 = 5810,
    XED_IFORM_VSCATTERQPS_MEMf32_MASKmskw_XMMf32_AVX512_VL256 = 5811,
    XED_IFORM_VSCATTERQPS_MEMf32_MASKmskw_YMMf32_AVX512_VL512 = 5812,
    XED_IFORM_VSHUFF32X4_YMMf32_MASKmskw_YMMf32_MEMf32_IMM8_AVX512 = 5813,
    XED_IFORM_VSHUFF32X4_YMMf32_MASKmskw_YMMf32_YMMf32_IMM8_AVX512 = 5814,
    XED_IFORM_VSHUFF32X4_ZMMf32_MASKmskw_ZMMf32_MEMf32_IMM8_AVX512 = 5815,
    XED_IFORM_VSHUFF32X4_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512 = 5816,
    XED_IFORM_VSHUFF64X2_YMMf64_MASKmskw_YMMf64_MEMf64_IMM8_AVX512 = 5817,
    XED_IFORM_VSHUFF64X2_YMMf64_MASKmskw_YMMf64_YMMf64_IMM8_AVX512 = 5818,
    XED_IFORM_VSHUFF64X2_ZMMf64_MASKmskw_ZMMf64_MEMf64_IMM8_AVX512 = 5819,
    XED_IFORM_VSHUFF64X2_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512 = 5820,
    XED_IFORM_VSHUFI32X4_YMMu32_MASKmskw_YMMu32_MEMu32_IMM8_AVX512 = 5821,
    XED_IFORM_VSHUFI32X4_YMMu32_MASKmskw_YMMu32_YMMu32_IMM8_AVX512 = 5822,
    XED_IFORM_VSHUFI32X4_ZMMu32_MASKmskw_ZMMu32_MEMu32_IMM8_AVX512 = 5823,
    XED_IFORM_VSHUFI32X4_ZMMu32_MASKmskw_ZMMu32_ZMMu32_IMM8_AVX512 = 5824,
    XED_IFORM_VSHUFI64X2_YMMu64_MASKmskw_YMMu64_MEMu64_IMM8_AVX512 = 5825,
    XED_IFORM_VSHUFI64X2_YMMu64_MASKmskw_YMMu64_YMMu64_IMM8_AVX512 = 5826,
    XED_IFORM_VSHUFI64X2_ZMMu64_MASKmskw_ZMMu64_MEMu64_IMM8_AVX512 = 5827,
    XED_IFORM_VSHUFI64X2_ZMMu64_MASKmskw_ZMMu64_ZMMu64_IMM8_AVX512 = 5828,
    XED_IFORM_VSHUFPD_XMMdq_XMMdq_MEMdq_IMMb = 5829,
    XED_IFORM_VSHUFPD_XMMdq_XMMdq_XMMdq_IMMb = 5830,
    XED_IFORM_VSHUFPD_XMMf64_MASKmskw_XMMf64_MEMf64_IMM8_AVX512 = 5831,
    XED_IFORM_VSHUFPD_XMMf64_MASKmskw_XMMf64_XMMf64_IMM8_AVX512 = 5832,
    XED_IFORM_VSHUFPD_YMMf64_MASKmskw_YMMf64_MEMf64_IMM8_AVX512 = 5833,
    XED_IFORM_VSHUFPD_YMMf64_MASKmskw_YMMf64_YMMf64_IMM8_AVX512 = 5834,
    XED_IFORM_VSHUFPD_YMMqq_YMMqq_MEMqq_IMMb = 5835,
    XED_IFORM_VSHUFPD_YMMqq_YMMqq_YMMqq_IMMb = 5836,
    XED_IFORM_VSHUFPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_IMM8_AVX512 = 5837,
    XED_IFORM_VSHUFPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_IMM8_AVX512 = 5838,
    XED_IFORM_VSHUFPS_XMMdq_XMMdq_MEMdq_IMMb = 5839,
    XED_IFORM_VSHUFPS_XMMdq_XMMdq_XMMdq_IMMb = 5840,
    XED_IFORM_VSHUFPS_XMMf32_MASKmskw_XMMf32_MEMf32_IMM8_AVX512 = 5841,
    XED_IFORM_VSHUFPS_XMMf32_MASKmskw_XMMf32_XMMf32_IMM8_AVX512 = 5842,
    XED_IFORM_VSHUFPS_YMMf32_MASKmskw_YMMf32_MEMf32_IMM8_AVX512 = 5843,
    XED_IFORM_VSHUFPS_YMMf32_MASKmskw_YMMf32_YMMf32_IMM8_AVX512 = 5844,
    XED_IFORM_VSHUFPS_YMMqq_YMMqq_MEMqq_IMMb = 5845,
    XED_IFORM_VSHUFPS_YMMqq_YMMqq_YMMqq_IMMb = 5846,
    XED_IFORM_VSHUFPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_IMM8_AVX512 = 5847,
    XED_IFORM_VSHUFPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_IMM8_AVX512 = 5848,
    XED_IFORM_VSQRTPD_XMMdq_MEMdq = 5849,
    XED_IFORM_VSQRTPD_XMMdq_XMMdq = 5850,
    XED_IFORM_VSQRTPD_XMMf64_MASKmskw_MEMf64_AVX512 = 5851,
    XED_IFORM_VSQRTPD_XMMf64_MASKmskw_XMMf64_AVX512 = 5852,
    XED_IFORM_VSQRTPD_YMMf64_MASKmskw_MEMf64_AVX512 = 5853,
    XED_IFORM_VSQRTPD_YMMf64_MASKmskw_YMMf64_AVX512 = 5854,
    XED_IFORM_VSQRTPD_YMMqq_MEMqq = 5855,
    XED_IFORM_VSQRTPD_YMMqq_YMMqq = 5856,
    XED_IFORM_VSQRTPD_ZMMf64_MASKmskw_MEMf64_AVX512 = 5857,
    XED_IFORM_VSQRTPD_ZMMf64_MASKmskw_ZMMf64_AVX512 = 5858,
    XED_IFORM_VSQRTPS_XMMdq_MEMdq = 5859,
    XED_IFORM_VSQRTPS_XMMdq_XMMdq = 5860,
    XED_IFORM_VSQRTPS_XMMf32_MASKmskw_MEMf32_AVX512 = 5861,
    XED_IFORM_VSQRTPS_XMMf32_MASKmskw_XMMf32_AVX512 = 5862,
    XED_IFORM_VSQRTPS_YMMf32_MASKmskw_MEMf32_AVX512 = 5863,
    XED_IFORM_VSQRTPS_YMMf32_MASKmskw_YMMf32_AVX512 = 5864,
    XED_IFORM_VSQRTPS_YMMqq_MEMqq = 5865,
    XED_IFORM_VSQRTPS_YMMqq_YMMqq = 5866,
    XED_IFORM_VSQRTPS_ZMMf32_MASKmskw_MEMf32_AVX512 = 5867,
    XED_IFORM_VSQRTPS_ZMMf32_MASKmskw_ZMMf32_AVX512 = 5868,
    XED_IFORM_VSQRTSD_XMMdq_XMMdq_MEMq = 5869,
    XED_IFORM_VSQRTSD_XMMdq_XMMdq_XMMq = 5870,
    XED_IFORM_VSQRTSD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 5871,
    XED_IFORM_VSQRTSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 5872,
    XED_IFORM_VSQRTSS_XMMdq_XMMdq_MEMd = 5873,
    XED_IFORM_VSQRTSS_XMMdq_XMMdq_XMMd = 5874,
    XED_IFORM_VSQRTSS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 5875,
    XED_IFORM_VSQRTSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 5876,
    XED_IFORM_VSTMXCSR_MEMd = 5877,
    XED_IFORM_VSUBPD_XMMdq_XMMdq_MEMdq = 5878,
    XED_IFORM_VSUBPD_XMMdq_XMMdq_XMMdq = 5879,
    XED_IFORM_VSUBPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 5880,
    XED_IFORM_VSUBPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 5881,
    XED_IFORM_VSUBPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 5882,
    XED_IFORM_VSUBPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 5883,
    XED_IFORM_VSUBPD_YMMqq_YMMqq_MEMqq = 5884,
    XED_IFORM_VSUBPD_YMMqq_YMMqq_YMMqq = 5885,
    XED_IFORM_VSUBPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 5886,
    XED_IFORM_VSUBPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 5887,
    XED_IFORM_VSUBPS_XMMdq_XMMdq_MEMdq = 5888,
    XED_IFORM_VSUBPS_XMMdq_XMMdq_XMMdq = 5889,
    XED_IFORM_VSUBPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 5890,
    XED_IFORM_VSUBPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 5891,
    XED_IFORM_VSUBPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 5892,
    XED_IFORM_VSUBPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 5893,
    XED_IFORM_VSUBPS_YMMqq_YMMqq_MEMqq = 5894,
    XED_IFORM_VSUBPS_YMMqq_YMMqq_YMMqq = 5895,
    XED_IFORM_VSUBPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 5896,
    XED_IFORM_VSUBPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 5897,
    XED_IFORM_VSUBSD_XMMdq_XMMdq_MEMq = 5898,
    XED_IFORM_VSUBSD_XMMdq_XMMdq_XMMq = 5899,
    XED_IFORM_VSUBSD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 5900,
    XED_IFORM_VSUBSD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 5901,
    XED_IFORM_VSUBSS_XMMdq_XMMdq_MEMd = 5902,
    XED_IFORM_VSUBSS_XMMdq_XMMdq_XMMd = 5903,
    XED_IFORM_VSUBSS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 5904,
    XED_IFORM_VSUBSS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 5905,
    XED_IFORM_VTESTPD_XMMdq_MEMdq = 5906,
    XED_IFORM_VTESTPD_XMMdq_XMMdq = 5907,
    XED_IFORM_VTESTPD_YMMqq_MEMqq = 5908,
    XED_IFORM_VTESTPD_YMMqq_YMMqq = 5909,
    XED_IFORM_VTESTPS_XMMdq_MEMdq = 5910,
    XED_IFORM_VTESTPS_XMMdq_XMMdq = 5911,
    XED_IFORM_VTESTPS_YMMqq_MEMqq = 5912,
    XED_IFORM_VTESTPS_YMMqq_YMMqq = 5913,
    XED_IFORM_VUCOMISD_XMMdq_MEMq = 5914,
    XED_IFORM_VUCOMISD_XMMdq_XMMq = 5915,
    XED_IFORM_VUCOMISD_XMMf64_MEMf64_AVX512 = 5916,
    XED_IFORM_VUCOMISD_XMMf64_XMMf64_AVX512 = 5917,
    XED_IFORM_VUCOMISS_XMMdq_MEMd = 5918,
    XED_IFORM_VUCOMISS_XMMdq_XMMd = 5919,
    XED_IFORM_VUCOMISS_XMMf32_MEMf32_AVX512 = 5920,
    XED_IFORM_VUCOMISS_XMMf32_XMMf32_AVX512 = 5921,
    XED_IFORM_VUNPCKHPD_XMMdq_XMMdq_MEMdq = 5922,
    XED_IFORM_VUNPCKHPD_XMMdq_XMMdq_XMMdq = 5923,
    XED_IFORM_VUNPCKHPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 5924,
    XED_IFORM_VUNPCKHPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 5925,
    XED_IFORM_VUNPCKHPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 5926,
    XED_IFORM_VUNPCKHPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 5927,
    XED_IFORM_VUNPCKHPD_YMMqq_YMMqq_MEMqq = 5928,
    XED_IFORM_VUNPCKHPD_YMMqq_YMMqq_YMMqq = 5929,
    XED_IFORM_VUNPCKHPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 5930,
    XED_IFORM_VUNPCKHPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 5931,
    XED_IFORM_VUNPCKHPS_XMMdq_XMMdq_MEMdq = 5932,
    XED_IFORM_VUNPCKHPS_XMMdq_XMMdq_XMMdq = 5933,
    XED_IFORM_VUNPCKHPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 5934,
    XED_IFORM_VUNPCKHPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 5935,
    XED_IFORM_VUNPCKHPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 5936,
    XED_IFORM_VUNPCKHPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 5937,
    XED_IFORM_VUNPCKHPS_YMMqq_YMMqq_MEMqq = 5938,
    XED_IFORM_VUNPCKHPS_YMMqq_YMMqq_YMMqq = 5939,
    XED_IFORM_VUNPCKHPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 5940,
    XED_IFORM_VUNPCKHPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 5941,
    XED_IFORM_VUNPCKLPD_XMMdq_XMMdq_MEMdq = 5942,
    XED_IFORM_VUNPCKLPD_XMMdq_XMMdq_XMMdq = 5943,
    XED_IFORM_VUNPCKLPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 5944,
    XED_IFORM_VUNPCKLPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 5945,
    XED_IFORM_VUNPCKLPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 5946,
    XED_IFORM_VUNPCKLPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 5947,
    XED_IFORM_VUNPCKLPD_YMMqq_YMMqq_MEMqq = 5948,
    XED_IFORM_VUNPCKLPD_YMMqq_YMMqq_YMMqq = 5949,
    XED_IFORM_VUNPCKLPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 5950,
    XED_IFORM_VUNPCKLPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 5951,
    XED_IFORM_VUNPCKLPS_XMMdq_XMMdq_MEMdq = 5952,
    XED_IFORM_VUNPCKLPS_XMMdq_XMMdq_XMMdq = 5953,
    XED_IFORM_VUNPCKLPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 5954,
    XED_IFORM_VUNPCKLPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 5955,
    XED_IFORM_VUNPCKLPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 5956,
    XED_IFORM_VUNPCKLPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 5957,
    XED_IFORM_VUNPCKLPS_YMMqq_YMMqq_MEMqq = 5958,
    XED_IFORM_VUNPCKLPS_YMMqq_YMMqq_YMMqq = 5959,
    XED_IFORM_VUNPCKLPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 5960,
    XED_IFORM_VUNPCKLPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 5961,
    XED_IFORM_VXORPD_XMMdq_XMMdq_MEMdq = 5962,
    XED_IFORM_VXORPD_XMMdq_XMMdq_XMMdq = 5963,
    XED_IFORM_VXORPD_XMMf64_MASKmskw_XMMf64_MEMf64_AVX512 = 5964,
    XED_IFORM_VXORPD_XMMf64_MASKmskw_XMMf64_XMMf64_AVX512 = 5965,
    XED_IFORM_VXORPD_YMMf64_MASKmskw_YMMf64_MEMf64_AVX512 = 5966,
    XED_IFORM_VXORPD_YMMf64_MASKmskw_YMMf64_YMMf64_AVX512 = 5967,
    XED_IFORM_VXORPD_YMMqq_YMMqq_MEMqq = 5968,
    XED_IFORM_VXORPD_YMMqq_YMMqq_YMMqq = 5969,
    XED_IFORM_VXORPD_ZMMf64_MASKmskw_ZMMf64_MEMf64_AVX512 = 5970,
    XED_IFORM_VXORPD_ZMMf64_MASKmskw_ZMMf64_ZMMf64_AVX512 = 5971,
    XED_IFORM_VXORPS_XMMdq_XMMdq_MEMdq = 5972,
    XED_IFORM_VXORPS_XMMdq_XMMdq_XMMdq = 5973,
    XED_IFORM_VXORPS_XMMf32_MASKmskw_XMMf32_MEMf32_AVX512 = 5974,
    XED_IFORM_VXORPS_XMMf32_MASKmskw_XMMf32_XMMf32_AVX512 = 5975,
    XED_IFORM_VXORPS_YMMf32_MASKmskw_YMMf32_MEMf32_AVX512 = 5976,
    XED_IFORM_VXORPS_YMMf32_MASKmskw_YMMf32_YMMf32_AVX512 = 5977,
    XED_IFORM_VXORPS_YMMqq_YMMqq_MEMqq = 5978,
    XED_IFORM_VXORPS_YMMqq_YMMqq_YMMqq = 5979,
    XED_IFORM_VXORPS_ZMMf32_MASKmskw_ZMMf32_MEMf32_AVX512 = 5980,
    XED_IFORM_VXORPS_ZMMf32_MASKmskw_ZMMf32_ZMMf32_AVX512 = 5981,
    XED_IFORM_VZEROALL = 5982,
    XED_IFORM_VZEROUPPER = 5983,
    XED_IFORM_WBINVD = 5984,
    XED_IFORM_WRFSBASE_GPRy = 5985,
    XED_IFORM_WRGSBASE_GPRy = 5986,
    XED_IFORM_WRMSR = 5987,
    XED_IFORM_WRPKRU = 5988,
    XED_IFORM_WRSSD_MEMu32_GPR32u32 = 5989,
    XED_IFORM_WRSSQ_MEMu64_GPR64u64 = 5990,
    XED_IFORM_WRUSSD_MEMu32_GPR32u32 = 5991,
    XED_IFORM_WRUSSQ_MEMu64_GPR64u64 = 5992,
    XED_IFORM_XABORT_IMMb = 5993,
    XED_IFORM_XADD_GPR8_GPR8 = 5994,
    XED_IFORM_XADD_GPRv_GPRv = 5995,
    XED_IFORM_XADD_MEMb_GPR8 = 5996,
    XED_IFORM_XADD_MEMv_GPRv = 5997,
    XED_IFORM_XADD_LOCK_MEMb_GPR8 = 5998,
    XED_IFORM_XADD_LOCK_MEMv_GPRv = 5999,
    XED_IFORM_XBEGIN_RELBRz = 6000,
    XED_IFORM_XCHG_GPR8_GPR8 = 6001,
    XED_IFORM_XCHG_GPRv_GPRv = 6002,
    XED_IFORM_XCHG_GPRv_OrAX = 6003,
    XED_IFORM_XCHG_MEMb_GPR8 = 6004,
    XED_IFORM_XCHG_MEMv_GPRv = 6005,
    XED_IFORM_XEND = 6006,
    XED_IFORM_XGETBV = 6007,
    XED_IFORM_XLAT = 6008,
    XED_IFORM_XOR_AL_IMMb = 6009,
    XED_IFORM_XOR_GPR8_GPR8_30 = 6010,
    XED_IFORM_XOR_GPR8_GPR8_32 = 6011,
    XED_IFORM_XOR_GPR8_IMMb_80r6 = 6012,
    XED_IFORM_XOR_GPR8_IMMb_82r6 = 6013,
    XED_IFORM_XOR_GPR8_MEMb = 6014,
    XED_IFORM_XOR_GPRv_GPRv_31 = 6015,
    XED_IFORM_XOR_GPRv_GPRv_33 = 6016,
    XED_IFORM_XOR_GPRv_IMMb = 6017,
    XED_IFORM_XOR_GPRv_IMMz = 6018,
    XED_IFORM_XOR_GPRv_MEMv = 6019,
    XED_IFORM_XOR_MEMb_GPR8 = 6020,
    XED_IFORM_XOR_MEMb_IMMb_80r6 = 6021,
    XED_IFORM_XOR_MEMb_IMMb_82r6 = 6022,
    XED_IFORM_XOR_MEMv_GPRv = 6023,
    XED_IFORM_XOR_MEMv_IMMb = 6024,
    XED_IFORM_XOR_MEMv_IMMz = 6025,
    XED_IFORM_XOR_OrAX_IMMz = 6026,
    XED_IFORM_XORPD_XMMpd_MEMpd = 6027,
    XED_IFORM_XORPD_XMMpd_XMMpd = 6028,
    XED_IFORM_XORPS_XMMps_MEMps = 6029,
    XED_IFORM_XORPS_XMMps_XMMps = 6030,
    XED_IFORM_XOR_LOCK_MEMb_GPR8 = 6031,
    XED_IFORM_XOR_LOCK_MEMb_IMMb_80r6 = 6032,
    XED_IFORM_XOR_LOCK_MEMb_IMMb_82r6 = 6033,
    XED_IFORM_XOR_LOCK_MEMv_GPRv = 6034,
    XED_IFORM_XOR_LOCK_MEMv_IMMb = 6035,
    XED_IFORM_XOR_LOCK_MEMv_IMMz = 6036,
    XED_IFORM_XRSTOR_MEMmxsave = 6037,
    XED_IFORM_XRSTOR64_MEMmxsave = 6038,
    XED_IFORM_XRSTORS_MEMmxsave = 6039,
    XED_IFORM_XRSTORS64_MEMmxsave = 6040,
    XED_IFORM_XSAVE_MEMmxsave = 6041,
    XED_IFORM_XSAVE64_MEMmxsave = 6042,
    XED_IFORM_XSAVEC_MEMmxsave = 6043,
    XED_IFORM_XSAVEC64_MEMmxsave = 6044,
    XED_IFORM_XSAVEOPT_MEMmxsave = 6045,
    XED_IFORM_XSAVEOPT64_MEMmxsave = 6046,
    XED_IFORM_XSAVES_MEMmxsave = 6047,
    XED_IFORM_XSAVES64_MEMmxsave = 6048,
    XED_IFORM_XSETBV = 6049,
    XED_IFORM_XTEST = 6050,
    XED_IFORM_LAST = 6051,
}
extern "C" {
    pub fn str2xed_iform_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_iform_enum_t;
}
extern "C" {
    pub fn xed_iform_enum_t2str(p: xed_iform_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_iform_enum_t_last() -> xed_iform_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_isa_set_enum_t {
    XED_ISA_SET_INVALID = 0,
    XED_ISA_SET_3DNOW = 1,
    XED_ISA_SET_AES = 2,
    XED_ISA_SET_AMD = 3,
    XED_ISA_SET_AVX = 4,
    XED_ISA_SET_AVX2 = 5,
    XED_ISA_SET_AVX2GATHER = 6,
    XED_ISA_SET_AVX512BW_128 = 7,
    XED_ISA_SET_AVX512BW_128N = 8,
    XED_ISA_SET_AVX512BW_256 = 9,
    XED_ISA_SET_AVX512BW_512 = 10,
    XED_ISA_SET_AVX512BW_KOP = 11,
    XED_ISA_SET_AVX512CD_128 = 12,
    XED_ISA_SET_AVX512CD_256 = 13,
    XED_ISA_SET_AVX512CD_512 = 14,
    XED_ISA_SET_AVX512DQ_128 = 15,
    XED_ISA_SET_AVX512DQ_128N = 16,
    XED_ISA_SET_AVX512DQ_256 = 17,
    XED_ISA_SET_AVX512DQ_512 = 18,
    XED_ISA_SET_AVX512DQ_KOP = 19,
    XED_ISA_SET_AVX512DQ_SCALAR = 20,
    XED_ISA_SET_AVX512ER_512 = 21,
    XED_ISA_SET_AVX512ER_SCALAR = 22,
    XED_ISA_SET_AVX512F_128 = 23,
    XED_ISA_SET_AVX512F_128N = 24,
    XED_ISA_SET_AVX512F_256 = 25,
    XED_ISA_SET_AVX512F_512 = 26,
    XED_ISA_SET_AVX512F_KOP = 27,
    XED_ISA_SET_AVX512F_SCALAR = 28,
    XED_ISA_SET_AVX512PF_512 = 29,
    XED_ISA_SET_AVX512_4FMAPS_512 = 30,
    XED_ISA_SET_AVX512_4FMAPS_SCALAR = 31,
    XED_ISA_SET_AVX512_4VNNIW_512 = 32,
    XED_ISA_SET_AVX512_IFMA_128 = 33,
    XED_ISA_SET_AVX512_IFMA_256 = 34,
    XED_ISA_SET_AVX512_IFMA_512 = 35,
    XED_ISA_SET_AVX512_VBMI_128 = 36,
    XED_ISA_SET_AVX512_VBMI_256 = 37,
    XED_ISA_SET_AVX512_VBMI_512 = 38,
    XED_ISA_SET_AVX512_VPOPCNTDQ_512 = 39,
    XED_ISA_SET_AVXAES = 40,
    XED_ISA_SET_BDW = 41,
    XED_ISA_SET_BMI1 = 42,
    XED_ISA_SET_BMI2 = 43,
    XED_ISA_SET_CET = 44,
    XED_ISA_SET_CLFLUSHOPT = 45,
    XED_ISA_SET_CLFSH = 46,
    XED_ISA_SET_CLWB = 47,
    XED_ISA_SET_CLZERO = 48,
    XED_ISA_SET_CMOV = 49,
    XED_ISA_SET_CMPXCHG16B = 50,
    XED_ISA_SET_F16C = 51,
    XED_ISA_SET_FAT_NOP = 52,
    XED_ISA_SET_FCMOV = 53,
    XED_ISA_SET_FMA = 54,
    XED_ISA_SET_FMA4 = 55,
    XED_ISA_SET_FXSAVE = 56,
    XED_ISA_SET_FXSAVE64 = 57,
    XED_ISA_SET_I186 = 58,
    XED_ISA_SET_I286PROTECTED = 59,
    XED_ISA_SET_I286REAL = 60,
    XED_ISA_SET_I386 = 61,
    XED_ISA_SET_I486 = 62,
    XED_ISA_SET_I486REAL = 63,
    XED_ISA_SET_I86 = 64,
    XED_ISA_SET_INVPCID = 65,
    XED_ISA_SET_LAHF = 66,
    XED_ISA_SET_LONGMODE = 67,
    XED_ISA_SET_LZCNT = 68,
    XED_ISA_SET_MONITOR = 69,
    XED_ISA_SET_MOVBE = 70,
    XED_ISA_SET_MPX = 71,
    XED_ISA_SET_PAUSE = 72,
    XED_ISA_SET_PCLMULQDQ = 73,
    XED_ISA_SET_PENTIUMMMX = 74,
    XED_ISA_SET_PENTIUMREAL = 75,
    XED_ISA_SET_PKU = 76,
    XED_ISA_SET_POPCNT = 77,
    XED_ISA_SET_PPRO = 78,
    XED_ISA_SET_PREFETCHW = 79,
    XED_ISA_SET_PREFETCHWT1 = 80,
    XED_ISA_SET_PREFETCH_NOP = 81,
    XED_ISA_SET_PT = 82,
    XED_ISA_SET_RDPMC = 83,
    XED_ISA_SET_RDRAND = 84,
    XED_ISA_SET_RDSEED = 85,
    XED_ISA_SET_RDTSCP = 86,
    XED_ISA_SET_RDWRFSGS = 87,
    XED_ISA_SET_RTM = 88,
    XED_ISA_SET_SGX = 89,
    XED_ISA_SET_SHA = 90,
    XED_ISA_SET_SMAP = 91,
    XED_ISA_SET_SMX = 92,
    XED_ISA_SET_SSE = 93,
    XED_ISA_SET_SSE2 = 94,
    XED_ISA_SET_SSE2MMX = 95,
    XED_ISA_SET_SSE3 = 96,
    XED_ISA_SET_SSE3X87 = 97,
    XED_ISA_SET_SSE4 = 98,
    XED_ISA_SET_SSE42 = 99,
    XED_ISA_SET_SSE4A = 100,
    XED_ISA_SET_SSEMXCSR = 101,
    XED_ISA_SET_SSE_PREFETCH = 102,
    XED_ISA_SET_SSSE3 = 103,
    XED_ISA_SET_SSSE3MMX = 104,
    XED_ISA_SET_SVM = 105,
    XED_ISA_SET_TBM = 106,
    XED_ISA_SET_VMFUNC = 107,
    XED_ISA_SET_VTX = 108,
    XED_ISA_SET_X87 = 109,
    XED_ISA_SET_XOP = 110,
    XED_ISA_SET_XSAVE = 111,
    XED_ISA_SET_XSAVEC = 112,
    XED_ISA_SET_XSAVEOPT = 113,
    XED_ISA_SET_XSAVES = 114,
    XED_ISA_SET_LAST = 115,
}
extern "C" {
    pub fn str2xed_isa_set_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_isa_set_enum_t;
}
extern "C" {
    pub fn xed_isa_set_enum_t2str(p: xed_isa_set_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_isa_set_enum_t_last() -> xed_isa_set_enum_t;
}
/// @ingroup IFORM
/// Statically available information about iforms.
/// Values are returned by #xed_iform_map().
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_iform_info_s {
    pub _bitfield_1: [u16; 4usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_xed_iform_info_s() {
    assert_eq!(::std::mem::size_of::<xed_iform_info_s>() , 8usize , concat ! (
               "Size of: " , stringify ! ( xed_iform_info_s ) ));
    assert_eq! (::std::mem::align_of::<xed_iform_info_s>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( xed_iform_info_s ) ));
}
impl Clone for xed_iform_info_s {
    fn clone(&self) -> Self { *self }
}
impl xed_iform_info_s {
    #[inline]
    pub fn iclass(&self) -> u32 {
        let mut unit_field_val: u64 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u64 as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>())
        };
        let mask = 65535u64 as u64;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_iclass(&mut self, val: u32) {
        let mask = 65535u64 as u64;
        let val = val as u32 as u64;
        let mut unit_field_val: u64 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u64 as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>());
        }
    }
    #[inline]
    pub fn category(&self) -> u32 {
        let mut unit_field_val: u64 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u64 as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>())
        };
        let mask = 16711680u64 as u64;
        let val = (unit_field_val & mask) >> 16usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_category(&mut self, val: u32) {
        let mask = 16711680u64 as u64;
        let val = val as u32 as u64;
        let mut unit_field_val: u64 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u64 as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 16usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>());
        }
    }
    #[inline]
    pub fn extension(&self) -> u32 {
        let mut unit_field_val: u64 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u64 as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>())
        };
        let mask = 4278190080u64 as u64;
        let val = (unit_field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_extension(&mut self, val: u32) {
        let mask = 4278190080u64 as u64;
        let val = val as u32 as u64;
        let mut unit_field_val: u64 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u64 as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 24usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>());
        }
    }
    #[inline]
    pub fn isa_set(&self) -> u32 {
        let mut unit_field_val: u64 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u64 as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>())
        };
        let mask = 1095216660480u64 as u64;
        let val = (unit_field_val & mask) >> 32usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_isa_set(&mut self, val: u32) {
        let mask = 1095216660480u64 as u64;
        let val = val as u32 as u64;
        let mut unit_field_val: u64 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u64 as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 32usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>());
        }
    }
    #[inline]
    pub fn string_table_idx(&self) -> u32 {
        let mut unit_field_val: u64 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u64 as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>())
        };
        let mask = 72056494526300160u64 as u64;
        let val = (unit_field_val & mask) >> 40usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_string_table_idx(&mut self, val: u32) {
        let mask = 72056494526300160u64 as u64;
        let val = val as u32 as u64;
        let mut unit_field_val: u64 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u64 as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 40usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u64>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(iclass: u32, category: u32, extension: u32,
                          isa_set: u32, string_table_idx: u32) -> u64 {
        ({
             ({
                  ({
                       ({
                            ({ 0 } |
                                 ((iclass as u32 as u64) << 0usize) &
                                     (65535u64 as u64))
                        } |
                            ((category as u32 as u64) << 16usize) &
                                (16711680u64 as u64))
                   } |
                       ((extension as u32 as u64) << 24usize) &
                           (4278190080u64 as u64))
              } |
                  ((isa_set as u32 as u64) << 32usize) &
                      (1095216660480u64 as u64))
         } |
             ((string_table_idx as u32 as u64) << 40usize) &
                 (72056494526300160u64 as u64))
    }
}
pub type xed_iform_info_t = xed_iform_info_s;
extern "C" {
    /// @ingroup IFORM
/// Map the #xed_iform_enum_t to a pointer to a #xed_iform_info_t which
/// indicates the #xed_iclass_enum_t, the #xed_category_enum_t and the
/// #xed_extension_enum_t for the iform. Returns 0 if the iform is not a
/// valid iform.
    pub fn xed_iform_map(iform: xed_iform_enum_t) -> *const xed_iform_info_t;
}
extern "C" {
    /// @ingroup IFORM
/// Return the maximum number of iforms for a particular iclass.  This
/// function returns valid data as soon as global data is
/// initialized. (This function does not require a decoded instruction as
/// input).
    pub fn xed_iform_max_per_iclass(iclass: xed_iclass_enum_t) -> u32;
}
extern "C" {
    /// @ingroup IFORM
/// Return the first of the iforms for a particular iclass.  This function
/// returns valid data as soon as global data is initialized. (This
/// function does not require a decoded instruction as input).
    pub fn xed_iform_first_per_iclass(iclass: xed_iclass_enum_t) -> u32;
}
extern "C" {
    /// @ingroup IFORM
/// Return the category for a given iform. This 
/// function returns valid data as soon as global data is initialized. (This
/// function does not require a decoded instruction as input).
    pub fn xed_iform_to_category(iform: xed_iform_enum_t)
     -> xed_category_enum_t;
}
extern "C" {
    /// @ingroup IFORM
/// Return the extension for a given iform. This function returns valid
/// data as soon as global data is initialized. (This function does not
/// require a decoded instruction as input).
    pub fn xed_iform_to_extension(iform: xed_iform_enum_t)
     -> xed_extension_enum_t;
}
extern "C" {
    /// @ingroup IFORM
/// Return the isa_set for a given iform. This function returns valid data
/// as soon as global data is initialized. (This function does not require
/// a decoded instruction as input).
    pub fn xed_iform_to_isa_set(iform: xed_iform_enum_t)
     -> xed_isa_set_enum_t;
}
extern "C" {
    /// @ingroup IFORM
/// Return a pointer to a character string of the iclass. This
/// translates the internal disambiguated names to the more ambiguous
/// names that people like to see. This returns the ATT SYSV-syntax name.
    pub fn xed_iform_to_iclass_string_att(iform: xed_iform_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    /// @ingroup IFORM
/// Return a pointer to a character string of the iclass. This
/// translates the internal disambiguated names to the more ambiguous
/// names that people like to see. This returns the Intel-syntax name.
    pub fn xed_iform_to_iclass_string_intel(iform: xed_iform_enum_t)
     -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_attributes_t {
    pub a1: u64,
    pub a2: u64,
}
#[test]
fn bindgen_test_layout_xed_attributes_t() {
    assert_eq!(::std::mem::size_of::<xed_attributes_t>() , 16usize , concat !
               ( "Size of: " , stringify ! ( xed_attributes_t ) ));
    assert_eq! (::std::mem::align_of::<xed_attributes_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( xed_attributes_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_attributes_t ) ) . a1 as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_attributes_t ) ,
                "::" , stringify ! ( a1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_attributes_t ) ) . a2 as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_attributes_t ) ,
                "::" , stringify ! ( a2 ) ));
}
impl Clone for xed_attributes_t {
    fn clone(&self) -> Self { *self }
}
/// @ingroup DEC
/// The main container for instructions. After decode, it holds an array of
/// operands with derived information from decode and also valid
/// #xed_inst_t pointer which describes the operand templates and the
/// operand order.  See @ref DEC for API documentation.
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_decoded_inst_s {
    /// The _operands are storage for information discovered during
    /// decoding. They are also used by encode.  The accessors for these
    /// operands all have the form xed3_operand_{get,set}_*(). They should
    /// be considered internal and subject to change over time. It is
    /// preferred that you use xed_decoded_inst_*() or the
    /// xed_operand_values_*() functions when available.
    pub _operands: xed_operand_storage_t,
    /// Used for encode operand ordering. Not set by decode.
    pub _operand_order: [u8; 5usize],
    /// Length of the _operand_order[] array.
    pub _n_operand_order: u8,
    pub _decoded_length: u8,
    /// when we decode an instruction, we set the _inst and get the
    /// properites of that instruction here. This also points to the
    /// operands template array.
    pub _inst: *const xed_inst_t,
    pub _byte_array: xed_decoded_inst_s__bindgen_ty_1,
    pub u: xed_decoded_inst_s__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_decoded_inst_s__bindgen_ty_1 {
    pub _enc: __BindgenUnionField<*mut u8>,
    pub _dec: __BindgenUnionField<*const u8>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_xed_decoded_inst_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<xed_decoded_inst_s__bindgen_ty_1>() ,
               8usize , concat ! (
               "Size of: " , stringify ! ( xed_decoded_inst_s__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<xed_decoded_inst_s__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                xed_decoded_inst_s__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_decoded_inst_s__bindgen_ty_1 ) ) .
                _enc as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_decoded_inst_s__bindgen_ty_1 ) , "::" , stringify ! ( _enc
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_decoded_inst_s__bindgen_ty_1 ) ) .
                _dec as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_decoded_inst_s__bindgen_ty_1 ) , "::" , stringify ! ( _dec
                ) ));
}
impl Clone for xed_decoded_inst_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_decoded_inst_s__bindgen_ty_2 {
    pub user_data: __BindgenUnionField<u64>,
    pub ev: __BindgenUnionField<*mut xed_encoder_vars_s>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_xed_decoded_inst_s__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<xed_decoded_inst_s__bindgen_ty_2>() ,
               8usize , concat ! (
               "Size of: " , stringify ! ( xed_decoded_inst_s__bindgen_ty_2 )
               ));
    assert_eq! (::std::mem::align_of::<xed_decoded_inst_s__bindgen_ty_2>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                xed_decoded_inst_s__bindgen_ty_2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_decoded_inst_s__bindgen_ty_2 ) ) .
                user_data as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_decoded_inst_s__bindgen_ty_2 ) , "::" , stringify ! (
                user_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_decoded_inst_s__bindgen_ty_2 ) ) . ev
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_decoded_inst_s__bindgen_ty_2 ) , "::" , stringify ! ( ev )
                ));
}
impl Clone for xed_decoded_inst_s__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_xed_decoded_inst_s() {
    assert_eq!(::std::mem::size_of::<xed_decoded_inst_s>() , 192usize , concat
               ! ( "Size of: " , stringify ! ( xed_decoded_inst_s ) ));
    assert_eq! (::std::mem::align_of::<xed_decoded_inst_s>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( xed_decoded_inst_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_decoded_inst_s ) ) . _operands as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_decoded_inst_s ) ,
                "::" , stringify ! ( _operands ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_decoded_inst_s ) ) . _operand_order
                as * const _ as usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_decoded_inst_s ) ,
                "::" , stringify ! ( _operand_order ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_decoded_inst_s ) ) . _n_operand_order
                as * const _ as usize } , 165usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_decoded_inst_s ) ,
                "::" , stringify ! ( _n_operand_order ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_decoded_inst_s ) ) . _decoded_length
                as * const _ as usize } , 166usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_decoded_inst_s ) ,
                "::" , stringify ! ( _decoded_length ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_decoded_inst_s ) ) . _inst as * const
                _ as usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_decoded_inst_s ) ,
                "::" , stringify ! ( _inst ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_decoded_inst_s ) ) . _byte_array as *
                const _ as usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_decoded_inst_s ) ,
                "::" , stringify ! ( _byte_array ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_decoded_inst_s ) ) . u as * const _
                as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_decoded_inst_s ) ,
                "::" , stringify ! ( u ) ));
}
impl Clone for xed_decoded_inst_s {
    fn clone(&self) -> Self { *self }
}
pub type xed_operand_extractor_fn_t =
    ::std::option::Option<unsafe extern "C" fn(xds: *mut xed_decoded_inst_s)>;
/// @ingroup DEC
/// Constant information about an individual generic operand, like an
///operand template, describing the operand properties. See @ref DEC for
///API information.
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_operand_s {
    pub _name: u8,
    pub _operand_visibility: u8,
    pub _rw: u8,
    pub _oc2: u8,
    pub _type: u8,
    pub _xtype: u8,
    pub _cvt_idx: u8,
    pub _nt: u8,
    pub _u: xed_operand_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_operand_s__bindgen_ty_1 {
    pub _imm: __BindgenUnionField<u32>,
    pub _nt: __BindgenUnionField<xed_nonterminal_enum_t>,
    pub _reg: __BindgenUnionField<xed_reg_enum_t>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_xed_operand_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<xed_operand_s__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( xed_operand_s__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<xed_operand_s__bindgen_ty_1>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( xed_operand_s__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s__bindgen_ty_1 ) ) . _imm as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_operand_s__bindgen_ty_1 ) , "::" , stringify ! ( _imm )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s__bindgen_ty_1 ) ) . _nt as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_operand_s__bindgen_ty_1 ) , "::" , stringify ! ( _nt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s__bindgen_ty_1 ) ) . _reg as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_operand_s__bindgen_ty_1 ) , "::" , stringify ! ( _reg )
                ));
}
impl Clone for xed_operand_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_xed_operand_s() {
    assert_eq!(::std::mem::size_of::<xed_operand_s>() , 12usize , concat ! (
               "Size of: " , stringify ! ( xed_operand_s ) ));
    assert_eq! (::std::mem::align_of::<xed_operand_s>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( xed_operand_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s ) ) . _name as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_s ) , "::"
                , stringify ! ( _name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s ) ) . _operand_visibility
                as * const _ as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_s ) , "::"
                , stringify ! ( _operand_visibility ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s ) ) . _rw as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_s ) , "::"
                , stringify ! ( _rw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s ) ) . _oc2 as * const _ as
                usize } , 3usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_s ) , "::"
                , stringify ! ( _oc2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s ) ) . _type as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_s ) , "::"
                , stringify ! ( _type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s ) ) . _xtype as * const _
                as usize } , 5usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_s ) , "::"
                , stringify ! ( _xtype ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s ) ) . _cvt_idx as * const _
                as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_s ) , "::"
                , stringify ! ( _cvt_idx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s ) ) . _nt as * const _ as
                usize } , 7usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_s ) , "::"
                , stringify ! ( _nt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_s ) ) . _u as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_s ) , "::"
                , stringify ! ( _u ) ));
}
impl Clone for xed_operand_s {
    fn clone(&self) -> Self { *self }
}
pub type xed_operand_t = xed_operand_s;
extern "C" {
    /// @ingroup DEC
/// @param p  an operand template,  #xed_operand_t.
/// @param eosz  effective operand size of the instruction,  1 | 2 | 3 for 
///  16 | 32 | 64 bits respectively. 0 is invalid.
/// @return  the actual width of operand in bits.
/// See xed_decoded_inst_operand_length_bits() for a more general solution.
    pub fn xed_operand_width_bits(p: *const xed_operand_t, eosz: u32) -> u32;
}
extern "C" {
    /// @ingroup DEC
/// Print the operand p into the buffer buf, of length buflen.
/// @param p  an operand template,  #xed_operand_t.
/// @param buf buffer that gets filled in
/// @param buflen maximum buffer length
    pub fn xed_operand_print(p: *const xed_operand_t,
                             buf: *mut ::std::os::raw::c_char,
                             buflen: ::std::os::raw::c_int);
}
extern "C" {
    /// @ingroup DEC
/// If the operand is read, including conditional reads
    pub fn xed_operand_read(p: *const xed_operand_t) -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
/// If the operand is read-only, including conditional reads
    pub fn xed_operand_read_only(p: *const xed_operand_t) -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
/// If the operand is written, including conditional writes
    pub fn xed_operand_written(p: *const xed_operand_t) -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
/// If the operand is written-only, including conditional writes
    pub fn xed_operand_written_only(p: *const xed_operand_t) -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
/// If the operand is read-and-written, conditional reads and conditional writes
    pub fn xed_operand_read_and_written(p: *const xed_operand_t)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
/// If the operand has a conditional read (may also write)
    pub fn xed_operand_conditional_read(p: *const xed_operand_t)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
/// If the operand has a conditional write (may also read)
    pub fn xed_operand_conditional_write(p: *const xed_operand_t)
     -> xed_uint_t;
}
/// @ingroup DEC
/// constant information about a decoded instruction form, including
/// the pointer to the constant operand properties #xed_operand_t for this
/// instruction form.
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_inst_s {
    pub _noperands: u8,
    pub _cpl: u8,
    pub _flag_complex: u8,
    pub _exceptions: u8,
    pub _flag_info_index: u16,
    pub _iform_enum: u16,
    pub _operand_base: u16,
    pub _attributes: u16,
}
#[test]
fn bindgen_test_layout_xed_inst_s() {
    assert_eq!(::std::mem::size_of::<xed_inst_s>() , 12usize , concat ! (
               "Size of: " , stringify ! ( xed_inst_s ) ));
    assert_eq! (::std::mem::align_of::<xed_inst_s>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( xed_inst_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_inst_s ) ) . _noperands as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_inst_s ) , "::" ,
                stringify ! ( _noperands ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_inst_s ) ) . _cpl as * const _ as
                usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_inst_s ) , "::" ,
                stringify ! ( _cpl ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_inst_s ) ) . _flag_complex as * const
                _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_inst_s ) , "::" ,
                stringify ! ( _flag_complex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_inst_s ) ) . _exceptions as * const _
                as usize } , 3usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_inst_s ) , "::" ,
                stringify ! ( _exceptions ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_inst_s ) ) . _flag_info_index as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_inst_s ) , "::" ,
                stringify ! ( _flag_info_index ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_inst_s ) ) . _iform_enum as * const _
                as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_inst_s ) , "::" ,
                stringify ! ( _iform_enum ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_inst_s ) ) . _operand_base as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_inst_s ) , "::" ,
                stringify ! ( _operand_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_inst_s ) ) . _attributes as * const _
                as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_inst_s ) , "::" ,
                stringify ! ( _attributes ) ));
}
impl Clone for xed_inst_s {
    fn clone(&self) -> Self { *self }
}
pub type xed_inst_t = xed_inst_s;
extern "C" {
    /// @ingroup DEC
/// xed_inst_cpl() is DEPRECATED. Please use
///     "xed_decoded_inst_get_attribute(xedd, XED_ATTRIBUTE_RING0)" 
/// instead.
///Return the current privilege level (CPL) required for execution, 0 or
///3. If the value is zero, then the instruction can only execute in ring 0.
    pub fn xed_inst_cpl(p: *const xed_inst_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    ///@ingroup DEC
/// Obtain a pointer to an individual operand
    pub fn xed_inst_operand(p: *const xed_inst_t, i: ::std::os::raw::c_uint)
     -> *const xed_operand_t;
}
extern "C" {
    pub fn xed_inst_flag_info_index(p: *const xed_inst_t) -> u32;
}
extern "C" {
    /// @ingroup DEC
/// Scan for the attribute attr and return 1 if it is found, 0 otherwise.
    pub fn xed_inst_get_attribute(p: *const xed_inst_t,
                                  attr: xed_attribute_enum_t) -> u32;
}
extern "C" {
    /// @ingroup DEC
/// Return the attributes bit vector
    pub fn xed_inst_get_attributes(p: *const xed_inst_t) -> xed_attributes_t;
}
extern "C" {
    /// @ingroup DEC
/// Return the maximum number of defined attributes, independent of any
/// instruction.
    pub fn xed_attribute_max() -> ::std::os::raw::c_uint;
}
extern "C" {
    /// @ingroup DEC
/// Return the i'th global attribute in a linear sequence, independent of
/// any instruction. This is used for scanning and printing all attributes.
    pub fn xed_attribute(i: ::std::os::raw::c_uint) -> xed_attribute_enum_t;
}
extern "C" {
    /// @ingroup DEC
/// Return the base of instruction table.
    pub fn xed_inst_table_base() -> *const xed_inst_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_flag_enum_t {
    XED_FLAG_INVALID = 0,
    XED_FLAG_of = 1,
    XED_FLAG_sf = 2,
    XED_FLAG_zf = 3,
    XED_FLAG_af = 4,
    XED_FLAG_pf = 5,
    XED_FLAG_cf = 6,
    XED_FLAG_df = 7,
    XED_FLAG_vif = 8,
    XED_FLAG_iopl = 9,
    XED_FLAG_if = 10,
    XED_FLAG_ac = 11,
    XED_FLAG_vm = 12,
    XED_FLAG_rf = 13,
    XED_FLAG_nt = 14,
    XED_FLAG_tf = 15,
    XED_FLAG_id = 16,
    XED_FLAG_vip = 17,
    XED_FLAG_fc0 = 18,
    XED_FLAG_fc1 = 19,
    XED_FLAG_fc2 = 20,
    XED_FLAG_fc3 = 21,
    XED_FLAG_LAST = 22,
}
extern "C" {
    pub fn str2xed_flag_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_flag_enum_t;
}
extern "C" {
    pub fn xed_flag_enum_t2str(p: xed_flag_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_flag_enum_t_last() -> xed_flag_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_flag_action_enum_t {
    XED_FLAG_ACTION_INVALID = 0,
    XED_FLAG_ACTION_u = 1,
    XED_FLAG_ACTION_tst = 2,
    XED_FLAG_ACTION_mod = 3,
    XED_FLAG_ACTION_0 = 4,
    XED_FLAG_ACTION_pop = 5,
    XED_FLAG_ACTION_ah = 6,
    XED_FLAG_ACTION_1 = 7,
    XED_FLAG_ACTION_LAST = 8,
}
extern "C" {
    pub fn str2xed_flag_action_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_flag_action_enum_t;
}
extern "C" {
    pub fn xed_flag_action_enum_t2str(p: xed_flag_action_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_flag_action_enum_t_last() -> xed_flag_action_enum_t;
}
////////////////////////////////////////////////////////////////////////////
/// @ingroup FLAGS
/// a union of flags bits
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_flag_set_s {
    pub flat: __BindgenUnionField<u32>,
    pub s: __BindgenUnionField<xed_flag_set_s__bindgen_ty_1>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_flag_set_s__bindgen_ty_1 {
    pub _bitfield_1: [u8; 4usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_xed_flag_set_s__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<xed_flag_set_s__bindgen_ty_1>() , 4usize
               , concat ! (
               "Size of: " , stringify ! ( xed_flag_set_s__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<xed_flag_set_s__bindgen_ty_1>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( xed_flag_set_s__bindgen_ty_1 )
                ));
}
impl Clone for xed_flag_set_s__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl xed_flag_set_s__bindgen_ty_1 {
    #[inline]
    pub fn cf(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 1u64 as u32;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_cf(&mut self, val: u32) {
        let mask = 1u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn must_be_1(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 2u64 as u32;
        let val = (unit_field_val & mask) >> 1usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_must_be_1(&mut self, val: u32) {
        let mask = 2u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 1usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn pf(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 4u64 as u32;
        let val = (unit_field_val & mask) >> 2usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_pf(&mut self, val: u32) {
        let mask = 4u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 2usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn must_be_0a(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 8u64 as u32;
        let val = (unit_field_val & mask) >> 3usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_must_be_0a(&mut self, val: u32) {
        let mask = 8u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 3usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn af(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 16u64 as u32;
        let val = (unit_field_val & mask) >> 4usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_af(&mut self, val: u32) {
        let mask = 16u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 4usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn must_be_0b(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 32u64 as u32;
        let val = (unit_field_val & mask) >> 5usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_must_be_0b(&mut self, val: u32) {
        let mask = 32u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 5usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn zf(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 64u64 as u32;
        let val = (unit_field_val & mask) >> 6usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_zf(&mut self, val: u32) {
        let mask = 64u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 6usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn sf(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 128u64 as u32;
        let val = (unit_field_val & mask) >> 7usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_sf(&mut self, val: u32) {
        let mask = 128u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 7usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn tf(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 256u64 as u32;
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_tf(&mut self, val: u32) {
        let mask = 256u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn _if(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 512u64 as u32;
        let val = (unit_field_val & mask) >> 9usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set__if(&mut self, val: u32) {
        let mask = 512u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 9usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn df(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 1024u64 as u32;
        let val = (unit_field_val & mask) >> 10usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_df(&mut self, val: u32) {
        let mask = 1024u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 10usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn of(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 2048u64 as u32;
        let val = (unit_field_val & mask) >> 11usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_of(&mut self, val: u32) {
        let mask = 2048u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 11usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn iopl(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 12288u64 as u32;
        let val = (unit_field_val & mask) >> 12usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_iopl(&mut self, val: u32) {
        let mask = 12288u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 12usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn nt(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 16384u64 as u32;
        let val = (unit_field_val & mask) >> 14usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_nt(&mut self, val: u32) {
        let mask = 16384u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 14usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn must_be_0c(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 32768u64 as u32;
        let val = (unit_field_val & mask) >> 15usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_must_be_0c(&mut self, val: u32) {
        let mask = 32768u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 15usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn rf(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 65536u64 as u32;
        let val = (unit_field_val & mask) >> 16usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_rf(&mut self, val: u32) {
        let mask = 65536u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 16usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn vm(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 131072u64 as u32;
        let val = (unit_field_val & mask) >> 17usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_vm(&mut self, val: u32) {
        let mask = 131072u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 17usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn ac(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 262144u64 as u32;
        let val = (unit_field_val & mask) >> 18usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_ac(&mut self, val: u32) {
        let mask = 262144u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 18usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn vif(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 524288u64 as u32;
        let val = (unit_field_val & mask) >> 19usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_vif(&mut self, val: u32) {
        let mask = 524288u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 19usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn vip(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 1048576u64 as u32;
        let val = (unit_field_val & mask) >> 20usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_vip(&mut self, val: u32) {
        let mask = 1048576u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 20usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn id(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 2097152u64 as u32;
        let val = (unit_field_val & mask) >> 21usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_id(&mut self, val: u32) {
        let mask = 2097152u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 21usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn must_be_0d(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 12582912u64 as u32;
        let val = (unit_field_val & mask) >> 22usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_must_be_0d(&mut self, val: u32) {
        let mask = 12582912u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 22usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn must_be_0e(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 251658240u64 as u32;
        let val = (unit_field_val & mask) >> 24usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_must_be_0e(&mut self, val: u32) {
        let mask = 251658240u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 24usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn fc0(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 268435456u64 as u32;
        let val = (unit_field_val & mask) >> 28usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_fc0(&mut self, val: u32) {
        let mask = 268435456u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 28usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn fc1(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 536870912u64 as u32;
        let val = (unit_field_val & mask) >> 29usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_fc1(&mut self, val: u32) {
        let mask = 536870912u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 29usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn fc2(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 1073741824u64 as u32;
        let val = (unit_field_val & mask) >> 30usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_fc2(&mut self, val: u32) {
        let mask = 1073741824u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 30usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn fc3(&self) -> u32 {
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        let mask = 2147483648u64 as u32;
        let val = (unit_field_val & mask) >> 31usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_fc3(&mut self, val: u32) {
        let mask = 2147483648u64 as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u32 as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 31usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u32>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(cf: u32, must_be_1: u32, pf: u32, must_be_0a: u32,
                          af: u32, must_be_0b: u32, zf: u32, sf: u32, tf: u32,
                          _if: u32, df: u32, of: u32, iopl: u32, nt: u32,
                          must_be_0c: u32, rf: u32, vm: u32, ac: u32,
                          vif: u32, vip: u32, id: u32, must_be_0d: u32,
                          must_be_0e: u32, fc0: u32, fc1: u32, fc2: u32,
                          fc3: u32) -> u32 {
        ({
             ({
                  ({
                       ({
                            ({
                                 ({
                                      ({
                                           ({
                                                ({
                                                     ({
                                                          ({
                                                               ({
                                                                    ({
                                                                         ({
                                                                              ({
                                                                                   ({
                                                                                        ({
                                                                                             ({
                                                                                                  ({
                                                                                                       ({
                                                                                                            ({
                                                                                                                 ({
                                                                                                                      ({
                                                                                                                           ({
                                                                                                                                ({
                                                                                                                                     ({
                                                                                                                                          ({
                                                                                                                                               0
                                                                                                                                           }
                                                                                                                                               |
                                                                                                                                               ((cf
                                                                                                                                                     as
                                                                                                                                                     u32
                                                                                                                                                     as
                                                                                                                                                     u32)
                                                                                                                                                    <<
                                                                                                                                                    0usize)
                                                                                                                                                   &
                                                                                                                                                   (1u64
                                                                                                                                                        as
                                                                                                                                                        u32))
                                                                                                                                      }
                                                                                                                                          |
                                                                                                                                          ((must_be_1
                                                                                                                                                as
                                                                                                                                                u32
                                                                                                                                                as
                                                                                                                                                u32)
                                                                                                                                               <<
                                                                                                                                               1usize)
                                                                                                                                              &
                                                                                                                                              (2u64
                                                                                                                                                   as
                                                                                                                                                   u32))
                                                                                                                                 }
                                                                                                                                     |
                                                                                                                                     ((pf
                                                                                                                                           as
                                                                                                                                           u32
                                                                                                                                           as
                                                                                                                                           u32)
                                                                                                                                          <<
                                                                                                                                          2usize)
                                                                                                                                         &
                                                                                                                                         (4u64
                                                                                                                                              as
                                                                                                                                              u32))
                                                                                                                            }
                                                                                                                                |
                                                                                                                                ((must_be_0a
                                                                                                                                      as
                                                                                                                                      u32
                                                                                                                                      as
                                                                                                                                      u32)
                                                                                                                                     <<
                                                                                                                                     3usize)
                                                                                                                                    &
                                                                                                                                    (8u64
                                                                                                                                         as
                                                                                                                                         u32))
                                                                                                                       }
                                                                                                                           |
                                                                                                                           ((af
                                                                                                                                 as
                                                                                                                                 u32
                                                                                                                                 as
                                                                                                                                 u32)
                                                                                                                                <<
                                                                                                                                4usize)
                                                                                                                               &
                                                                                                                               (16u64
                                                                                                                                    as
                                                                                                                                    u32))
                                                                                                                  }
                                                                                                                      |
                                                                                                                      ((must_be_0b
                                                                                                                            as
                                                                                                                            u32
                                                                                                                            as
                                                                                                                            u32)
                                                                                                                           <<
                                                                                                                           5usize)
                                                                                                                          &
                                                                                                                          (32u64
                                                                                                                               as
                                                                                                                               u32))
                                                                                                             }
                                                                                                                 |
                                                                                                                 ((zf
                                                                                                                       as
                                                                                                                       u32
                                                                                                                       as
                                                                                                                       u32)
                                                                                                                      <<
                                                                                                                      6usize)
                                                                                                                     &
                                                                                                                     (64u64
                                                                                                                          as
                                                                                                                          u32))
                                                                                                        }
                                                                                                            |
                                                                                                            ((sf
                                                                                                                  as
                                                                                                                  u32
                                                                                                                  as
                                                                                                                  u32)
                                                                                                                 <<
                                                                                                                 7usize)
                                                                                                                &
                                                                                                                (128u64
                                                                                                                     as
                                                                                                                     u32))
                                                                                                   }
                                                                                                       |
                                                                                                       ((tf
                                                                                                             as
                                                                                                             u32
                                                                                                             as
                                                                                                             u32)
                                                                                                            <<
                                                                                                            8usize)
                                                                                                           &
                                                                                                           (256u64
                                                                                                                as
                                                                                                                u32))
                                                                                              }
                                                                                                  |
                                                                                                  ((_if
                                                                                                        as
                                                                                                        u32
                                                                                                        as
                                                                                                        u32)
                                                                                                       <<
                                                                                                       9usize)
                                                                                                      &
                                                                                                      (512u64
                                                                                                           as
                                                                                                           u32))
                                                                                         }
                                                                                             |
                                                                                             ((df
                                                                                                   as
                                                                                                   u32
                                                                                                   as
                                                                                                   u32)
                                                                                                  <<
                                                                                                  10usize)
                                                                                                 &
                                                                                                 (1024u64
                                                                                                      as
                                                                                                      u32))
                                                                                    }
                                                                                        |
                                                                                        ((of
                                                                                              as
                                                                                              u32
                                                                                              as
                                                                                              u32)
                                                                                             <<
                                                                                             11usize)
                                                                                            &
                                                                                            (2048u64
                                                                                                 as
                                                                                                 u32))
                                                                               }
                                                                                   |
                                                                                   ((iopl
                                                                                         as
                                                                                         u32
                                                                                         as
                                                                                         u32)
                                                                                        <<
                                                                                        12usize)
                                                                                       &
                                                                                       (12288u64
                                                                                            as
                                                                                            u32))
                                                                          } |
                                                                              ((nt
                                                                                    as
                                                                                    u32
                                                                                    as
                                                                                    u32)
                                                                                   <<
                                                                                   14usize)
                                                                                  &
                                                                                  (16384u64
                                                                                       as
                                                                                       u32))
                                                                     } |
                                                                         ((must_be_0c
                                                                               as
                                                                               u32
                                                                               as
                                                                               u32)
                                                                              <<
                                                                              15usize)
                                                                             &
                                                                             (32768u64
                                                                                  as
                                                                                  u32))
                                                                } |
                                                                    ((rf as
                                                                          u32
                                                                          as
                                                                          u32)
                                                                         <<
                                                                         16usize)
                                                                        &
                                                                        (65536u64
                                                                             as
                                                                             u32))
                                                           } |
                                                               ((vm as u32 as
                                                                     u32) <<
                                                                    17usize) &
                                                                   (131072u64
                                                                        as
                                                                        u32))
                                                      } |
                                                          ((ac as u32 as u32)
                                                               << 18usize) &
                                                              (262144u64 as
                                                                   u32))
                                                 } |
                                                     ((vif as u32 as u32) <<
                                                          19usize) &
                                                         (524288u64 as u32))
                                            } |
                                                ((vip as u32 as u32) <<
                                                     20usize) &
                                                    (1048576u64 as u32))
                                       } |
                                           ((id as u32 as u32) << 21usize) &
                                               (2097152u64 as u32))
                                  } |
                                      ((must_be_0d as u32 as u32) << 22usize)
                                          & (12582912u64 as u32))
                             } |
                                 ((must_be_0e as u32 as u32) << 24usize) &
                                     (251658240u64 as u32))
                        } |
                            ((fc0 as u32 as u32) << 28usize) &
                                (268435456u64 as u32))
                   } |
                       ((fc1 as u32 as u32) << 29usize) &
                           (536870912u64 as u32))
              } | ((fc2 as u32 as u32) << 30usize) & (1073741824u64 as u32))
         } | ((fc3 as u32 as u32) << 31usize) & (2147483648u64 as u32))
    }
}
#[test]
fn bindgen_test_layout_xed_flag_set_s() {
    assert_eq!(::std::mem::size_of::<xed_flag_set_s>() , 4usize , concat ! (
               "Size of: " , stringify ! ( xed_flag_set_s ) ));
    assert_eq! (::std::mem::align_of::<xed_flag_set_s>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( xed_flag_set_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_flag_set_s ) ) . flat as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_flag_set_s ) , "::"
                , stringify ! ( flat ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_flag_set_s ) ) . s as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_flag_set_s ) , "::"
                , stringify ! ( s ) ));
}
impl Clone for xed_flag_set_s {
    fn clone(&self) -> Self { *self }
}
pub type xed_flag_set_t = xed_flag_set_s;
extern "C" {
    /// @ingroup FLAGS
/// print the flag set in the supplied buffer
    pub fn xed_flag_set_print(p: *const xed_flag_set_t,
                              buf: *mut ::std::os::raw::c_char,
                              buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /// @ingroup FLAGS
/// returns true if this object has a subset of the flags of the
/// "other" object.
    pub fn xed_flag_set_is_subset_of(p: *const xed_flag_set_t,
                                     other: *const xed_flag_set_t)
     -> xed_bool_t;
}
/// @ingroup FLAGS
/// Associated with each flag field there can be one action.
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_flag_enum_s {
    pub flag: xed_flag_enum_t,
    pub action: xed_flag_action_enum_t,
}
#[test]
fn bindgen_test_layout_xed_flag_enum_s() {
    assert_eq!(::std::mem::size_of::<xed_flag_enum_s>() , 8usize , concat ! (
               "Size of: " , stringify ! ( xed_flag_enum_s ) ));
    assert_eq! (::std::mem::align_of::<xed_flag_enum_s>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( xed_flag_enum_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_flag_enum_s ) ) . flag as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_flag_enum_s ) ,
                "::" , stringify ! ( flag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_flag_enum_s ) ) . action as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_flag_enum_s ) ,
                "::" , stringify ! ( action ) ));
}
impl Clone for xed_flag_enum_s {
    fn clone(&self) -> Self { *self }
}
pub type xed_flag_action_t = xed_flag_enum_s;
extern "C" {
    /// @ingroup FLAGS    
/// get the name of the flag
    pub fn xed_flag_action_get_flag_name(p: *const xed_flag_action_t)
     -> xed_flag_enum_t;
}
extern "C" {
    /// @ingroup FLAGS        
/// return the action
    pub fn xed_flag_action_get_action(p: *const xed_flag_action_t,
                                      i: ::std::os::raw::c_uint)
     -> xed_flag_action_enum_t;
}
extern "C" {
    /// @ingroup FLAGS    
/// returns true if the specified action is invalid. Only the 2nd flag might be invalid.
    pub fn xed_flag_action_action_invalid(a: xed_flag_action_enum_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup FLAGS    
/// print the flag & actions
    pub fn xed_flag_action_print(p: *const xed_flag_action_t,
                                 buf: *mut ::std::os::raw::c_char,
                                 buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    /// @ingroup FLAGS    
/// returns true if either action is a read
    pub fn xed_flag_action_read_flag(p: *const xed_flag_action_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup FLAGS    
/// returns true if either action is a write
    pub fn xed_flag_action_writes_flag(p: *const xed_flag_action_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup FLAGS    
/// test to see if the specific action is a read 
    pub fn xed_flag_action_read_action(a: xed_flag_action_enum_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup FLAGS    
/// test to see if a specific action is a write
    pub fn xed_flag_action_write_action(a: xed_flag_action_enum_t)
     -> xed_bool_t;
}
/// @ingroup FLAGS
/// A collection of #xed_flag_action_t's and unions of read and written flags
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_simple_flag_s {
    ///number of flag actions associated with this record
    pub nflags: u8,
    pub may_write: u8,
    pub must_write: u8,
    ///union of read flags
    pub read: xed_flag_set_t,
    /// union of written flags (includes undefined flags);
    pub written: xed_flag_set_t,
    /// union of undefined flags;
    pub undefined: xed_flag_set_t,
    pub fa_index: u16,
}
#[test]
fn bindgen_test_layout_xed_simple_flag_s() {
    assert_eq!(::std::mem::size_of::<xed_simple_flag_s>() , 20usize , concat !
               ( "Size of: " , stringify ! ( xed_simple_flag_s ) ));
    assert_eq! (::std::mem::align_of::<xed_simple_flag_s>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( xed_simple_flag_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_simple_flag_s ) ) . nflags as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_simple_flag_s ) ,
                "::" , stringify ! ( nflags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_simple_flag_s ) ) . may_write as *
                const _ as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_simple_flag_s ) ,
                "::" , stringify ! ( may_write ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_simple_flag_s ) ) . must_write as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_simple_flag_s ) ,
                "::" , stringify ! ( must_write ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_simple_flag_s ) ) . read as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_simple_flag_s ) ,
                "::" , stringify ! ( read ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_simple_flag_s ) ) . written as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_simple_flag_s ) ,
                "::" , stringify ! ( written ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_simple_flag_s ) ) . undefined as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_simple_flag_s ) ,
                "::" , stringify ! ( undefined ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_simple_flag_s ) ) . fa_index as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_simple_flag_s ) ,
                "::" , stringify ! ( fa_index ) ));
}
impl Clone for xed_simple_flag_s {
    fn clone(&self) -> Self { *self }
}
pub type xed_simple_flag_t = xed_simple_flag_s;
extern "C" {
    /// @ingroup FLAGS
/// returns the number of flag-actions
    pub fn xed_simple_flag_get_nflags(p: *const xed_simple_flag_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /// @ingroup FLAGS
/// return union of bits for read flags
    pub fn xed_simple_flag_get_read_flag_set(p: *const xed_simple_flag_t)
     -> *const xed_flag_set_t;
}
extern "C" {
    /// @ingroup FLAGS  
/// return union of bits for written flags
    pub fn xed_simple_flag_get_written_flag_set(p: *const xed_simple_flag_t)
     -> *const xed_flag_set_t;
}
extern "C" {
    /// @ingroup FLAGS  
/// return union of bits for undefined flags
    pub fn xed_simple_flag_get_undefined_flag_set(p: *const xed_simple_flag_t)
     -> *const xed_flag_set_t;
}
extern "C" {
    /// @ingroup FLAGS
/// Indicates the flags are only conditionally written. Usually MAY-writes
/// of the flags instructions that are dependent on a REP count.
    pub fn xed_simple_flag_get_may_write(p: *const xed_simple_flag_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup FLAGS
/// the flags always written
    pub fn xed_simple_flag_get_must_write(p: *const xed_simple_flag_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup FLAGS
/// return the specific flag-action. Very detailed low level information
    pub fn xed_simple_flag_get_flag_action(p: *const xed_simple_flag_t,
                                           i: ::std::os::raw::c_uint)
     -> *const xed_flag_action_t;
}
extern "C" {
    /// @ingroup FLAGS    
/// boolean test to see if flags are read, scans the flags
    pub fn xed_simple_flag_reads_flags(p: *const xed_simple_flag_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup FLAGS    
/// boolean test to see if flags are written, scans the flags
    pub fn xed_simple_flag_writes_flags(p: *const xed_simple_flag_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup FLAGS    
/// print the flags
    pub fn xed_simple_flag_print(p: *const xed_simple_flag_t,
                                 buf: *mut ::std::os::raw::c_char,
                                 buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_chip_enum_t {
    XED_CHIP_INVALID = 0,
    XED_CHIP_I86 = 1,
    XED_CHIP_I86FP = 2,
    XED_CHIP_I186 = 3,
    XED_CHIP_I186FP = 4,
    XED_CHIP_I286REAL = 5,
    XED_CHIP_I286 = 6,
    XED_CHIP_I2186FP = 7,
    XED_CHIP_I386REAL = 8,
    XED_CHIP_I386 = 9,
    XED_CHIP_I386FP = 10,
    XED_CHIP_I486REAL = 11,
    XED_CHIP_I486 = 12,
    XED_CHIP_PENTIUMREAL = 13,
    XED_CHIP_PENTIUM = 14,
    XED_CHIP_QUARK = 15,
    XED_CHIP_PENTIUMMMXREAL = 16,
    XED_CHIP_PENTIUMMMX = 17,
    XED_CHIP_ALLREAL = 18,
    XED_CHIP_PENTIUMPRO = 19,
    XED_CHIP_PENTIUM2 = 20,
    XED_CHIP_PENTIUM3 = 21,
    XED_CHIP_PENTIUM4 = 22,
    XED_CHIP_P4PRESCOTT = 23,
    XED_CHIP_P4PRESCOTT_NOLAHF = 24,
    XED_CHIP_P4PRESCOTT_VTX = 25,
    XED_CHIP_CORE2 = 26,
    XED_CHIP_PENRYN = 27,
    XED_CHIP_PENRYN_E = 28,
    XED_CHIP_NEHALEM = 29,
    XED_CHIP_WESTMERE = 30,
    XED_CHIP_BONNELL = 31,
    XED_CHIP_SALTWELL = 32,
    XED_CHIP_SILVERMONT = 33,
    XED_CHIP_AMD = 34,
    XED_CHIP_GOLDMONT = 35,
    XED_CHIP_SANDYBRIDGE = 36,
    XED_CHIP_IVYBRIDGE = 37,
    XED_CHIP_HASWELL = 38,
    XED_CHIP_BROADWELL = 39,
    XED_CHIP_SKYLAKE = 40,
    XED_CHIP_SKYLAKE_SERVER = 41,
    XED_CHIP_MEMORY_FUTURE = 42,
    XED_CHIP_FUTURE = 43,
    XED_CHIP_KNL = 44,
    XED_CHIP_KNM = 45,
    XED_CHIP_AVX512_FUTURE = 46,
    XED_CHIP_ALL = 47,
    XED_CHIP_LAST = 48,
}
extern "C" {
    pub fn str2xed_chip_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_chip_enum_t;
}
extern "C" {
    pub fn xed_chip_enum_t2str(p: xed_chip_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_chip_enum_t_last() -> xed_chip_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_operand_element_type_enum_t {
    XED_OPERAND_ELEMENT_TYPE_INVALID = 0,
    XED_OPERAND_ELEMENT_TYPE_UINT = 1,
    XED_OPERAND_ELEMENT_TYPE_INT = 2,
    XED_OPERAND_ELEMENT_TYPE_SINGLE = 3,
    XED_OPERAND_ELEMENT_TYPE_DOUBLE = 4,
    XED_OPERAND_ELEMENT_TYPE_LONGDOUBLE = 5,
    XED_OPERAND_ELEMENT_TYPE_LONGBCD = 6,
    XED_OPERAND_ELEMENT_TYPE_STRUCT = 7,
    XED_OPERAND_ELEMENT_TYPE_VARIABLE = 8,
    XED_OPERAND_ELEMENT_TYPE_FLOAT16 = 9,
    XED_OPERAND_ELEMENT_TYPE_LAST = 10,
}
extern "C" {
    pub fn str2xed_operand_element_type_enum_t(s:
                                                   *const ::std::os::raw::c_char)
     -> xed_operand_element_type_enum_t;
}
extern "C" {
    pub fn xed_operand_element_type_enum_t2str(p:
                                                   xed_operand_element_type_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_operand_element_type_enum_t_last()
     -> xed_operand_element_type_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_error_enum_t {
    XED_ERROR_NONE = 0,
    XED_ERROR_BUFFER_TOO_SHORT = 1,
    XED_ERROR_GENERAL_ERROR = 2,
    XED_ERROR_INVALID_FOR_CHIP = 3,
    XED_ERROR_BAD_REGISTER = 4,
    XED_ERROR_BAD_LOCK_PREFIX = 5,
    XED_ERROR_BAD_REP_PREFIX = 6,
    XED_ERROR_BAD_LEGACY_PREFIX = 7,
    XED_ERROR_BAD_REX_PREFIX = 8,
    XED_ERROR_BAD_EVEX_UBIT = 9,
    XED_ERROR_BAD_MAP = 10,
    XED_ERROR_BAD_EVEX_V_PRIME = 11,
    XED_ERROR_NO_OUTPUT_POINTER = 12,
    XED_ERROR_NO_AGEN_CALL_BACK_REGISTERED = 13,
    XED_ERROR_BAD_MEMOP_INDEX = 14,
    XED_ERROR_CALLBACK_PROBLEM = 15,
    XED_ERROR_GATHER_REGS = 16,
    XED_ERROR_INSTR_TOO_LONG = 17,
    XED_ERROR_INVALID_MODE = 18,
    XED_ERROR_LAST = 19,
}
extern "C" {
    pub fn str2xed_error_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_error_enum_t;
}
extern "C" {
    pub fn xed_error_enum_t2str(p: xed_error_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_error_enum_t_last() -> xed_error_enum_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_operand_storage_s {
    pub agen: u8,
    pub amd3dnow: u8,
    pub asz: u8,
    pub bcrc: u8,
    pub cet: u8,
    pub df32: u8,
    pub df64: u8,
    pub dummy: u8,
    pub encoder_preferred: u8,
    pub evexrr: u8,
    pub has_sib: u8,
    pub ild_f2: u8,
    pub ild_f3: u8,
    pub imm0: u8,
    pub imm0signed: u8,
    pub imm1: u8,
    pub lock: u8,
    pub lzcnt: u8,
    pub mem0: u8,
    pub mem1: u8,
    pub modep5: u8,
    pub modep55c: u8,
    pub mode_first_prefix: u8,
    pub mpxmode: u8,
    pub needrex: u8,
    pub norex: u8,
    pub no_scale_disp8: u8,
    pub osz: u8,
    pub out_of_bytes: u8,
    pub p4: u8,
    pub prefix66: u8,
    pub ptr: u8,
    pub realmode: u8,
    pub relbr: u8,
    pub rex: u8,
    pub rexb: u8,
    pub rexr: u8,
    pub rexrr: u8,
    pub rexw: u8,
    pub rexx: u8,
    pub sae: u8,
    pub sib: u8,
    pub skip_osz: u8,
    pub tzcnt: u8,
    pub ubit: u8,
    pub using_default_segment0: u8,
    pub using_default_segment1: u8,
    pub vexdest3: u8,
    pub vexdest4: u8,
    pub vex_c4: u8,
    pub zeroing: u8,
    pub default_seg: u8,
    pub easz: u8,
    pub eosz: u8,
    pub first_f2f3: u8,
    pub has_modrm: u8,
    pub last_f2f3: u8,
    pub llrc: u8,
    pub mod_: u8,
    pub mode: u8,
    pub rep: u8,
    pub sibscale: u8,
    pub smode: u8,
    pub vex_prefix: u8,
    pub vl: u8,
    pub hint: u8,
    pub mask: u8,
    pub reg: u8,
    pub rm: u8,
    pub roundc: u8,
    pub seg_ovd: u8,
    pub sibbase: u8,
    pub sibindex: u8,
    pub srm: u8,
    pub vexdest210: u8,
    pub vexvalid: u8,
    pub error: u8,
    pub esrc: u8,
    pub map: u8,
    pub nelem: u8,
    pub scale: u8,
    pub type_: u8,
    pub bcast: u8,
    pub chip: u8,
    pub need_memdisp: u8,
    pub brdisp_width: u8,
    pub disp_width: u8,
    pub ild_seg: u8,
    pub imm1_bytes: u8,
    pub imm_width: u8,
    pub max_bytes: u8,
    pub modrm_byte: u8,
    pub nominal_opcode: u8,
    pub nprefixes: u8,
    pub nrexes: u8,
    pub nseg_prefixes: u8,
    pub pos_disp: u8,
    pub pos_imm: u8,
    pub pos_imm1: u8,
    pub pos_modrm: u8,
    pub pos_nominal_opcode: u8,
    pub pos_sib: u8,
    pub uimm1: u8,
    pub base0: u16,
    pub base1: u16,
    pub element_size: u16,
    pub index: u16,
    pub outreg: u16,
    pub reg0: u16,
    pub reg1: u16,
    pub reg2: u16,
    pub reg3: u16,
    pub reg4: u16,
    pub reg5: u16,
    pub reg6: u16,
    pub reg7: u16,
    pub reg8: u16,
    pub seg0: u16,
    pub seg1: u16,
    pub iclass: u16,
    pub mem_width: u16,
    pub disp: u64,
    pub uimm0: u64,
}
#[test]
fn bindgen_test_layout_xed_operand_storage_s() {
    assert_eq!(::std::mem::size_of::<xed_operand_storage_s>() , 160usize ,
               concat ! ( "Size of: " , stringify ! ( xed_operand_storage_s )
               ));
    assert_eq! (::std::mem::align_of::<xed_operand_storage_s>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( xed_operand_storage_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . agen as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( agen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . amd3dnow as *
                const _ as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( amd3dnow ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . asz as *
                const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( asz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . bcrc as *
                const _ as usize } , 3usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( bcrc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . cet as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( cet ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . df32 as *
                const _ as usize } , 5usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( df32 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . df64 as *
                const _ as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( df64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . dummy as *
                const _ as usize } , 7usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( dummy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) .
                encoder_preferred as * const _ as usize } , 8usize , concat !
                (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( encoder_preferred ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . evexrr as *
                const _ as usize } , 9usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( evexrr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . has_sib as *
                const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( has_sib ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . ild_f2 as *
                const _ as usize } , 11usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( ild_f2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . ild_f3 as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( ild_f3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . imm0 as *
                const _ as usize } , 13usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( imm0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . imm0signed as
                * const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( imm0signed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . imm1 as *
                const _ as usize } , 15usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( imm1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . lock as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . lzcnt as *
                const _ as usize } , 17usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( lzcnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . mem0 as *
                const _ as usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( mem0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . mem1 as *
                const _ as usize } , 19usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( mem1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . modep5 as *
                const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( modep5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . modep55c as *
                const _ as usize } , 21usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( modep55c ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) .
                mode_first_prefix as * const _ as usize } , 22usize , concat !
                (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( mode_first_prefix ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . mpxmode as *
                const _ as usize } , 23usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( mpxmode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . needrex as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( needrex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . norex as *
                const _ as usize } , 25usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( norex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) .
                no_scale_disp8 as * const _ as usize } , 26usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( no_scale_disp8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . osz as *
                const _ as usize } , 27usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( osz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . out_of_bytes
                as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( out_of_bytes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . p4 as * const
                _ as usize } , 29usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( p4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . prefix66 as *
                const _ as usize } , 30usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( prefix66 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . ptr as *
                const _ as usize } , 31usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . realmode as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( realmode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . relbr as *
                const _ as usize } , 33usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( relbr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . rex as *
                const _ as usize } , 34usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( rex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . rexb as *
                const _ as usize } , 35usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( rexb ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . rexr as *
                const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( rexr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . rexrr as *
                const _ as usize } , 37usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( rexrr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . rexw as *
                const _ as usize } , 38usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( rexw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . rexx as *
                const _ as usize } , 39usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( rexx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . sae as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( sae ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . sib as *
                const _ as usize } , 41usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( sib ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . skip_osz as *
                const _ as usize } , 42usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( skip_osz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . tzcnt as *
                const _ as usize } , 43usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( tzcnt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . ubit as *
                const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( ubit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) .
                using_default_segment0 as * const _ as usize } , 45usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( using_default_segment0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) .
                using_default_segment1 as * const _ as usize } , 46usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( using_default_segment1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . vexdest3 as *
                const _ as usize } , 47usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( vexdest3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . vexdest4 as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( vexdest4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . vex_c4 as *
                const _ as usize } , 49usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( vex_c4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . zeroing as *
                const _ as usize } , 50usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( zeroing ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . default_seg
                as * const _ as usize } , 51usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( default_seg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . easz as *
                const _ as usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( easz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . eosz as *
                const _ as usize } , 53usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( eosz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . first_f2f3 as
                * const _ as usize } , 54usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( first_f2f3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . has_modrm as
                * const _ as usize } , 55usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( has_modrm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . last_f2f3 as
                * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( last_f2f3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . llrc as *
                const _ as usize } , 57usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( llrc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . mod_ as *
                const _ as usize } , 58usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( mod_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . mode as *
                const _ as usize } , 59usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . rep as *
                const _ as usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( rep ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . sibscale as *
                const _ as usize } , 61usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( sibscale ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . smode as *
                const _ as usize } , 62usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( smode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . vex_prefix as
                * const _ as usize } , 63usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( vex_prefix ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . vl as * const
                _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( vl ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . hint as *
                const _ as usize } , 65usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( hint ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . mask as *
                const _ as usize } , 66usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . reg as *
                const _ as usize } , 67usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( reg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . rm as * const
                _ as usize } , 68usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( rm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . roundc as *
                const _ as usize } , 69usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( roundc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . seg_ovd as *
                const _ as usize } , 70usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( seg_ovd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . sibbase as *
                const _ as usize } , 71usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( sibbase ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . sibindex as *
                const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( sibindex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . srm as *
                const _ as usize } , 73usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( srm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . vexdest210 as
                * const _ as usize } , 74usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( vexdest210 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . vexvalid as *
                const _ as usize } , 75usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( vexvalid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . error as *
                const _ as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( error ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . esrc as *
                const _ as usize } , 77usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( esrc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . map as *
                const _ as usize } , 78usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( map ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . nelem as *
                const _ as usize } , 79usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( nelem ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . scale as *
                const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( scale ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . type_ as *
                const _ as usize } , 81usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . bcast as *
                const _ as usize } , 82usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( bcast ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . chip as *
                const _ as usize } , 83usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( chip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . need_memdisp
                as * const _ as usize } , 84usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( need_memdisp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . brdisp_width
                as * const _ as usize } , 85usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( brdisp_width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . disp_width as
                * const _ as usize } , 86usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( disp_width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . ild_seg as *
                const _ as usize } , 87usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( ild_seg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . imm1_bytes as
                * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( imm1_bytes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . imm_width as
                * const _ as usize } , 89usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( imm_width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . max_bytes as
                * const _ as usize } , 90usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( max_bytes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . modrm_byte as
                * const _ as usize } , 91usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( modrm_byte ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) .
                nominal_opcode as * const _ as usize } , 92usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( nominal_opcode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . nprefixes as
                * const _ as usize } , 93usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( nprefixes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . nrexes as *
                const _ as usize } , 94usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( nrexes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . nseg_prefixes
                as * const _ as usize } , 95usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( nseg_prefixes ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . pos_disp as *
                const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( pos_disp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . pos_imm as *
                const _ as usize } , 97usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( pos_imm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . pos_imm1 as *
                const _ as usize } , 98usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( pos_imm1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . pos_modrm as
                * const _ as usize } , 99usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( pos_modrm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) .
                pos_nominal_opcode as * const _ as usize } , 100usize , concat
                ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( pos_nominal_opcode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . pos_sib as *
                const _ as usize } , 101usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( pos_sib ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . uimm1 as *
                const _ as usize } , 102usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( uimm1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . base0 as *
                const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( base0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . base1 as *
                const _ as usize } , 106usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( base1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . element_size
                as * const _ as usize } , 108usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( element_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . index as *
                const _ as usize } , 110usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( index ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . outreg as *
                const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( outreg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . reg0 as *
                const _ as usize } , 114usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( reg0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . reg1 as *
                const _ as usize } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( reg1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . reg2 as *
                const _ as usize } , 118usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( reg2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . reg3 as *
                const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( reg3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . reg4 as *
                const _ as usize } , 122usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( reg4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . reg5 as *
                const _ as usize } , 124usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( reg5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . reg6 as *
                const _ as usize } , 126usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( reg6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . reg7 as *
                const _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( reg7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . reg8 as *
                const _ as usize } , 130usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( reg8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . seg0 as *
                const _ as usize } , 132usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( seg0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . seg1 as *
                const _ as usize } , 134usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( seg1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . iclass as *
                const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( iclass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . mem_width as
                * const _ as usize } , 138usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( mem_width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . disp as *
                const _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( disp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_operand_storage_s ) ) . uimm0 as *
                const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_operand_storage_s )
                , "::" , stringify ! ( uimm0 ) ));
}
impl Clone for xed_operand_storage_s {
    fn clone(&self) -> Self { *self }
}
pub type xed_operand_storage_t = xed_operand_storage_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xed_encoder_vars_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xed_decoder_vars_s {
    _unused: [u8; 0],
}
pub type xed_decoded_inst_t = xed_decoded_inst_s;
pub type xed_operand_values_t = xed_decoded_inst_t;
/// @ingroup ISASET
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_chip_features_t {
    pub f: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_xed_chip_features_t() {
    assert_eq!(::std::mem::size_of::<xed_chip_features_t>() , 32usize , concat
               ! ( "Size of: " , stringify ! ( xed_chip_features_t ) ));
    assert_eq! (::std::mem::align_of::<xed_chip_features_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( xed_chip_features_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_chip_features_t ) ) . f as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_chip_features_t ) ,
                "::" , stringify ! ( f ) ));
}
impl Clone for xed_chip_features_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    /// fill in the contents of p with the vector of chip features.
    pub fn xed_get_chip_features(p: *mut xed_chip_features_t,
                                 chip: xed_chip_enum_t);
}
extern "C" {
    /// present = 1 to turn the feature on. present=0 to remove the feature.
    pub fn xed_modify_chip_features(p: *mut xed_chip_features_t,
                                    isa_set: xed_isa_set_enum_t,
                                    present: xed_bool_t);
}
extern "C" {
    /// This is the main interface to the decoder.
///  @param xedd the decoded instruction of type #xed_decoded_inst_t . Mode/state sent in via xedd; See the #xed_state_t
///  @param itext the pointer to the array of instruction text bytes
///  @param bytes  the length of the itext input array. 1 to 15 bytes, anything more is ignored.
///  @return #xed_error_enum_t indicating success (#XED_ERROR_NONE) or failure. Note failure can be due to not
///  enough bytes in the input array.
///
/// The maximum instruction is 15B and XED will tell you how long the
/// actual instruction is via an API function call
/// xed_decoded_inst_get_length().  However, it is not always safe or
/// advisable for XED to read 15 bytes if the decode location is at the
/// boundary of some sort of protection limit. For example, if one is
/// decoding near the end of a page and the XED user does not want to cause
/// extra page faults, one might send in the number of bytes that would
/// stop at the page boundary. In this case, XED might not be able to
/// decode the instruction and would return an error. The XED user would
/// then have to decide if it was safe to touch the next page and try again
/// to decode with more bytes.  Also sometimes the user process does not
/// have read access to the next page and this allows the user to prevent
/// XED from causing process termination by limiting the memory range that
/// XED will access.  
///
/// @ingroup DEC
    pub fn xed_decode(xedd: *mut xed_decoded_inst_t, itext: *const u8,
                      bytes: ::std::os::raw::c_uint) -> xed_error_enum_t;
}
extern "C" {
    /// @ingroup DEC
/// See #xed_decode(). This version of the decode API adds a CPUID feature
/// vector to support restricting decode based on both a specified chip via
/// #xed_decoded_inst_set_input_chip() and a modify-able cpuid feature
/// vector obtained from #xed_get_chip_features().
    pub fn xed_decode_with_features(xedd: *mut xed_decoded_inst_t,
                                    itext: *const u8,
                                    bytes: ::std::os::raw::c_uint,
                                    features: *mut xed_chip_features_t)
     -> xed_error_enum_t;
}
extern "C" {
    pub fn xed3_get_generic_operand(d: *const xed_decoded_inst_t,
                                    operand: xed_operand_enum_t,
                                    ret_arg: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn xed3_set_generic_operand(d: *mut xed_decoded_inst_t,
                                    operand: xed_operand_enum_t, val: u32);
}
extern "C" {
    /// This function just does instruction length decoding.
/// It does not return a fully decoded instruction.
///  @param xedd  the decoded instruction of type #xed_decoded_inst_t .
///               Mode/state sent in via xedd; See the #xed_state_t .
///  @param itext the pointer to the array of instruction text bytes
///  @param bytes the length of the itext input array.
///              1 to 15 bytes, anything more is ignored.
/// @return #xed_error_enum_t indicating success (#XED_ERROR_NONE) or
///       failure.
/// Only two failure codes are valid for this function:
///  #XED_ERROR_BUFFER_TOO_SHORT and #XED_ERROR_GENERAL_ERROR.
/// In general this function cannot tell if the instruction is valid or
/// not. For valid instructions, XED can figure out if enough bytes were
/// provided to decode the instruction. If not enough were provided,
/// XED returns #XED_ERROR_BUFFER_TOO_SHORT. 
/// From this function, the #XED_ERROR_GENERAL_ERROR is an indication
/// that XED could not decode the instruction's length because  the
/// instruction was so invalid that even its length
/// may across implmentations.
///
/// @ingroup DEC
    pub fn xed_ild_decode(xedd: *mut xed_decoded_inst_t, itext: *const u8,
                          bytes: ::std::os::raw::c_uint) -> xed_error_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_address_width_enum_t {
    XED_ADDRESS_WIDTH_INVALID = 0,
    XED_ADDRESS_WIDTH_16b = 2,
    XED_ADDRESS_WIDTH_32b = 4,
    XED_ADDRESS_WIDTH_64b = 8,
    XED_ADDRESS_WIDTH_LAST = 9,
}
extern "C" {
    pub fn str2xed_address_width_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_address_width_enum_t;
}
extern "C" {
    pub fn xed_address_width_enum_t2str(p: xed_address_width_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_address_width_enum_t_last() -> xed_address_width_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_machine_mode_enum_t {
    XED_MACHINE_MODE_INVALID = 0,
    XED_MACHINE_MODE_LONG_64 = 1,
    XED_MACHINE_MODE_LONG_COMPAT_32 = 2,
    XED_MACHINE_MODE_LONG_COMPAT_16 = 3,
    XED_MACHINE_MODE_LEGACY_32 = 4,
    XED_MACHINE_MODE_LEGACY_16 = 5,
    XED_MACHINE_MODE_REAL_16 = 6,
    XED_MACHINE_MODE_LAST = 7,
}
extern "C" {
    pub fn str2xed_machine_mode_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_machine_mode_enum_t;
}
extern "C" {
    pub fn xed_machine_mode_enum_t2str(p: xed_machine_mode_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_machine_mode_enum_t_last() -> xed_machine_mode_enum_t;
}
/// Encapsulates machine modes for decoder/encoder requests.
/// It specifies the machine operating mode as a 
/// #xed_machine_mode_enum_t 
/// for decoding and encoding. The machine mode corresponds to the default
/// data operand width for that mode. For all modes other than the 64b long
/// mode (XED_MACHINE_MODE_LONG_64), a default addressing width, and a
/// stack addressing width must be supplied of type
/// #xed_address_width_enum_t .  @ingroup INIT
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_state_s {
    /// real architected machine modes
    pub mmode: xed_machine_mode_enum_t,
    /// for 16b/32b modes
    pub stack_addr_width: xed_address_width_enum_t,
}
#[test]
fn bindgen_test_layout_xed_state_s() {
    assert_eq!(::std::mem::size_of::<xed_state_s>() , 8usize , concat ! (
               "Size of: " , stringify ! ( xed_state_s ) ));
    assert_eq! (::std::mem::align_of::<xed_state_s>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( xed_state_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_state_s ) ) . mmode as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_state_s ) , "::" ,
                stringify ! ( mmode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_state_s ) ) . stack_addr_width as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_state_s ) , "::" ,
                stringify ! ( stack_addr_width ) ));
}
impl Clone for xed_state_s {
    fn clone(&self) -> Self { *self }
}
pub type xed_state_t = xed_state_s;
extern "C" {
    /// @ingroup INIT
    pub fn xed_state_print(p: *const xed_state_t,
                           buf: *mut ::std::os::raw::c_char,
                           buflen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_syntax_enum_t {
    XED_SYNTAX_INVALID = 0,
    XED_SYNTAX_XED = 1,
    XED_SYNTAX_ATT = 2,
    XED_SYNTAX_INTEL = 3,
    XED_SYNTAX_LAST = 4,
}
extern "C" {
    pub fn str2xed_syntax_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_syntax_enum_t;
}
extern "C" {
    pub fn xed_syntax_enum_t2str(p: xed_syntax_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_syntax_enum_t_last() -> xed_syntax_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_reg_class_enum_t {
    XED_REG_CLASS_INVALID = 0,
    XED_REG_CLASS_BNDCFG = 1,
    XED_REG_CLASS_BNDSTAT = 2,
    XED_REG_CLASS_BOUND = 3,
    XED_REG_CLASS_CR = 4,
    XED_REG_CLASS_DR = 5,
    XED_REG_CLASS_FLAGS = 6,
    XED_REG_CLASS_GPR = 7,
    XED_REG_CLASS_GPR16 = 8,
    XED_REG_CLASS_GPR32 = 9,
    XED_REG_CLASS_GPR64 = 10,
    XED_REG_CLASS_GPR8 = 11,
    XED_REG_CLASS_IP = 12,
    XED_REG_CLASS_MASK = 13,
    XED_REG_CLASS_MMX = 14,
    XED_REG_CLASS_MSR = 15,
    XED_REG_CLASS_MXCSR = 16,
    XED_REG_CLASS_PSEUDO = 17,
    XED_REG_CLASS_PSEUDOX87 = 18,
    XED_REG_CLASS_SR = 19,
    XED_REG_CLASS_TMP = 20,
    XED_REG_CLASS_X87 = 21,
    XED_REG_CLASS_XCR = 22,
    XED_REG_CLASS_XMM = 23,
    XED_REG_CLASS_YMM = 24,
    XED_REG_CLASS_ZMM = 25,
    XED_REG_CLASS_LAST = 26,
}
extern "C" {
    pub fn str2xed_reg_class_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_reg_class_enum_t;
}
extern "C" {
    pub fn xed_reg_class_enum_t2str(p: xed_reg_class_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_reg_class_enum_t_last() -> xed_reg_class_enum_t;
}
extern "C" {
    /// Returns the register class of the given input register.
///@ingroup REGINTFC
    pub fn xed_reg_class(r: xed_reg_enum_t) -> xed_reg_class_enum_t;
}
extern "C" {
    /// Returns the specific width GPR reg class (like XED_REG_CLASS_GPR32 or
///  XED_REG_CLASS_GPR64)
///  for a given GPR register. Or XED_REG_INVALID if not a GPR.
///@ingroup REGINTFC
    pub fn xed_gpr_reg_class(r: xed_reg_enum_t) -> xed_reg_class_enum_t;
}
extern "C" {
    /// Returns the largest enclosing register for any kind of register; This
/// is mostly useful for GPRs. (64b mode assumed)
///@ingroup REGINTFC
    pub fn xed_get_largest_enclosing_register(r: xed_reg_enum_t)
     -> xed_reg_enum_t;
}
extern "C" {
    /// Returns the largest enclosing register for any kind of register; This
/// is mostly useful for GPRs in 32b mode.
///@ingroup REGINTFC
    pub fn xed_get_largest_enclosing_register32(r: xed_reg_enum_t)
     -> xed_reg_enum_t;
}
extern "C" {
    /// Returns the  width, in bits, of the named register. 32b mode
///@ingroup REGINTFC
    pub fn xed_get_register_width_bits(r: xed_reg_enum_t) -> u32;
}
extern "C" {
    /// Returns the  width, in bits, of the named register. 64b mode.
///@ingroup REGINTFC
    pub fn xed_get_register_width_bits64(r: xed_reg_enum_t) -> u32;
}
extern "C" {
    /// @ingroup OPERANDS
/// Initializes operand structure
    pub fn xed_operand_values_init(p: *mut xed_operand_values_t);
}
extern "C" {
    /// @ingroup OPERANDS
/// Initializes the operand storage and sets mode values.
    pub fn xed_operand_values_init_set_mode(p: *mut xed_operand_values_t,
                                            dstate: *const xed_state_t);
}
extern "C" {
    /// @ingroup OPERANDS
/// Set the mode values
    pub fn xed_operand_values_set_mode(p: *mut xed_operand_values_t,
                                       dstate: *const xed_state_t);
}
extern "C" {
    /// @ingroup OPERANDS
/// Initializes dst operand structure but preserves the existing
/// MODE/SMODE values from the src operand structure.
    pub fn xed_operand_values_init_keep_mode(dst: *mut xed_operand_values_t,
                                             src:
                                                 *const xed_operand_values_t);
}
extern "C" {
    /// @ingroup OPERANDS
/// Dump all the information about the operands to buf.
    pub fn xed_operand_values_dump(ov: *const xed_operand_values_t,
                                   buf: *mut ::std::os::raw::c_char,
                                   buflen: ::std::os::raw::c_int);
}
extern "C" {
    /// @ingroup OPERANDS
/// More tersely dump all the information about the operands to buf.
    pub fn xed_operand_values_print_short(ov: *const xed_operand_values_t,
                                          buf: *mut ::std::os::raw::c_char,
                                          buflen: ::std::os::raw::c_int);
}
extern "C" {
    /// @ingroup OPERANDS    
/// True if the instruction has a real REP prefix. This returns false if
/// there is no F2/F3 prefix or the F2/F3 prefix is used to refine the
/// opcode as in some SSE operations.
    pub fn xed_operand_values_has_real_rep(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// True if the instruction as a F3 REP prefix (used for opcode refining,
/// for rep for string operations, or ignored).
    pub fn xed_operand_values_has_rep_prefix(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// True if the instruction as a F2 REP prefix (used for opcode refining,
/// for rep for string operations, or ignored).
    pub fn xed_operand_values_has_repne_prefix(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// DO NOT USE - DEPRECATED. The  correct way to do remove a rep prefix is by changing the iclass
    pub fn xed_operand_values_clear_rep(p: *mut xed_operand_values_t);
}
extern "C" {
    /// @ingroup OPERANDS    
/// Returns true if the memory operation has atomic read-modify-write
/// semantics. An XCHG accessing memory is atomic with or without a
/// LOCK prefix.
    pub fn xed_operand_values_get_atomic(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// Returns true if the memory operation has a valid lock prefix.
    pub fn xed_operand_values_has_lock_prefix(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS
/// Returns true if the instruction could be re-encoded to have a lock
/// prefix but does not have one currently.
    pub fn xed_operand_values_lockable(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// Indicates if the default segment is being used.
/// @param[in] p   the pointer to the #xed_operand_values_t structure.
/// @param[in] i   0 or 1, indicating which memory operation.
/// @return true if the memory operation is using the default segment for
/// the associated addressing mode base register.
    pub fn xed_operand_values_using_default_segment(p:
                                                        *const xed_operand_values_t,
                                                    i: ::std::os::raw::c_uint)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// Returns The effective operand width in bits: 16/32/64. Note this is not
/// the same as the width of the operand which can vary! For 8 bit
/// operations, the effective operand width is the machine mode's default
/// width. If you also want to identify byte operations use the higher
/// level function #xed_decoded_inst_get_operand_width() .
    pub fn xed_operand_values_get_effective_operand_width(p:
                                                              *const xed_operand_values_t)
     -> u32;
}
extern "C" {
    /// @ingroup OPERANDS    
/// Returns The effective address width in bits: 16/32/64. 
    pub fn xed_operand_values_get_effective_address_width(p:
                                                              *const xed_operand_values_t)
     -> u32;
}
extern "C" {
    /// @ingroup OPERANDS    
/// Returns The stack address width in bits: 16/32/64. 
    pub fn xed_operand_values_get_stack_address_width(p:
                                                          *const xed_operand_values_t)
     -> u32;
}
extern "C" {
    /// @ingroup OPERANDS    
/// True if there is a memory displacement
    pub fn xed_operand_values_has_memory_displacement(p:
                                                          *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// True if there is a branch displacement
    pub fn xed_operand_values_has_branch_displacement(p:
                                                          *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// True if there is a memory or branch displacement
    pub fn xed_operand_values_has_displacement(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// Deprecated. Compatibility function for XED0. See has_memory_displacement().
    pub fn xed_operand_values_get_displacement_for_memop(p:
                                                             *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// Return true if there is an immediate operand
    pub fn xed_operand_values_has_immediate(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// ALIAS for has_displacement().
/// Deprecated. See has_memory_displacement() and
/// has_branch_displacement().
    pub fn xed_operand_values_has_disp(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// This indicates the presence of a 67 prefix.
    pub fn xed_operand_values_has_address_size_prefix(p:
                                                          *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// This does not include the cases when the 66 prefix is used an
/// opcode-refining prefix for multibyte opcodes.
    pub fn xed_operand_values_has_operand_size_prefix(p:
                                                          *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// This includes any 66 prefix that shows up even if it is ignored.
    pub fn xed_operand_values_has_66_prefix(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// This instruction has a REX prefix with the W bit set.
    pub fn xed_operand_values_has_rexw_prefix(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_has_segment_prefix(p:
                                                     *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// Return the segment prefix, if any, as a #xed_reg_enum_t value.
    pub fn xed_operand_values_segment_prefix(p: *const xed_operand_values_t)
     -> xed_reg_enum_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_is_prefetch(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_long_mode(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_real_mode(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_accesses_memory(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_number_of_memory_operands(p:
                                                            *const xed_operand_values_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /// return bytes
/// @ingroup OPERANDS    
    pub fn xed_operand_values_get_memory_operand_length(p:
                                                            *const xed_operand_values_t,
                                                        memop_idx:
                                                            ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_base_reg(p: *const xed_operand_values_t,
                                           memop_idx: ::std::os::raw::c_uint)
     -> xed_reg_enum_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_index_reg(p: *const xed_operand_values_t,
                                            memop_idx: ::std::os::raw::c_uint)
     -> xed_reg_enum_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_seg_reg(p: *const xed_operand_values_t,
                                          memop_idx: ::std::os::raw::c_uint)
     -> xed_reg_enum_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_scale(p: *const xed_operand_values_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /// @ingroup OPERANDS    
/// Returns true if the instruction access memory but without using a MODRM
/// byte limiting its addressing modes.
    pub fn xed_operand_values_memop_without_modrm(p:
                                                      *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS
/// Returns true if the instruction has a MODRM byte.
    pub fn xed_operand_values_has_modrm_byte(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS
/// Returns true if the instruction has a SIB byte.
    pub fn xed_operand_values_has_sib_byte(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_branch_not_taken_hint(p:
                                                        *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_branch_taken_hint(p:
                                                    *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_is_nop(p: *const xed_operand_values_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_immediate_int64(p:
                                                      *const xed_operand_values_t)
     -> i64;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_immediate_uint64(p:
                                                       *const xed_operand_values_t)
     -> u64;
}
extern "C" {
    /// @ingroup OPERANDS
/// Return true if the first immediate (IMM0) is signed
    pub fn xed_operand_values_get_immediate_is_signed(p:
                                                          *const xed_operand_values_t)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup OPERANDS    
/// Return the i'th byte of the immediate
    pub fn xed_operand_values_get_immediate_byte(p:
                                                     *const xed_operand_values_t,
                                                 i: ::std::os::raw::c_uint)
     -> u8;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_second_immediate(p:
                                                       *const xed_operand_values_t)
     -> u8;
}
extern "C" {
    /// @ingroup OPERANDS
/// Return the memory displacement width in BYTES
    pub fn xed_operand_values_get_memory_displacement_length(p:
                                                                 *const xed_operand_values_t)
     -> u32;
}
extern "C" {
    /// @ingroup OPERANDS
/// Return the memory displacement width in BITS
    pub fn xed_operand_values_get_memory_displacement_length_bits(p:
                                                                      *const xed_operand_values_t)
     -> u32;
}
extern "C" {
    /// @ingroup OPERANDS
/// Return the raw memory displacement width in BITS(ignores scaling)
    pub fn xed_operand_values_get_memory_displacement_length_bits_raw(p:
                                                                          *const xed_operand_values_t)
     -> u32;
}
extern "C" {
    /// Returns the potentially scaled value of the memory
/// displacement. Certain AVX512 memory displacements are scaled before
/// they are used.  @ingroup OPERANDS
    pub fn xed_operand_values_get_memory_displacement_int64(p:
                                                                *const xed_operand_values_t)
     -> i64;
}
extern "C" {
    /// Returns the unscaled (raw) memory displacement. Certain AVX512 memory
/// displacements are scaled before they are used.  @ingroup OPERANDS
    pub fn xed_operand_values_get_memory_displacement_int64_raw(p:
                                                                    *const xed_operand_values_t)
     -> i64;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_memory_displacement_byte(p:
                                                               *const xed_operand_values_t,
                                                           i:
                                                               ::std::os::raw::c_uint)
     -> u8;
}
extern "C" {
    /// @ingroup OPERANDS
/// Return the branch displacement width in bytes
    pub fn xed_operand_values_get_branch_displacement_length(p:
                                                                 *const xed_operand_values_t)
     -> u32;
}
extern "C" {
    /// @ingroup OPERANDS
/// Return the branch displacement width in bits
    pub fn xed_operand_values_get_branch_displacement_length_bits(p:
                                                                      *const xed_operand_values_t)
     -> u32;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_branch_displacement_int32(p:
                                                                *const xed_operand_values_t)
     -> i32;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_branch_displacement_byte(p:
                                                               *const xed_operand_values_t,
                                                           i:
                                                               ::std::os::raw::c_uint)
     -> u8;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_get_iclass(p: *const xed_operand_values_t)
     -> xed_iclass_enum_t;
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_zero_immediate(p: *mut xed_operand_values_t);
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_zero_branch_displacement(p:
                                                           *mut xed_operand_values_t);
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_zero_memory_displacement(p:
                                                           *mut xed_operand_values_t);
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_set_lock(p: *mut xed_operand_values_t);
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_zero_segment_override(p:
                                                        *mut xed_operand_values_t);
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_set_iclass(p: *mut xed_operand_values_t,
                                         iclass: xed_iclass_enum_t);
}
extern "C" {
    /// @ingroup OPERANDS
/// width is bits 8, 16, 32, 64
    pub fn xed_operand_values_set_effective_operand_width(p:
                                                              *mut xed_operand_values_t,
                                                          width:
                                                              ::std::os::raw::c_uint);
}
extern "C" {
    /// @ingroup OPERANDS
/// width is bits 16, 32, 64
    pub fn xed_operand_values_set_effective_address_width(p:
                                                              *mut xed_operand_values_t,
                                                          width:
                                                              ::std::os::raw::c_uint);
}
extern "C" {
    /// takes bytes, not bits, as an argument
/// @ingroup OPERANDS    
    pub fn xed_operand_values_set_memory_operand_length(p:
                                                            *mut xed_operand_values_t,
                                                        memop_length:
                                                            ::std::os::raw::c_uint);
}
extern "C" {
    /// @ingroup OPERANDS    
/// Set the memory displacement using a BYTES length
    pub fn xed_operand_values_set_memory_displacement(p:
                                                          *mut xed_operand_values_t,
                                                      x: i64,
                                                      len:
                                                          ::std::os::raw::c_uint);
}
extern "C" {
    /// @ingroup OPERANDS    
/// Set the memory displacement using a BITS length
    pub fn xed_operand_values_set_memory_displacement_bits(p:
                                                               *mut xed_operand_values_t,
                                                           x: i64,
                                                           len_bits:
                                                               ::std::os::raw::c_uint);
}
extern "C" {
    /// @ingroup OPERANDS    
/// Indicate that we have a relative branch.
    pub fn xed_operand_values_set_relbr(p: *mut xed_operand_values_t);
}
extern "C" {
    /// @ingroup OPERANDS    
/// Set the branch displacement using a BYTES length
    pub fn xed_operand_values_set_branch_displacement(p:
                                                          *mut xed_operand_values_t,
                                                      x: i32,
                                                      len:
                                                          ::std::os::raw::c_uint);
}
extern "C" {
    /// @ingroup OPERANDS    
/// Set the branch displacement using a BITS length
    pub fn xed_operand_values_set_branch_displacement_bits(p:
                                                               *mut xed_operand_values_t,
                                                           x: i32,
                                                           len_bits:
                                                               ::std::os::raw::c_uint);
}
extern "C" {
    /// @ingroup OPERANDS    
/// Set the signed immediate using a BYTES length
    pub fn xed_operand_values_set_immediate_signed(p:
                                                       *mut xed_operand_values_t,
                                                   x: i32,
                                                   bytes:
                                                       ::std::os::raw::c_uint);
}
extern "C" {
    /// @ingroup OPERANDS    
/// Set the signed immediate using a BITS length
    pub fn xed_operand_values_set_immediate_signed_bits(p:
                                                            *mut xed_operand_values_t,
                                                        x: i32,
                                                        bits:
                                                            ::std::os::raw::c_uint);
}
extern "C" {
    /// @ingroup OPERANDS    
/// Set the unsigned immediate using a BYTE length.
    pub fn xed_operand_values_set_immediate_unsigned(p:
                                                         *mut xed_operand_values_t,
                                                     x: u64,
                                                     bytes:
                                                         ::std::os::raw::c_uint);
}
extern "C" {
    /// @ingroup OPERANDS    
/// Set the unsigned immediate using a BIT length.
    pub fn xed_operand_values_set_immediate_unsigned_bits(p:
                                                              *mut xed_operand_values_t,
                                                          x: u64,
                                                          bits:
                                                              ::std::os::raw::c_uint);
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_set_base_reg(p: *mut xed_operand_values_t,
                                           memop_idx: ::std::os::raw::c_uint,
                                           new_base: xed_reg_enum_t);
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_set_seg_reg(p: *mut xed_operand_values_t,
                                          memop_idx: ::std::os::raw::c_uint,
                                          new_seg: xed_reg_enum_t);
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_set_index_reg(p: *mut xed_operand_values_t,
                                            memop_idx: ::std::os::raw::c_uint,
                                            new_index: xed_reg_enum_t);
}
extern "C" {
    /// @ingroup OPERANDS    
    pub fn xed_operand_values_set_scale(p: *mut xed_operand_values_t,
                                        memop_idx: xed_uint_t,
                                        new_scale: xed_uint_t);
}
extern "C" {
    /// @ingroup OPERANDS    
/// Set the operand storage field entry named 'operand_name' to the
/// register value specified by 'reg_name'.
    pub fn xed_operand_values_set_operand_reg(p: *mut xed_operand_values_t,
                                              operand_name:
                                                  xed_operand_enum_t,
                                              reg_name: xed_reg_enum_t);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_encoder_iforms_s {
    pub x_MEMDISPv: u32,
    pub x_SIBBASE_ENCODE_SIB1: u32,
    pub x_VEX_MAP_ENC: u32,
    pub x_SIB_NT: u32,
    pub x_UIMM8_1: u32,
    pub x_SIBBASE_ENCODE: u32,
    pub x_VEX_ESCVL_ENC: u32,
    pub x_PREFIX_ENC: u32,
    pub x_VEXED_REX: u32,
    pub x_REMOVE_SEGMENT: u32,
    pub x_VSIB_ENC: u32,
    pub x_EVEX_REXB_ENC: u32,
    pub x_MODRM_RM_ENCODE_EA64_SIB0: u32,
    pub x_VEX_REXXB_ENC: u32,
    pub x_EVEX_REXRR_ENC: u32,
    pub x_AVX512_EVEX_BYTE3_ENC: u32,
    pub x_EVEX_REXW_VVVV_ENC: u32,
    pub x_VEX_REG_ENC: u32,
    pub x_SIMM8: u32,
    pub x_XOP_MAP_ENC: u32,
    pub x_MODRM_RM_ENCODE_EA32_SIB0: u32,
    pub x_UIMM8: u32,
    pub x_MODRM_RM_ENCODE_EA16_SIB0: u32,
    pub x_XOP_REXXB_ENC: u32,
    pub x_EVEX_MAP_ENC: u32,
    pub x_MEMDISP8: u32,
    pub x_MODRM_RM_ENCODE: u32,
    pub x_REX_PREFIX_ENC: u32,
    pub x_UIMM16: u32,
    pub x_VEX_TYPE_ENC: u32,
    pub x_EVEX_UPP_ENC: u32,
    pub x_VEX_REXR_ENC: u32,
    pub x_BRDISP32: u32,
    pub x_MEMDISP32: u32,
    pub x_MEMDISP16: u32,
    pub x_SIBINDEX_ENCODE: u32,
    pub x_SE_IMM8: u32,
    pub x_UIMM32: u32,
    pub x_SIMMz: u32,
    pub x_UIMMv: u32,
    pub x_EVEX_62_REXR_ENC: u32,
    pub x_DISP_NT: u32,
    pub x_MODRM_MOD_ENCODE: u32,
    pub x_MEMDISP: u32,
    pub x_VSIB_ENC_BASE: u32,
    pub x_BRDISP8: u32,
    pub x_BRDISPz: u32,
    pub x_EVEX_REXX_ENC: u32,
    pub x_XOP_TYPE_ENC: u32,
}
#[test]
fn bindgen_test_layout_xed_encoder_iforms_s() {
    assert_eq!(::std::mem::size_of::<xed_encoder_iforms_s>() , 196usize ,
               concat ! ( "Size of: " , stringify ! ( xed_encoder_iforms_s )
               ));
    assert_eq! (::std::mem::align_of::<xed_encoder_iforms_s>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( xed_encoder_iforms_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_MEMDISPv as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_MEMDISPv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_SIBBASE_ENCODE_SIB1 as * const _ as usize } , 4usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_SIBBASE_ENCODE_SIB1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_VEX_MAP_ENC
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_VEX_MAP_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_SIB_NT as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_SIB_NT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_UIMM8_1 as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_UIMM8_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_SIBBASE_ENCODE as * const _ as usize } , 20usize , concat !
                (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_SIBBASE_ENCODE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_VEX_ESCVL_ENC as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_VEX_ESCVL_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_PREFIX_ENC
                as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_PREFIX_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_VEXED_REX as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_VEXED_REX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_REMOVE_SEGMENT as * const _ as usize } , 36usize , concat !
                (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_REMOVE_SEGMENT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_VSIB_ENC as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_VSIB_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_EVEX_REXB_ENC as * const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_EVEX_REXB_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_MODRM_RM_ENCODE_EA64_SIB0 as * const _ as usize } , 48usize
                , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_MODRM_RM_ENCODE_EA64_SIB0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_VEX_REXXB_ENC as * const _ as usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_VEX_REXXB_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_EVEX_REXRR_ENC as * const _ as usize } , 56usize , concat !
                (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_EVEX_REXRR_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_AVX512_EVEX_BYTE3_ENC as * const _ as usize } , 60usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_AVX512_EVEX_BYTE3_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_EVEX_REXW_VVVV_ENC as * const _ as usize } , 64usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_EVEX_REXW_VVVV_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_VEX_REG_ENC
                as * const _ as usize } , 68usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_VEX_REG_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_SIMM8 as *
                const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_SIMM8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_XOP_MAP_ENC
                as * const _ as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_XOP_MAP_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_MODRM_RM_ENCODE_EA32_SIB0 as * const _ as usize } , 80usize
                , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_MODRM_RM_ENCODE_EA32_SIB0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_UIMM8 as *
                const _ as usize } , 84usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_UIMM8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_MODRM_RM_ENCODE_EA16_SIB0 as * const _ as usize } , 88usize
                , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_MODRM_RM_ENCODE_EA16_SIB0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_XOP_REXXB_ENC as * const _ as usize } , 92usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_XOP_REXXB_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_EVEX_MAP_ENC
                as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_EVEX_MAP_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_MEMDISP8 as
                * const _ as usize } , 100usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_MEMDISP8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_MODRM_RM_ENCODE as * const _ as usize } , 104usize , concat
                ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_MODRM_RM_ENCODE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_REX_PREFIX_ENC as * const _ as usize } , 108usize , concat !
                (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_REX_PREFIX_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_UIMM16 as *
                const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_UIMM16 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_VEX_TYPE_ENC
                as * const _ as usize } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_VEX_TYPE_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_EVEX_UPP_ENC
                as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_EVEX_UPP_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_VEX_REXR_ENC
                as * const _ as usize } , 124usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_VEX_REXR_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_BRDISP32 as
                * const _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_BRDISP32 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_MEMDISP32 as
                * const _ as usize } , 132usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_MEMDISP32 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_MEMDISP16 as
                * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_MEMDISP16 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_SIBINDEX_ENCODE as * const _ as usize } , 140usize , concat
                ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_SIBINDEX_ENCODE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_SE_IMM8 as *
                const _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_SE_IMM8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_UIMM32 as *
                const _ as usize } , 148usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_UIMM32 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_SIMMz as *
                const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_SIMMz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_UIMMv as *
                const _ as usize } , 156usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_UIMMv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_EVEX_62_REXR_ENC as * const _ as usize } , 160usize , concat
                ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_EVEX_62_REXR_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_DISP_NT as *
                const _ as usize } , 164usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_DISP_NT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_MODRM_MOD_ENCODE as * const _ as usize } , 168usize , concat
                ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_MODRM_MOD_ENCODE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_MEMDISP as *
                const _ as usize } , 172usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_MEMDISP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_VSIB_ENC_BASE as * const _ as usize } , 176usize , concat !
                (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_VSIB_ENC_BASE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_BRDISP8 as *
                const _ as usize } , 180usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_BRDISP8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_BRDISPz as *
                const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_BRDISPz ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) .
                x_EVEX_REXX_ENC as * const _ as usize } , 188usize , concat !
                (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_EVEX_REXX_ENC ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_iforms_s ) ) . x_XOP_TYPE_ENC
                as * const _ as usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_iforms_s )
                , "::" , stringify ! ( x_XOP_TYPE_ENC ) ));
}
impl Clone for xed_encoder_iforms_s {
    fn clone(&self) -> Self { *self }
}
pub type xed_encoder_iforms_t = xed_encoder_iforms_s;
/// @ingroup ENC
pub type xed_encoder_request_s = xed_decoded_inst_s;
/// @ingroup ENC
pub type xed_encoder_request_t = xed_decoded_inst_t;
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_get_iclass(p: *const xed_encoder_request_t)
     -> xed_iclass_enum_t;
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_iclass(p: *mut xed_encoder_request_t,
                                          iclass: xed_iclass_enum_t);
}
extern "C" {
    /// @ingroup ENC
/// for  REPNE(F2) prefix on string ops
    pub fn xed_encoder_request_set_repne(p: *mut xed_encoder_request_t);
}
extern "C" {
    /// @ingroup ENC
/// for REP(F3) prefix on string ops
    pub fn xed_encoder_request_set_rep(p: *mut xed_encoder_request_t);
}
extern "C" {
    /// @ingroup ENC
/// clear the REP prefix indicator
    pub fn xed_encoder_request_clear_rep(p: *mut xed_encoder_request_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_effective_operand_width(p:
                                                               *mut xed_encoder_request_t,
                                                           width_bits:
                                                               xed_uint_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_effective_address_size(p:
                                                              *mut xed_encoder_request_t,
                                                          width_bits:
                                                              xed_uint_t);
}
extern "C" {
    /*! @ingroup ENC
 *
 * Set the operands array element indexed by operand to the actual register
 * name reg.
 *
 * @param[in] p            xed_encoder_request_t
 * @param[in] operand      indicates which register operand storage field to use
 * @param[in] reg          the actual register represented (EAX, etc.)  to store.
 */
    pub fn xed_encoder_request_set_reg(p: *mut xed_encoder_request_t,
                                       operand: xed_operand_enum_t,
                                       reg: xed_reg_enum_t);
}
extern "C" {
    /*! @ingroup ENC
 * Specify the name as the n'th operand in the operand order. 
 *
 * The complication of this function is that the register operand names are
 * specific to the position of the operand (REG0, REG1, REG2...). One can
 * use this function for registers or one can use the
 * xed_encoder_request_set_operand_name_reg() which takes integers instead
 * of operand names.
 *
 * @param[in] p                #xed_encoder_request_t
 * @param[in] operand_index    xed_uint_t representing n'th operand position
 * @param[in] name             #xed_operand_enum_t operand name.
 */
    pub fn xed_encoder_request_set_operand_order(p:
                                                     *mut xed_encoder_request_t,
                                                 operand_index: xed_uint_t,
                                                 name: xed_operand_enum_t);
}
extern "C" {
    /*! @ingroup ENC
 * Retrieve the name of the n'th operand in the operand order. 
 *
 * @param[in] p                #xed_encoder_request_t
 * @param[in] operand_index    xed_uint_t representing n'th operand position
 * @return The #xed_operand_enum_t operand name.
 */
    pub fn xed_encoder_request_get_operand_order(p:
                                                     *mut xed_encoder_request_t,
                                                 operand_index: xed_uint_t)
     -> xed_operand_enum_t;
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_relbr(p: *mut xed_encoder_request_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_branch_displacement(p:
                                                           *mut xed_encoder_request_t,
                                                       brdisp: i32,
                                                       nbytes: xed_uint_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_ptr(p: *mut xed_encoder_request_t);
}
extern "C" {
    /// @ingroup ENC
/// Set the uimm0 using a BYTE  width.
    pub fn xed_encoder_request_set_uimm0(p: *mut xed_encoder_request_t,
                                         uimm: u64, nbytes: xed_uint_t);
}
extern "C" {
    /// @ingroup ENC
/// Set the uimm0 using a BIT  width.
    pub fn xed_encoder_request_set_uimm0_bits(p: *mut xed_encoder_request_t,
                                              uimm: u64, nbits: xed_uint_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_uimm1(p: *mut xed_encoder_request_t,
                                         uimm: u8);
}
extern "C" {
    /// @ingroup ENC
/// same storage as uimm0
    pub fn xed_encoder_request_set_simm(p: *mut xed_encoder_request_t,
                                        simm: i32, nbytes: xed_uint_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_memory_displacement(p:
                                                           *mut xed_encoder_request_t,
                                                       memdisp: i64,
                                                       nbytes: xed_uint_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_agen(p: *mut xed_encoder_request_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_mem0(p: *mut xed_encoder_request_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_mem1(p: *mut xed_encoder_request_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_memory_operand_length(p:
                                                             *mut xed_encoder_request_t,
                                                         nbytes: xed_uint_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_seg0(p: *mut xed_encoder_request_t,
                                        seg_reg: xed_reg_enum_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_seg1(p: *mut xed_encoder_request_t,
                                        seg_reg: xed_reg_enum_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_base0(p: *mut xed_encoder_request_t,
                                         base_reg: xed_reg_enum_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_base1(p: *mut xed_encoder_request_t,
                                         base_reg: xed_reg_enum_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_index(p: *mut xed_encoder_request_t,
                                         index_reg: xed_reg_enum_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_set_scale(p: *mut xed_encoder_request_t,
                                         scale: xed_uint_t);
}
extern "C" {
    //////////////////////////////////////////////
/// @ingroup ENC
    pub fn xed_encoder_request_operands_const(p: *const xed_encoder_request_t)
     -> *const xed_operand_values_t;
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_operands(p: *mut xed_encoder_request_t)
     -> *mut xed_operand_values_t;
}
extern "C" {
    /*! @ingroup ENC
 * clear the operand order array
 * @param[in] p                xed_encoder_request_t
 */
    pub fn xed_encoder_request_zero_operand_order(p:
                                                      *mut xed_encoder_request_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_zero_set_mode(p: *mut xed_encoder_request_t,
                                             dstate: *const xed_state_t);
}
extern "C" {
    /// @ingroup ENC
    pub fn xed_encoder_request_zero(p: *mut xed_encoder_request_t);
}
extern "C" {
    /// @ingroup ENC
/// Converts an decoder request to a valid encoder request.
    pub fn xed_encoder_request_init_from_decode(d: *mut xed_decoded_inst_s);
}
extern "C" {
    /// @ingroup ENC        
    pub fn xed_encode_request_print(p: *const xed_encoder_request_t,
                                    buf: *mut ::std::os::raw::c_char,
                                    buflen: xed_uint_t);
}
extern "C" {
    ///   This is the main interface to the encoder. The array should be
///   at most 15 bytes long. The ilen parameter should indicate
///   this length. If the array is too short, the encoder may fail to
///   encode the request.  Failure is indicated by a return value of
///   type #xed_error_enum_t that is not equal to
///   #XED_ERROR_NONE. Otherwise, #XED_ERROR_NONE is returned and the
///   length of the encoded instruction is returned in olen.
///
/// @param r encoder request description (#xed_encoder_request_t), includes mode info
/// @param array the encoded instruction bytes are stored here
/// @param ilen the input length of array.
/// @param olen the actual  length of array used for encoding
/// @return success/failure as a #xed_error_enum_t
/// @ingroup ENC
    pub fn xed_encode(r: *mut xed_encoder_request_t, array: *mut u8,
                      ilen: ::std::os::raw::c_uint,
                      olen: *mut ::std::os::raw::c_uint) -> xed_error_enum_t;
}
extern "C" {
    /// This function will attempt to encode a NOP of exactly ilen
/// bytes. If such a NOP is not encodeable, then false will be returned.
///
/// @param array the encoded instruction bytes are stored here
/// @param  ilen the input length array.
/// @return success/failure as a #xed_error_enum_t
/// @ingroup ENC
    pub fn xed_encode_nop(array: *mut u8, ilen: ::std::os::raw::c_uint)
     -> xed_error_enum_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_enc_displacement_t {
    pub displacement: u64,
    pub displacement_bits: u32,
}
#[test]
fn bindgen_test_layout_xed_enc_displacement_t() {
    assert_eq!(::std::mem::size_of::<xed_enc_displacement_t>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( xed_enc_displacement_t )
               ));
    assert_eq! (::std::mem::align_of::<xed_enc_displacement_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( xed_enc_displacement_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_enc_displacement_t ) ) . displacement
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_enc_displacement_t
                ) , "::" , stringify ! ( displacement ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_enc_displacement_t ) ) .
                displacement_bits as * const _ as usize } , 8usize , concat !
                (
                "Alignment of field: " , stringify ! ( xed_enc_displacement_t
                ) , "::" , stringify ! ( displacement_bits ) ));
}
impl Clone for xed_enc_displacement_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_memop_t {
    pub seg: xed_reg_enum_t,
    pub base: xed_reg_enum_t,
    pub index: xed_reg_enum_t,
    pub scale: u32,
    pub disp: xed_enc_displacement_t,
}
#[test]
fn bindgen_test_layout_xed_memop_t() {
    assert_eq!(::std::mem::size_of::<xed_memop_t>() , 32usize , concat ! (
               "Size of: " , stringify ! ( xed_memop_t ) ));
    assert_eq! (::std::mem::align_of::<xed_memop_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( xed_memop_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_memop_t ) ) . seg as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_memop_t ) , "::" ,
                stringify ! ( seg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_memop_t ) ) . base as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_memop_t ) , "::" ,
                stringify ! ( base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_memop_t ) ) . index as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_memop_t ) , "::" ,
                stringify ! ( index ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_memop_t ) ) . scale as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_memop_t ) , "::" ,
                stringify ! ( scale ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_memop_t ) ) . disp as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_memop_t ) , "::" ,
                stringify ! ( disp ) ));
}
impl Clone for xed_memop_t {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_encoder_operand_type_t {
    XED_ENCODER_OPERAND_TYPE_INVALID = 0,
    XED_ENCODER_OPERAND_TYPE_BRDISP = 1,
    XED_ENCODER_OPERAND_TYPE_REG = 2,
    XED_ENCODER_OPERAND_TYPE_IMM0 = 3,
    XED_ENCODER_OPERAND_TYPE_SIMM0 = 4,
    XED_ENCODER_OPERAND_TYPE_IMM1 = 5,
    XED_ENCODER_OPERAND_TYPE_MEM = 6,
    XED_ENCODER_OPERAND_TYPE_PTR = 7,
    XED_ENCODER_OPERAND_TYPE_SEG0 = 8,
    XED_ENCODER_OPERAND_TYPE_SEG1 = 9,
    XED_ENCODER_OPERAND_TYPE_OTHER = 10,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_encoder_operand_t {
    pub type_: xed_encoder_operand_type_t,
    pub u: xed_encoder_operand_t__bindgen_ty_1,
    pub width_bits: u32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_encoder_operand_t__bindgen_ty_1 {
    pub reg: __BindgenUnionField<xed_reg_enum_t>,
    pub brdisp: __BindgenUnionField<i32>,
    pub imm0: __BindgenUnionField<u64>,
    pub imm1: __BindgenUnionField<u8>,
    pub s: __BindgenUnionField<xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1>,
    pub mem: __BindgenUnionField<xed_memop_t>,
    pub bindgen_union_field: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1 {
    pub operand_name: xed_operand_enum_t,
    pub value: u32,
}
#[test]
fn bindgen_test_layout_xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1>()
               , 8usize , concat ! (
               "Size of: " , stringify ! (
               xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1
                ) ) . operand_name as * const _ as usize } , 0usize , concat !
                (
                "Alignment of field: " , stringify ! (
                xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1 ) , "::" ,
                stringify ! ( operand_name ) ));
    assert_eq! (unsafe {
                & (
                * (
                0 as * const xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1
                ) ) . value as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1 ) , "::" ,
                stringify ! ( value ) ));
}
impl Clone for xed_encoder_operand_t__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_xed_encoder_operand_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<xed_encoder_operand_t__bindgen_ty_1>() ,
               32usize , concat ! (
               "Size of: " , stringify ! ( xed_encoder_operand_t__bindgen_ty_1
               ) ));
    assert_eq! (::std::mem::align_of::<xed_encoder_operand_t__bindgen_ty_1>()
                , 8usize , concat ! (
                "Alignment of " , stringify ! (
                xed_encoder_operand_t__bindgen_ty_1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_operand_t__bindgen_ty_1 ) ) .
                reg as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_operand_t__bindgen_ty_1 ) , "::" , stringify ! (
                reg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_operand_t__bindgen_ty_1 ) ) .
                brdisp as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_operand_t__bindgen_ty_1 ) , "::" , stringify ! (
                brdisp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_operand_t__bindgen_ty_1 ) ) .
                imm0 as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_operand_t__bindgen_ty_1 ) , "::" , stringify ! (
                imm0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_operand_t__bindgen_ty_1 ) ) .
                imm1 as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_operand_t__bindgen_ty_1 ) , "::" , stringify ! (
                imm1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_operand_t__bindgen_ty_1 ) ) .
                s as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_operand_t__bindgen_ty_1 ) , "::" , stringify ! ( s
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_operand_t__bindgen_ty_1 ) ) .
                mem as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_operand_t__bindgen_ty_1 ) , "::" , stringify ! (
                mem ) ));
}
impl Clone for xed_encoder_operand_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_xed_encoder_operand_t() {
    assert_eq!(::std::mem::size_of::<xed_encoder_operand_t>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( xed_encoder_operand_t )
               ));
    assert_eq! (::std::mem::align_of::<xed_encoder_operand_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( xed_encoder_operand_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_operand_t ) ) . type_ as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_operand_t )
                , "::" , stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_operand_t ) ) . u as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_operand_t )
                , "::" , stringify ! ( u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_operand_t ) ) . width_bits as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_operand_t )
                , "::" , stringify ! ( width_bits ) ));
}
impl Clone for xed_encoder_operand_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_encoder_prefixes_t {
    pub s: __BindgenUnionField<xed_encoder_prefixes_t__bindgen_ty_1>,
    pub i: __BindgenUnionField<u32>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_encoder_prefixes_t__bindgen_ty_1 {
    pub _bitfield_1: u8,
    pub __bindgen_padding_0: [u8; 3usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_xed_encoder_prefixes_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<xed_encoder_prefixes_t__bindgen_ty_1>() ,
               4usize , concat ! (
               "Size of: " , stringify ! (
               xed_encoder_prefixes_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<xed_encoder_prefixes_t__bindgen_ty_1>()
                , 4usize , concat ! (
                "Alignment of " , stringify ! (
                xed_encoder_prefixes_t__bindgen_ty_1 ) ));
}
impl Clone for xed_encoder_prefixes_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl xed_encoder_prefixes_t__bindgen_ty_1 {
    #[inline]
    pub fn rep(&self) -> u32 {
        let mut unit_field_val: u8 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u8 as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>())
        };
        let mask = 1u64 as u8;
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_rep(&mut self, val: u32) {
        let mask = 1u64 as u8;
        let val = val as u32 as u8;
        let mut unit_field_val: u8 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u8 as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>());
        }
    }
    #[inline]
    pub fn repne(&self) -> u32 {
        let mut unit_field_val: u8 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u8 as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>())
        };
        let mask = 2u64 as u8;
        let val = (unit_field_val & mask) >> 1usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_repne(&mut self, val: u32) {
        let mask = 2u64 as u8;
        let val = val as u32 as u8;
        let mut unit_field_val: u8 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u8 as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 1usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>());
        }
    }
    #[inline]
    pub fn br_hint_taken(&self) -> u32 {
        let mut unit_field_val: u8 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u8 as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>())
        };
        let mask = 4u64 as u8;
        let val = (unit_field_val & mask) >> 2usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_br_hint_taken(&mut self, val: u32) {
        let mask = 4u64 as u8;
        let val = val as u32 as u8;
        let mut unit_field_val: u8 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u8 as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 2usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>());
        }
    }
    #[inline]
    pub fn br_hint_not_taken(&self) -> u32 {
        let mut unit_field_val: u8 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u8 as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>())
        };
        let mask = 8u64 as u8;
        let val = (unit_field_val & mask) >> 3usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set_br_hint_not_taken(&mut self, val: u32) {
        let mask = 8u64 as u8;
        let val = val as u32 as u8;
        let mut unit_field_val: u8 = unsafe { ::std::mem::uninitialized() };
        unsafe {
            ::std::ptr::copy_nonoverlapping(&self._bitfield_1 as *const _ as
                                                *const u8,
                                            &mut unit_field_val as *mut u8 as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>())
        };
        unit_field_val &= !mask;
        unit_field_val |= (val << 3usize) & mask;
        unsafe {
            ::std::ptr::copy_nonoverlapping(&unit_field_val as *const _ as
                                                *const u8,
                                            &mut self._bitfield_1 as *mut _ as
                                                *mut u8,
                                            ::std::mem::size_of::<u8>());
        }
    }
    #[inline]
    pub fn new_bitfield_1(rep: u32, repne: u32, br_hint_taken: u32,
                          br_hint_not_taken: u32) -> u8 {
        ({
             ({
                  ({ ({ 0 } | ((rep as u32 as u8) << 0usize) & (1u64 as u8)) }
                       | ((repne as u32 as u8) << 1usize) & (2u64 as u8))
              } | ((br_hint_taken as u32 as u8) << 2usize) & (4u64 as u8))
         } | ((br_hint_not_taken as u32 as u8) << 3usize) & (8u64 as u8))
    }
}
#[test]
fn bindgen_test_layout_xed_encoder_prefixes_t() {
    assert_eq!(::std::mem::size_of::<xed_encoder_prefixes_t>() , 4usize ,
               concat ! ( "Size of: " , stringify ! ( xed_encoder_prefixes_t )
               ));
    assert_eq! (::std::mem::align_of::<xed_encoder_prefixes_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( xed_encoder_prefixes_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_prefixes_t ) ) . s as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_prefixes_t
                ) , "::" , stringify ! ( s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_prefixes_t ) ) . i as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_encoder_prefixes_t
                ) , "::" , stringify ! ( i ) ));
}
impl Clone for xed_encoder_prefixes_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_encoder_instruction_t {
    pub mode: xed_state_t,
    pub iclass: xed_iclass_enum_t,
    pub effective_operand_width: u32,
    pub effective_address_width: u32,
    pub prefixes: xed_encoder_prefixes_t,
    pub noperands: u32,
    pub operands: [xed_encoder_operand_t; 5usize],
}
#[test]
fn bindgen_test_layout_xed_encoder_instruction_t() {
    assert_eq!(::std::mem::size_of::<xed_encoder_instruction_t>() , 272usize ,
               concat ! (
               "Size of: " , stringify ! ( xed_encoder_instruction_t ) ));
    assert_eq! (::std::mem::align_of::<xed_encoder_instruction_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( xed_encoder_instruction_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_instruction_t ) ) . mode as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_instruction_t ) , "::" , stringify ! ( mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_instruction_t ) ) . iclass as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_instruction_t ) , "::" , stringify ! ( iclass )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_instruction_t ) ) .
                effective_operand_width as * const _ as usize } , 12usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_instruction_t ) , "::" , stringify ! (
                effective_operand_width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_instruction_t ) ) .
                effective_address_width as * const _ as usize } , 16usize ,
                concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_instruction_t ) , "::" , stringify ! (
                effective_address_width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_instruction_t ) ) . prefixes
                as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_instruction_t ) , "::" , stringify ! ( prefixes )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_instruction_t ) ) . noperands
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_instruction_t ) , "::" , stringify ! ( noperands )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_encoder_instruction_t ) ) . operands
                as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                xed_encoder_instruction_t ) , "::" , stringify ! ( operands )
                ));
}
impl Clone for xed_encoder_instruction_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    /// @ingroup ENCHL
/// convert a #xed_encoder_instruction_t to a #xed_encoder_request_t for
/// encoding
    pub fn xed_convert_to_encoder_request(out: *mut xed_encoder_request_t,
                                          in_: *mut xed_encoder_instruction_t)
     -> xed_bool_t;
}
extern "C" {
    pub fn xed_operand_action_read(rw: xed_operand_action_enum_t)
     -> xed_uint_t;
}
extern "C" {
    pub fn xed_operand_action_read_only(rw: xed_operand_action_enum_t)
     -> xed_uint_t;
}
extern "C" {
    pub fn xed_operand_action_written(rw: xed_operand_action_enum_t)
     -> xed_uint_t;
}
extern "C" {
    pub fn xed_operand_action_written_only(rw: xed_operand_action_enum_t)
     -> xed_uint_t;
}
extern "C" {
    pub fn xed_operand_action_read_and_written(rw: xed_operand_action_enum_t)
     -> xed_uint_t;
}
extern "C" {
    pub fn xed_operand_action_conditional_read(rw: xed_operand_action_enum_t)
     -> xed_uint_t;
}
extern "C" {
    pub fn xed_operand_action_conditional_write(rw: xed_operand_action_enum_t)
     -> xed_uint_t;
}
extern "C" {
    ///@ingroup INIT
/// Returns a string representing XED svn commit revision and time stamp.
    pub fn xed_get_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    ///@ingroup INIT
/// Returns a copyright string.
    pub fn xed_get_copyright() -> *const ::std::os::raw::c_char;
}
///  @param address The input address for which we want symbolic name and offset
///  @param symbol_buffer A buffer to hold the symbol name. The callback function should fill this in and terminate
///                       with a null byte.
///  @param buffer_length The maximum length of the symbol_buffer including then null
///  @param offset A pointer to a xed_uint64_t to hold the offset from the provided symbol.
///  @param context This void* pointer passed to the disassembler's new interface so that the caller can identify 
///                     the proper context against which to resolve the symbols. 
///                     The disassembler passes this value to
///                     the callback. The legacy formatters 
///                     that do not have context will pass zero for this parameter.
///  @return 0 on failure, 1 on success.
pub type xed_disassembly_callback_fn_t =
    ::std::option::Option<unsafe extern "C" fn(address: u64,
                                               symbol_buffer:
                                                   *mut ::std::os::raw::c_char,
                                               buffer_length: u32,
                                               offset: *mut u64,
                                               context:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
/// Options for the disasembly formatting functions. Set once during
/// initialization by a calling #xed_format_set_options
///  @ingroup PRINT
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_format_options_t {
    /// by default, XED prints the hex address before any symbolic name for
    /// branch targets. If set to zero, then XED will not print the hex
    /// address before a valid symbolic name.
    pub hex_address_before_symbolic_name: ::std::os::raw::c_uint,
    /// Simple XML output format for the Intel syntax disassembly.
    pub xml_a: ::std::os::raw::c_uint,
    /// Include flags in the XML formatting (must also supply xml_a)
    pub xml_f: ::std::os::raw::c_uint,
    /// omit unit scale "*1" 
    pub omit_unit_scale: ::std::os::raw::c_uint,
    /// do not sign extend signed immediates 
    pub no_sign_extend_signed_immediates: ::std::os::raw::c_uint,
    /// write-mask-with-curly-brackets, omit k0
    pub write_mask_curly_k0: ::std::os::raw::c_uint,
    /// lowercase hexadecimal
    pub lowercase_hex: xed_bool_t,
}
#[test]
fn bindgen_test_layout_xed_format_options_t() {
    assert_eq!(::std::mem::size_of::<xed_format_options_t>() , 28usize ,
               concat ! ( "Size of: " , stringify ! ( xed_format_options_t )
               ));
    assert_eq! (::std::mem::align_of::<xed_format_options_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( xed_format_options_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_format_options_t ) ) .
                hex_address_before_symbolic_name as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_format_options_t )
                , "::" , stringify ! ( hex_address_before_symbolic_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_format_options_t ) ) . xml_a as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_format_options_t )
                , "::" , stringify ! ( xml_a ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_format_options_t ) ) . xml_f as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_format_options_t )
                , "::" , stringify ! ( xml_f ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_format_options_t ) ) .
                omit_unit_scale as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_format_options_t )
                , "::" , stringify ! ( omit_unit_scale ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_format_options_t ) ) .
                no_sign_extend_signed_immediates as * const _ as usize } ,
                16usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_format_options_t )
                , "::" , stringify ! ( no_sign_extend_signed_immediates ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_format_options_t ) ) .
                write_mask_curly_k0 as * const _ as usize } , 20usize , concat
                ! (
                "Alignment of field: " , stringify ! ( xed_format_options_t )
                , "::" , stringify ! ( write_mask_curly_k0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_format_options_t ) ) . lowercase_hex
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_format_options_t )
                , "::" , stringify ! ( lowercase_hex ) ));
}
impl Clone for xed_format_options_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    /// Optionally, customize the disassembly formatting options by passing 
/// in a #xed_format_options_t structure.
/// @ingroup PRINT
    pub fn xed_format_set_options(format_options: xed_format_options_t);
}
/// @ingroup PRINT
/// This contains the information used by the various disassembly printers.
/// Call xed_init_print_info to initialize the fields.  Then change the
/// required and optional fields when required.
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_print_info_t {
    /// the decoded instruction to print
    pub p: *const xed_decoded_inst_t,
    /// pointer to the output buffer
    pub buf: *mut ::std::os::raw::c_char,
    /// length of the output buffer. (bytes) Must be > 25 to start.
    pub blen: ::std::os::raw::c_int,
    /// program counter location. Must be zero if not used.  (Sometimes
    /// instructions are disassembled in a temporary buffer at a different
    /// location than where they may or will exist in memory).
    pub runtime_address: u64,
    /// disassembly_callback MUST be set to zero if not used!  If zero, the
    /// default disassembly callback is used (if one has been registered).
    pub disassembly_callback: xed_disassembly_callback_fn_t,
    /// passed to disassembly callback. Can be zero if not used.
    pub context: *mut ::std::os::raw::c_void,
    /// default is Intel-syntax (dest on left)
    pub syntax: xed_syntax_enum_t,
    /// 1=indicated the format_options field is valid, 0=use default
    /// formatting options from xed_format_set_options().
    pub format_options_valid: ::std::os::raw::c_int,
    pub format_options: xed_format_options_t,
    /// internal, do not use
    pub emitted: xed_bool_t,
    /// internal, do not use
    pub operand_indx: ::std::os::raw::c_uint,
    /// internal, do not use
    pub skip_operand: ::std::os::raw::c_uint,
    /// internal, do not use
    pub extra_index_operand: xed_reg_enum_t,
    /// internal, do not use
    pub implicit: xed_bool_t,
}
#[test]
fn bindgen_test_layout_xed_print_info_t() {
    assert_eq!(::std::mem::size_of::<xed_print_info_t>() , 104usize , concat !
               ( "Size of: " , stringify ! ( xed_print_info_t ) ));
    assert_eq! (::std::mem::align_of::<xed_print_info_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( xed_print_info_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) . p as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( p ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) . buf as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( buf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) . blen as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( blen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) . runtime_address as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( runtime_address ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) .
                disassembly_callback as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( disassembly_callback ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) . context as * const
                _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( context ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) . syntax as * const
                _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( syntax ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) .
                format_options_valid as * const _ as usize } , 52usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( format_options_valid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) . format_options as
                * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( format_options ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) . emitted as * const
                _ as usize } , 84usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( emitted ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) . operand_indx as *
                const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( operand_indx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) . skip_operand as *
                const _ as usize } , 92usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( skip_operand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) .
                extra_index_operand as * const _ as usize } , 96usize , concat
                ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( extra_index_operand ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_print_info_t ) ) . implicit as *
                const _ as usize } , 100usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_print_info_t ) ,
                "::" , stringify ! ( implicit ) ));
}
impl Clone for xed_print_info_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    /// @ingroup PRINT
    pub fn xed_init_print_info(pi: *mut xed_print_info_t);
}
extern "C" {
    /// @ingroup DEC
/// Returns 1 if the attribute is defined for this instruction.
    pub fn xed_decoded_inst_get_attribute(p: *const xed_decoded_inst_t,
                                          attr: xed_attribute_enum_t) -> u32;
}
extern "C" {
    /// @ingroup DEC
/// Returns the attribute bitvector
    pub fn xed_decoded_inst_get_attributes(p: *const xed_decoded_inst_t)
     -> xed_attributes_t;
}
extern "C" {
    /// @ingroup DEC
/// Returns 1 if the instruction is xacquire.
    pub fn xed_decoded_inst_is_xacquire(p: *const xed_decoded_inst_t) -> u32;
}
extern "C" {
    /// @ingroup DEC
/// Returns 1 if the instruction is xrelease.
    pub fn xed_decoded_inst_is_xrelease(p: *const xed_decoded_inst_t) -> u32;
}
extern "C" {
    /// @ingroup DEC
/// Returns 1 if the instruction has mpx prefix.
    pub fn xed_decoded_inst_has_mpx_prefix(p: *const xed_decoded_inst_t)
     -> u32;
}
extern "C" {
    /// @ingroup DEC
/// Returns the modrm byte
    pub fn xed_decoded_inst_get_modrm(p: *const xed_decoded_inst_t) -> u8;
}
extern "C" {
    /// @ingroup DEC
/// Returns 1 iff the instruction uses destination-masking.  This is 0 for
/// blend operations that use their mask field as a control.
    pub fn xed_decoded_inst_masked_vector_operation(p:
                                                        *mut xed_decoded_inst_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
/// Returns 128, 256 or 512 for operations in the VEX, EVEX (or XOP)
/// encoding space and returns 0 for (most) nonvector operations.
/// This usually the content of the VEX.L or EVEX.LL field, reinterpreted.
/// Some GPR instructions (like the BMI1/BMI2) are encoded in the VEX space
/// and return non-zero values from this API.
    pub fn xed_decoded_inst_vector_length_bits(p: *const xed_decoded_inst_t)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
/// Returns the number of legacy prefixes.
    pub fn xed_decoded_inst_get_nprefixes(p: *mut xed_decoded_inst_t)
     -> xed_uint_t;
}
extern "C" {
    /// Return the length in bits of the operand_index'th operand.
/// @ingroup DEC
    pub fn xed_decoded_inst_operand_length_bits(p: *const xed_decoded_inst_t,
                                                operand_index:
                                                    ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /// Deprecated -- returns the length in bytes of the operand_index'th
/// operand.  Use #xed_decoded_inst_operand_length_bits() instead.
/// @ingroup DEC
    pub fn xed_decoded_inst_operand_length(p: *const xed_decoded_inst_t,
                                           operand_index:
                                               ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /// Return the number of element in the operand (for SSE and AVX operands)
/// @ingroup DEC
    pub fn xed_decoded_inst_operand_elements(p: *const xed_decoded_inst_t,
                                             operand_index:
                                                 ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /// Return the size of an element in bits  (for SSE and AVX operands)
/// @ingroup DEC
    pub fn xed_decoded_inst_operand_element_size_bits(p:
                                                          *const xed_decoded_inst_t,
                                                      operand_index:
                                                          ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /// Return the type of an element of type #xed_operand_element_type_enum_t
/// (for SSE and AVX operands)
/// @ingroup DEC
    pub fn xed_decoded_inst_operand_element_type(p: *const xed_decoded_inst_t,
                                                 operand_index:
                                                     ::std::os::raw::c_uint)
     -> xed_operand_element_type_enum_t;
}
extern "C" {
    /// Interpret the operand action in light of AVX512 masking and
/// zeroing/merging.  If masking and merging are used together, the dest
/// operand may also be read.  If masking and merging are used together,
/// the elemnents of dest operand register may be conditionally written (so
/// that input values live on in the output register).
/// @ingroup DEC
    pub fn xed_decoded_inst_operand_action(p: *const xed_decoded_inst_t,
                                           operand_index:
                                               ::std::os::raw::c_uint)
     -> xed_operand_action_enum_t;
}
extern "C" {
    /// Returns true if the instruction uses write-masking
/// @ingroup DEC
    pub fn xed_decoded_inst_masking(p: *const xed_decoded_inst_t)
     -> xed_bool_t;
}
extern "C" {
    /// Returns true if the instruction uses write-masking with merging
/// @ingroup DEC
    pub fn xed_decoded_inst_merging(p: *const xed_decoded_inst_t)
     -> xed_bool_t;
}
extern "C" {
    /// Returns true if the instruction uses write-masking with zeroing
/// @ingroup DEC
    pub fn xed_decoded_inst_zeroing(p: *const xed_decoded_inst_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
/// Zero the decode structure, but set the machine state/mode
/// information. Re-initializes all operands.
    pub fn xed_decoded_inst_zero_set_mode(p: *mut xed_decoded_inst_t,
                                          dstate: *const xed_state_t);
}
extern "C" {
    /// @ingroup DEC
/// Zero the decode structure, but preserve the existing machine state/mode
/// information. Re-initializes all operands.
    pub fn xed_decoded_inst_zero_keep_mode(p: *mut xed_decoded_inst_t);
}
extern "C" {
    /// @ingroup DEC
/// Zero the decode structure completely. Re-initializes all operands.
    pub fn xed_decoded_inst_zero(p: *mut xed_decoded_inst_t);
}
extern "C" {
    /// @ingroup DEC
/// Zero the decode structure, but copy the existing machine state/mode
/// information from the supplied operands pointer. Same as
/// #xed_decoded_inst_zero_keep_mode.
    pub fn xed_decoded_inst_zero_keep_mode_from_operands(p:
                                                             *mut xed_decoded_inst_t,
                                                         operands:
                                                             *const xed_operand_values_t);
}
extern "C" {
    /// Returns the operand width in bits: 8/16/32/64. This is different than
/// the #xed_operand_values_get_effective_operand_width() which only
/// returns 16/32/64. This factors in the BYTEOP attribute when computing
/// its return value. This function provides a information for that is only
/// useful for (scalable) GPR-operations. Individual operands have more
/// specific information available from
/// #xed_decoded_inst_operand_element_size_bits()
/// @ingroup DEC
    pub fn xed_decoded_inst_get_operand_width(p: *const xed_decoded_inst_t)
     -> u32;
}
extern "C" {
    /// Indicate if this decoded instruction is valid for the specified
/// #xed_chip_enum_t chip
/// @ingroup DEC
    pub fn xed_decoded_inst_valid_for_chip(p: *const xed_decoded_inst_t,
                                           chip: xed_chip_enum_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup PRINT
/// Print out all the information about the decoded instruction to the
/// buffer buf whose length is maximally buflen. This is for debugging.
    pub fn xed_decoded_inst_dump(p: *const xed_decoded_inst_t,
                                 buf: *mut ::std::os::raw::c_char,
                                 buflen: ::std::os::raw::c_int);
}
extern "C" {
    /// @ingroup PRINT
/// Print the instruction information in a verbose format.
/// This is for debugging.
/// @param p a #xed_decoded_inst_t for a decoded instruction
/// @param buf a buffer to write the disassembly in to.
/// @param buflen maximum length of the disassembly buffer
/// @param runtime_address the address of the instruction being disassembled. If zero, the offset is printed for relative branches. If nonzero, XED attempts to print the target address for relative branches.
/// @return Returns 0 if the disassembly fails, 1 otherwise.
    pub fn xed_decoded_inst_dump_xed_format(p: *const xed_decoded_inst_t,
                                            buf: *mut ::std::os::raw::c_char,
                                            buflen: ::std::os::raw::c_int,
                                            runtime_address: u64)
     -> xed_bool_t;
}
extern "C" {
    /// Disassemble the decoded instruction using the specified syntax.
/// The output buffer must be at least 25 bytes long. Returns true if
/// disassembly proceeded without errors.
/// @param syntax a #xed_syntax_enum_t the specifies the disassembly format
/// @param xedd a #xed_decoded_inst_t for a decoded instruction
/// @param out_buffer a buffer to write the disassembly in to.
/// @param buffer_len maximum length of the disassembly buffer
/// @param runtime_instruction_address the address of the instruction being disassembled. If zero, the offset is printed for relative branches. If nonzero, XED attempts to print the target address for relative branches.
/// @param context A void* used only for the call back routine for symbolic disassembly if one is provided. Can be zero.
/// @param symbolic_callback A function pointer for obtaining symbolic disassembly. Can be zero.
/// @return Returns 0 if the disassembly fails, 1 otherwise.
///@ingroup PRINT
    pub fn xed_format_context(syntax: xed_syntax_enum_t,
                              xedd: *const xed_decoded_inst_t,
                              out_buffer: *mut ::std::os::raw::c_char,
                              buffer_len: ::std::os::raw::c_int,
                              runtime_instruction_address: u64,
                              context: *mut ::std::os::raw::c_void,
                              symbolic_callback:
                                  xed_disassembly_callback_fn_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup PRINT
/// Disassemble the instruction information to a buffer. See the
/// #xed_print_info_t for the required public fields of the argument.
/// This is the preferred method of doing disassembly.
/// The output buffer must be at least 25 bytes long. 
/// @param pi a #xed_print_info_t 
/// @return Returns 0 if the disassembly fails, 1 otherwise.
    pub fn xed_format_generic(pi: *mut xed_print_info_t) -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_get_seg_reg(p: *const xed_decoded_inst_t,
                                        mem_idx: ::std::os::raw::c_uint)
     -> xed_reg_enum_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_get_base_reg(p: *const xed_decoded_inst_t,
                                         mem_idx: ::std::os::raw::c_uint)
     -> xed_reg_enum_t;
}
extern "C" {
    pub fn xed_decoded_inst_get_index_reg(p: *const xed_decoded_inst_t,
                                          mem_idx: ::std::os::raw::c_uint)
     -> xed_reg_enum_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_get_scale(p: *const xed_decoded_inst_t,
                                      mem_idx: ::std::os::raw::c_uint)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_get_memory_displacement(p:
                                                        *const xed_decoded_inst_t,
                                                    mem_idx:
                                                        ::std::os::raw::c_uint)
     -> i64;
}
extern "C" {
    /// @ingroup DEC
/// Result in BYTES
    pub fn xed_decoded_inst_get_memory_displacement_width(p:
                                                              *const xed_decoded_inst_t,
                                                          mem_idx:
                                                              ::std::os::raw::c_uint)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
/// Result in BITS
    pub fn xed_decoded_inst_get_memory_displacement_width_bits(p:
                                                                   *const xed_decoded_inst_t,
                                                               mem_idx:
                                                                   ::std::os::raw::c_uint)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_get_branch_displacement(p:
                                                        *const xed_decoded_inst_t)
     -> i32;
}
extern "C" {
    /// @ingroup DEC
/// Result in BYTES
    pub fn xed_decoded_inst_get_branch_displacement_width(p:
                                                              *const xed_decoded_inst_t)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
/// Result in BITS
    pub fn xed_decoded_inst_get_branch_displacement_width_bits(p:
                                                                   *const xed_decoded_inst_t)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_get_unsigned_immediate(p:
                                                       *const xed_decoded_inst_t)
     -> u64;
}
extern "C" {
    /// @ingroup DEC
/// Return true if the first immediate (IMM0)  is signed
    pub fn xed_decoded_inst_get_immediate_is_signed(p:
                                                        *const xed_decoded_inst_t)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
/// Return the immediate width in BYTES.
    pub fn xed_decoded_inst_get_immediate_width(p: *const xed_decoded_inst_t)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
/// Return the immediate width in BITS.
    pub fn xed_decoded_inst_get_immediate_width_bits(p:
                                                         *const xed_decoded_inst_t)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_get_signed_immediate(p: *const xed_decoded_inst_t)
     -> i32;
}
extern "C" {
    /// @ingroup DEC
/// Return the specified register operand. The specifier is of type
/// #xed_operand_enum_t .
    pub fn xed_decoded_inst_get_reg(p: *const xed_decoded_inst_t,
                                    reg_operand: xed_operand_enum_t)
     -> xed_reg_enum_t;
}
extern "C" {
    /// See the comment on xed_decoded_inst_uses_rflags(). This can return 
/// 0 if the flags are really not used by this instruction.
/// @ingroup DEC
    pub fn xed_decoded_inst_get_rflags_info(p: *const xed_decoded_inst_t)
     -> *const xed_simple_flag_t;
}
extern "C" {
    /// This returns 1 if the flags are read or written. This will return 0
/// otherwise. This will return 0 if the flags are really not used by this
/// instruction. For some shifts/rotates, XED puts a flags operand in the
/// operand array before it knows if the flags are used because of
/// mode-dependent masking effects on the immediate. 
/// @ingroup DEC
    pub fn xed_decoded_inst_uses_rflags(p: *const xed_decoded_inst_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_number_of_memory_operands(p:
                                                          *const xed_decoded_inst_t)
     -> xed_uint_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_mem_read(p: *const xed_decoded_inst_t,
                                     mem_idx: ::std::os::raw::c_uint)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_mem_written(p: *const xed_decoded_inst_t,
                                        mem_idx: ::std::os::raw::c_uint)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_mem_written_only(p: *const xed_decoded_inst_t,
                                             mem_idx: ::std::os::raw::c_uint)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_conditionally_writes_registers(p:
                                                               *const xed_decoded_inst_t)
     -> xed_bool_t;
}
extern "C" {
    /// returns bytes
/// @ingroup DEC
    pub fn xed_decoded_inst_get_memory_operand_length(p:
                                                          *const xed_decoded_inst_t,
                                                      memop_idx:
                                                          ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_get_memop_address_width(p:
                                                        *const xed_decoded_inst_t,
                                                    memop_idx: xed_uint_t)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    /// @ingroup DEC
/// Returns true if the instruction is a prefetch
    pub fn xed_decoded_inst_is_prefetch(p: *const xed_decoded_inst_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
/// Return 1 for broadcast instructions or AVX512 load-op instructions using the broadcast feature
/// 0 otherwise.  Logical OR of
/// #xed_decoded_inst_is_broadcast_instruction() and
/// #xed_decoded_inst_uses_embedded_broadcast().
    pub fn xed_decoded_inst_is_broadcast(p: *const xed_decoded_inst_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
/// Return 1 for broadcast instruction. (NOT including AVX512 load-op instructions)
/// 0 otherwise. Just a category check. 
    pub fn xed_decoded_inst_is_broadcast_instruction(p:
                                                         *const xed_decoded_inst_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
/// Return 1 for AVX512 load-op instructions using the broadcast feature,
/// 0 otherwise. 
    pub fn xed_decoded_inst_uses_embedded_broadcast(p:
                                                        *const xed_decoded_inst_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
    pub fn xed_decoded_inst_set_scale(p: *mut xed_decoded_inst_t,
                                      scale: xed_uint_t);
}
extern "C" {
    /// @ingroup DEC
/// Set the memory displacement using a BYTE length
    pub fn xed_decoded_inst_set_memory_displacement(p:
                                                        *mut xed_decoded_inst_t,
                                                    disp: i64,
                                                    length_bytes: xed_uint_t);
}
extern "C" {
    /// @ingroup DEC
/// Set the branch  displacement using a BYTE length
    pub fn xed_decoded_inst_set_branch_displacement(p:
                                                        *mut xed_decoded_inst_t,
                                                    disp: i32,
                                                    length_bytes: xed_uint_t);
}
extern "C" {
    /// @ingroup DEC
/// Set the signed immediate a BYTE length
    pub fn xed_decoded_inst_set_immediate_signed(p: *mut xed_decoded_inst_t,
                                                 x: i32,
                                                 length_bytes: xed_uint_t);
}
extern "C" {
    /// @ingroup DEC
/// Set the unsigned immediate a BYTE length
    pub fn xed_decoded_inst_set_immediate_unsigned(p: *mut xed_decoded_inst_t,
                                                   x: u64,
                                                   length_bytes: xed_uint_t);
}
extern "C" {
    /// @ingroup DEC
/// Set the memory displacement a BITS length
    pub fn xed_decoded_inst_set_memory_displacement_bits(p:
                                                             *mut xed_decoded_inst_t,
                                                         disp: i64,
                                                         length_bits:
                                                             xed_uint_t);
}
extern "C" {
    /// @ingroup DEC
/// Set the branch displacement a BITS length
    pub fn xed_decoded_inst_set_branch_displacement_bits(p:
                                                             *mut xed_decoded_inst_t,
                                                         disp: i32,
                                                         length_bits:
                                                             xed_uint_t);
}
extern "C" {
    /// @ingroup DEC
/// Set the signed immediate a BITS length
    pub fn xed_decoded_inst_set_immediate_signed_bits(p:
                                                          *mut xed_decoded_inst_t,
                                                      x: i32,
                                                      length_bits:
                                                          xed_uint_t);
}
extern "C" {
    /// @ingroup DEC
/// Set the unsigned immediate a BITS length
    pub fn xed_decoded_inst_set_immediate_unsigned_bits(p:
                                                            *mut xed_decoded_inst_t,
                                                        x: u64,
                                                        length_bits:
                                                            xed_uint_t);
}
extern "C" {
    /// @ingroup DEC
/// True for AVX512 (EVEX-encoded) SIMD and (VEX encoded) K-mask instructions
    pub fn xed_classify_avx512(d: *const xed_decoded_inst_t) -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
/// True for AVX512 (VEX-encoded) K-mask operations
    pub fn xed_classify_avx512_maskop(d: *const xed_decoded_inst_t)
     -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
/// True for AVX/AVX2 SIMD VEX-encoded operations. Does not include BMI/BMI2 instructions.
    pub fn xed_classify_avx(d: *const xed_decoded_inst_t) -> xed_bool_t;
}
extern "C" {
    /// @ingroup DEC
/// True for SSE/SSE2/etc. SIMD operations.  Includes AES and PCLMULQDQ
    pub fn xed_classify_sse(d: *const xed_decoded_inst_t) -> xed_bool_t;
}
pub const xed_iformfl_enum_t_XED_IFORMFL_AAA_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_AAA_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_AAD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_AAD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_AAM_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_AAM_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_AAS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_AAS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_BNDMK_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_BNDMK_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_BSWAP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_BSWAP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CBW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CBW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CDQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CDQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CDQE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CDQE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CLAC_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CLAC_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CLC_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CLC_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CLD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CLD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CLFLUSH_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CLFLUSH_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CLFLUSHOPT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CLFLUSHOPT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CLGI_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CLGI_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CLI_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CLI_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CLRSSBSY_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CLRSSBSY_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CLTS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CLTS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CLWB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CLWB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CLZERO_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CLZERO_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CMC_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CMC_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CMPSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CMPSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CMPSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CMPSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CMPSQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CMPSQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CMPSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CMPSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CMPXCHG16B_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CMPXCHG16B_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CMPXCHG16B_LOCK_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CMPXCHG16B_LOCK_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CMPXCHG8B_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CMPXCHG8B_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CMPXCHG8B_LOCK_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CMPXCHG8B_LOCK_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CPUID_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CPUID_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CQO_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CQO_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CWD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CWD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_CWDE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_CWDE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_DAA_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_DAA_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_DAS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_DAS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_EMMS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_EMMS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_ENCLS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_ENCLS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_ENCLU_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_ENCLU_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_ENDBR32_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_ENDBR32_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_ENDBR64_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_ENDBR64_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_ENTER_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_ENTER_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_F2XM1_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_F2XM1_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FABS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FABS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FADDP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FADDP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FBLD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FBLD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FBSTP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FBSTP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCHS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCHS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCMOVB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCMOVB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCMOVBE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCMOVBE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCMOVE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCMOVE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCMOVNB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCMOVNB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCMOVNBE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCMOVNBE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCMOVNE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCMOVNE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCMOVNU_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCMOVNU_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCMOVU_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCMOVU_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCOMI_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCOMI_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCOMIP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCOMIP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCOMPP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCOMPP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FCOS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FCOS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FDECSTP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FDECSTP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FDISI8087_NOP_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FDISI8087_NOP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FDIVP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FDIVP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FDIVRP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FDIVRP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FEMMS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FEMMS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FENI8087_NOP_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_FENI8087_NOP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FFREE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FFREE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FFREEP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FFREEP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FINCSTP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FINCSTP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FLD1_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FLD1_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FLDCW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FLDCW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FLDL2E_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FLDL2E_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FLDL2T_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FLDL2T_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FLDLG2_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FLDLG2_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FLDLN2_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FLDLN2_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FLDPI_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FLDPI_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FLDZ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FLDZ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FMULP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FMULP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FNCLEX_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FNCLEX_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FNINIT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FNINIT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FNOP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FNOP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FNSTCW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FNSTCW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FPATAN_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FPATAN_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FPREM_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FPREM_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FPREM1_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FPREM1_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FPTAN_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FPTAN_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FRNDINT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FRNDINT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FSCALE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FSCALE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FSETPM287_NOP_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FSETPM287_NOP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FSIN_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FSIN_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FSINCOS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FSINCOS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FSQRT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FSQRT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FSTPNCE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FSTPNCE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FSUBP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FSUBP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FSUBRP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FSUBRP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FTST_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FTST_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FUCOM_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FUCOM_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FUCOMI_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FUCOMI_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FUCOMIP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FUCOMIP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FUCOMP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FUCOMP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FUCOMPP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FUCOMPP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FWAIT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FWAIT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FXAM_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FXAM_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FXRSTOR_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FXRSTOR_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FXRSTOR64_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FXRSTOR64_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FXSAVE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FXSAVE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FXSAVE64_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FXSAVE64_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FXTRACT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FXTRACT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FYL2X_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FYL2X_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_FYL2XP1_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_FYL2XP1_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_GETSEC_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_GETSEC_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_HLT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_HLT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INCSSPD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INCSSPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INCSSPQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INCSSPQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INT1_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INT1_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INT3_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INT3_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INTO_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INTO_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INVD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INVD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INVLPG_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INVLPG_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_INVLPGA_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_INVLPGA_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_IRET_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_IRET_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_IRETD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_IRETD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_IRETQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_IRETQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_JCXZ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_JCXZ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_JECXZ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_JECXZ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_JRCXZ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_JRCXZ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KADDB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KADDB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KADDD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KADDD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KADDQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KADDQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KADDW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KADDW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KANDB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KANDB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KANDD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KANDD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KANDNB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KANDNB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KANDND_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KANDND_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KANDNQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KANDNQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KANDNW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KANDNW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KANDQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KANDQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KANDW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KANDW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KNOTB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KNOTB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KNOTD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KNOTD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KNOTQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KNOTQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KNOTW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KNOTW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KORB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KORB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KORD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KORD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KORQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KORQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KORTESTB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KORTESTB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KORTESTD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KORTESTD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KORTESTQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KORTESTQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KORTESTW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KORTESTW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KORW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KORW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KSHIFTLB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KSHIFTLB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KSHIFTLD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KSHIFTLD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KSHIFTLQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KSHIFTLQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KSHIFTLW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KSHIFTLW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KSHIFTRB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KSHIFTRB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KSHIFTRD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KSHIFTRD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KSHIFTRQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KSHIFTRQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KSHIFTRW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KSHIFTRW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KTESTB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KTESTB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KTESTD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KTESTD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KTESTQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KTESTQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KTESTW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KTESTW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KUNPCKBW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KUNPCKBW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KUNPCKDQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KUNPCKDQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KUNPCKWD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KUNPCKWD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KXNORB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KXNORB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KXNORD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KXNORD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KXNORQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KXNORQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KXNORW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KXNORW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KXORB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KXORB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KXORD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KXORD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KXORQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KXORQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_KXORW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_KXORW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LAHF_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LAHF_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LDDQU_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LDDQU_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LDMXCSR_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LDMXCSR_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LDS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LDS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LEA_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LEA_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LEAVE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LEAVE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LES_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LES_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LFENCE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LFENCE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LFS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LFS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LGS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LGS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LLWPCB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LLWPCB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LODSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LODSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LODSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LODSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LODSQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LODSQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LODSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LODSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LOOP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LOOP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LOOPE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LOOPE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LOOPNE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LOOPNE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_LSS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_LSS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MASKMOVDQU_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MASKMOVDQU_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MASKMOVQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MASKMOVQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MFENCE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MFENCE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MONITOR_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MONITOR_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVDQ2Q_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVDQ2Q_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVHLPS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVHLPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVLHPS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVLHPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVMSKPD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVMSKPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVMSKPS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVMSKPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVNTDQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVNTDQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVNTDQA_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVNTDQA_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVNTPD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVNTPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVNTPS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVNTPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVNTQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVNTQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVNTSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVNTSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVNTSS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVNTSS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVQ2DQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVQ2DQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVSQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVSQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MOVSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MOVSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_MWAIT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_MWAIT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_OUTSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_OUTSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_OUTSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_OUTSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_OUTSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_OUTSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PAUSE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PAUSE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_POPA_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_POPA_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_POPAD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_POPAD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_POPF_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_POPF_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_POPFD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_POPFD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_POPFQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_POPFQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PREFETCHNTA_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_PREFETCHNTA_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PREFETCHT0_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PREFETCHT0_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PREFETCHT1_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PREFETCHT1_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PREFETCHT2_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PREFETCHT2_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PREFETCHWT1_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_PREFETCHWT1_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PREFETCH_EXCLUSIVE_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PREFETCH_EXCLUSIVE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PSLLDQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PSLLDQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PSRLDQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PSRLDQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PUSHA_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PUSHA_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PUSHAD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PUSHAD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PUSHF_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PUSHF_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PUSHFD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PUSHFD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_PUSHFQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_PUSHFQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RDFSBASE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RDFSBASE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RDGSBASE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RDGSBASE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RDMSR_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RDMSR_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RDPKRU_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RDPKRU_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RDPMC_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RDPMC_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RDRAND_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RDRAND_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RDSEED_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RDSEED_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RDSSPD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RDSSPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RDSSPQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RDSSPQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RDTSC_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RDTSC_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RDTSCP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RDTSCP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPE_CMPSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REPE_CMPSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPE_CMPSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REPE_CMPSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPE_CMPSQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REPE_CMPSQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPE_CMPSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REPE_CMPSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPE_SCASB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REPE_SCASB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPE_SCASD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REPE_SCASD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPE_SCASQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REPE_SCASQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPE_SCASW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REPE_SCASW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPNE_CMPSB_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_REPNE_CMPSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPNE_CMPSD_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_REPNE_CMPSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPNE_CMPSQ_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_REPNE_CMPSQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPNE_CMPSW_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_REPNE_CMPSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPNE_SCASB_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_REPNE_SCASB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPNE_SCASD_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_REPNE_SCASD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPNE_SCASQ_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_REPNE_SCASQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REPNE_SCASW_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_REPNE_SCASW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_INSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_INSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_INSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_INSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_INSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_INSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_LODSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_LODSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_LODSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_LODSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_LODSQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_LODSQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_LODSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_LODSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_MOVSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_MOVSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_MOVSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_MOVSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_MOVSQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_MOVSQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_MOVSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_MOVSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_OUTSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_OUTSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_OUTSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_OUTSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_OUTSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_OUTSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_STOSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_STOSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_STOSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_STOSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_STOSQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_STOSQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_REP_STOSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_REP_STOSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RSM_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RSM_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_RSTORSSP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_RSTORSSP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SAHF_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SAHF_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SALC_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SALC_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SAVESSP_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SAVESSP_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SCASB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SCASB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SCASD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SCASD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SCASQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SCASQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SCASW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SCASW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SETSSBSY_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SETSSBSY_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SFENCE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SFENCE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SKINIT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SKINIT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SLWPCB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SLWPCB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_STAC_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_STAC_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_STC_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_STC_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_STD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_STD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_STGI_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_STGI_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_STI_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_STI_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_STMXCSR_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_STMXCSR_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_STOSB_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_STOSB_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_STOSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_STOSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_STOSQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_STOSQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_STOSW_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_STOSW_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SWAPGS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SWAPGS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SYSCALL_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SYSCALL_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SYSCALL_AMD_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_SYSCALL_AMD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SYSENTER_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SYSENTER_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SYSEXIT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SYSEXIT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SYSRET_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SYSRET_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_SYSRET_AMD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_SYSRET_AMD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_UD0_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_UD0_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_UD2_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_UD2_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_V4FMADDPS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_V4FMADDPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_V4FMADDSS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_V4FMADDSS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_V4FNMADDPS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_V4FNMADDPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_V4FNMADDSS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_V4FNMADDSS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VBROADCASTF128_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VBROADCASTF128_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VBROADCASTF32X8_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VBROADCASTF32X8_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VBROADCASTF64X4_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VBROADCASTF64X4_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VBROADCASTI128_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VBROADCASTI128_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VBROADCASTI32X8_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VBROADCASTI32X8_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VBROADCASTI64X4_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VBROADCASTI64X4_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VGATHERPF0DPD_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VGATHERPF0DPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VGATHERPF0DPS_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VGATHERPF0DPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VGATHERPF0QPD_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VGATHERPF0QPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VGATHERPF0QPS_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VGATHERPF0QPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VGATHERPF1DPD_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VGATHERPF1DPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VGATHERPF1DPS_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VGATHERPF1DPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VGATHERPF1QPD_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VGATHERPF1QPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VGATHERPF1QPS_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VGATHERPF1QPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VLDMXCSR_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VLDMXCSR_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMASKMOVDQU_LAST: xed_iformfl_enum_t
          =
    xed_iformfl_enum_t::XED_IFORMFL_VMASKMOVDQU_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMCALL_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMCALL_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMCLEAR_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMCLEAR_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMFUNC_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMFUNC_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMLAUNCH_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMLAUNCH_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMLOAD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMLOAD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMMCALL_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMMCALL_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMPTRLD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMPTRLD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMPTRST_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMPTRST_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMRESUME_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMRESUME_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMRUN_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMRUN_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMSAVE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMSAVE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMXOFF_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMXOFF_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VMXON_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VMXON_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VP4DPWSSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VP4DPWSSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VP4DPWSSDS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VP4DPWSSDS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VSCATTERPF0DPD_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VSCATTERPF0DPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VSCATTERPF0DPS_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VSCATTERPF0DPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VSCATTERPF0QPD_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VSCATTERPF0QPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VSCATTERPF0QPS_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VSCATTERPF0QPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VSCATTERPF1DPD_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VSCATTERPF1DPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VSCATTERPF1DPS_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VSCATTERPF1DPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VSCATTERPF1QPD_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VSCATTERPF1QPD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VSCATTERPF1QPS_LAST:
          xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VSCATTERPF1QPS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VSTMXCSR_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VSTMXCSR_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VZEROALL_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VZEROALL_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_VZEROUPPER_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_VZEROUPPER_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_WBINVD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_WBINVD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_WRFSBASE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_WRFSBASE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_WRGSBASE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_WRGSBASE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_WRMSR_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_WRMSR_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_WRPKRU_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_WRPKRU_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_WRSSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_WRSSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_WRSSQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_WRSSQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_WRUSSD_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_WRUSSD_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_WRUSSQ_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_WRUSSQ_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XABORT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XABORT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XBEGIN_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XBEGIN_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XEND_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XEND_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XGETBV_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XGETBV_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XLAT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XLAT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XRSTOR_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XRSTOR_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XRSTOR64_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XRSTOR64_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XRSTORS_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XRSTORS_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XRSTORS64_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XRSTORS64_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XSAVE_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XSAVE_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XSAVE64_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XSAVE64_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XSAVEC_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XSAVEC_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XSAVEC64_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XSAVEC64_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XSAVEOPT_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XSAVEOPT_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XSAVEOPT64_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XSAVEOPT64_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XSAVES_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XSAVES_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XSAVES64_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XSAVES64_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XSETBV_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XSETBV_FIRST;
pub const xed_iformfl_enum_t_XED_IFORMFL_XTEST_LAST: xed_iformfl_enum_t =
    xed_iformfl_enum_t::XED_IFORMFL_XTEST_FIRST;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_iformfl_enum_t {
    XED_IFORMFL_AAA_FIRST = 1,
    XED_IFORMFL_AAD_FIRST = 2,
    XED_IFORMFL_AAM_FIRST = 3,
    XED_IFORMFL_AAS_FIRST = 4,
    XED_IFORMFL_ADC_FIRST = 5,
    XED_IFORMFL_ADC_LAST = 22,
    XED_IFORMFL_ADCX_FIRST = 23,
    XED_IFORMFL_ADCX_LAST = 26,
    XED_IFORMFL_ADC_LOCK_FIRST = 27,
    XED_IFORMFL_ADC_LOCK_LAST = 32,
    XED_IFORMFL_ADD_FIRST = 33,
    XED_IFORMFL_ADD_LAST = 50,
    XED_IFORMFL_ADDPD_FIRST = 51,
    XED_IFORMFL_ADDPD_LAST = 52,
    XED_IFORMFL_ADDPS_FIRST = 53,
    XED_IFORMFL_ADDPS_LAST = 54,
    XED_IFORMFL_ADDSD_FIRST = 55,
    XED_IFORMFL_ADDSD_LAST = 56,
    XED_IFORMFL_ADDSS_FIRST = 57,
    XED_IFORMFL_ADDSS_LAST = 58,
    XED_IFORMFL_ADDSUBPD_FIRST = 59,
    XED_IFORMFL_ADDSUBPD_LAST = 60,
    XED_IFORMFL_ADDSUBPS_FIRST = 61,
    XED_IFORMFL_ADDSUBPS_LAST = 62,
    XED_IFORMFL_ADD_LOCK_FIRST = 63,
    XED_IFORMFL_ADD_LOCK_LAST = 68,
    XED_IFORMFL_ADOX_FIRST = 69,
    XED_IFORMFL_ADOX_LAST = 72,
    XED_IFORMFL_AESDEC_FIRST = 73,
    XED_IFORMFL_AESDEC_LAST = 74,
    XED_IFORMFL_AESDECLAST_FIRST = 75,
    XED_IFORMFL_AESDECLAST_LAST = 76,
    XED_IFORMFL_AESENC_FIRST = 77,
    XED_IFORMFL_AESENC_LAST = 78,
    XED_IFORMFL_AESENCLAST_FIRST = 79,
    XED_IFORMFL_AESENCLAST_LAST = 80,
    XED_IFORMFL_AESIMC_FIRST = 81,
    XED_IFORMFL_AESIMC_LAST = 82,
    XED_IFORMFL_AESKEYGENASSIST_FIRST = 83,
    XED_IFORMFL_AESKEYGENASSIST_LAST = 84,
    XED_IFORMFL_AND_FIRST = 85,
    XED_IFORMFL_AND_LAST = 102,
    XED_IFORMFL_ANDN_FIRST = 103,
    XED_IFORMFL_ANDN_LAST = 106,
    XED_IFORMFL_ANDNPD_FIRST = 107,
    XED_IFORMFL_ANDNPD_LAST = 108,
    XED_IFORMFL_ANDNPS_FIRST = 109,
    XED_IFORMFL_ANDNPS_LAST = 110,
    XED_IFORMFL_ANDPD_FIRST = 111,
    XED_IFORMFL_ANDPD_LAST = 112,
    XED_IFORMFL_ANDPS_FIRST = 113,
    XED_IFORMFL_ANDPS_LAST = 114,
    XED_IFORMFL_AND_LOCK_FIRST = 115,
    XED_IFORMFL_AND_LOCK_LAST = 120,
    XED_IFORMFL_ARPL_FIRST = 121,
    XED_IFORMFL_ARPL_LAST = 122,
    XED_IFORMFL_BEXTR_FIRST = 123,
    XED_IFORMFL_BEXTR_LAST = 126,
    XED_IFORMFL_BEXTR_XOP_FIRST = 127,
    XED_IFORMFL_BEXTR_XOP_LAST = 130,
    XED_IFORMFL_BLCFILL_FIRST = 131,
    XED_IFORMFL_BLCFILL_LAST = 134,
    XED_IFORMFL_BLCI_FIRST = 135,
    XED_IFORMFL_BLCI_LAST = 138,
    XED_IFORMFL_BLCIC_FIRST = 139,
    XED_IFORMFL_BLCIC_LAST = 142,
    XED_IFORMFL_BLCMSK_FIRST = 143,
    XED_IFORMFL_BLCMSK_LAST = 146,
    XED_IFORMFL_BLCS_FIRST = 147,
    XED_IFORMFL_BLCS_LAST = 150,
    XED_IFORMFL_BLENDPD_FIRST = 151,
    XED_IFORMFL_BLENDPD_LAST = 152,
    XED_IFORMFL_BLENDPS_FIRST = 153,
    XED_IFORMFL_BLENDPS_LAST = 154,
    XED_IFORMFL_BLENDVPD_FIRST = 155,
    XED_IFORMFL_BLENDVPD_LAST = 156,
    XED_IFORMFL_BLENDVPS_FIRST = 157,
    XED_IFORMFL_BLENDVPS_LAST = 158,
    XED_IFORMFL_BLSFILL_FIRST = 159,
    XED_IFORMFL_BLSFILL_LAST = 162,
    XED_IFORMFL_BLSI_FIRST = 163,
    XED_IFORMFL_BLSI_LAST = 166,
    XED_IFORMFL_BLSIC_FIRST = 167,
    XED_IFORMFL_BLSIC_LAST = 170,
    XED_IFORMFL_BLSMSK_FIRST = 171,
    XED_IFORMFL_BLSMSK_LAST = 174,
    XED_IFORMFL_BLSR_FIRST = 175,
    XED_IFORMFL_BLSR_LAST = 178,
    XED_IFORMFL_BNDCL_FIRST = 179,
    XED_IFORMFL_BNDCL_LAST = 181,
    XED_IFORMFL_BNDCN_FIRST = 182,
    XED_IFORMFL_BNDCN_LAST = 184,
    XED_IFORMFL_BNDCU_FIRST = 185,
    XED_IFORMFL_BNDCU_LAST = 187,
    XED_IFORMFL_BNDLDX_FIRST = 188,
    XED_IFORMFL_BNDLDX_LAST = 189,
    XED_IFORMFL_BNDMK_FIRST = 190,
    XED_IFORMFL_BNDMOV_FIRST = 191,
    XED_IFORMFL_BNDMOV_LAST = 195,
    XED_IFORMFL_BNDSTX_FIRST = 196,
    XED_IFORMFL_BNDSTX_LAST = 197,
    XED_IFORMFL_BOUND_FIRST = 198,
    XED_IFORMFL_BOUND_LAST = 199,
    XED_IFORMFL_BSF_FIRST = 200,
    XED_IFORMFL_BSF_LAST = 201,
    XED_IFORMFL_BSR_FIRST = 202,
    XED_IFORMFL_BSR_LAST = 203,
    XED_IFORMFL_BSWAP_FIRST = 204,
    XED_IFORMFL_BT_FIRST = 205,
    XED_IFORMFL_BT_LAST = 208,
    XED_IFORMFL_BTC_FIRST = 209,
    XED_IFORMFL_BTC_LAST = 212,
    XED_IFORMFL_BTC_LOCK_FIRST = 213,
    XED_IFORMFL_BTC_LOCK_LAST = 214,
    XED_IFORMFL_BTR_FIRST = 215,
    XED_IFORMFL_BTR_LAST = 218,
    XED_IFORMFL_BTR_LOCK_FIRST = 219,
    XED_IFORMFL_BTR_LOCK_LAST = 220,
    XED_IFORMFL_BTS_FIRST = 221,
    XED_IFORMFL_BTS_LAST = 224,
    XED_IFORMFL_BTS_LOCK_FIRST = 225,
    XED_IFORMFL_BTS_LOCK_LAST = 226,
    XED_IFORMFL_BZHI_FIRST = 227,
    XED_IFORMFL_BZHI_LAST = 230,
    XED_IFORMFL_CALL_FAR_FIRST = 231,
    XED_IFORMFL_CALL_FAR_LAST = 232,
    XED_IFORMFL_CALL_NEAR_FIRST = 233,
    XED_IFORMFL_CALL_NEAR_LAST = 236,
    XED_IFORMFL_CBW_FIRST = 237,
    XED_IFORMFL_CDQ_FIRST = 238,
    XED_IFORMFL_CDQE_FIRST = 239,
    XED_IFORMFL_CLAC_FIRST = 240,
    XED_IFORMFL_CLC_FIRST = 241,
    XED_IFORMFL_CLD_FIRST = 242,
    XED_IFORMFL_CLFLUSH_FIRST = 243,
    XED_IFORMFL_CLFLUSHOPT_FIRST = 244,
    XED_IFORMFL_CLGI_FIRST = 245,
    XED_IFORMFL_CLI_FIRST = 246,
    XED_IFORMFL_CLRSSBSY_FIRST = 247,
    XED_IFORMFL_CLTS_FIRST = 248,
    XED_IFORMFL_CLWB_FIRST = 249,
    XED_IFORMFL_CLZERO_FIRST = 250,
    XED_IFORMFL_CMC_FIRST = 251,
    XED_IFORMFL_CMOVB_FIRST = 252,
    XED_IFORMFL_CMOVB_LAST = 253,
    XED_IFORMFL_CMOVBE_FIRST = 254,
    XED_IFORMFL_CMOVBE_LAST = 255,
    XED_IFORMFL_CMOVL_FIRST = 256,
    XED_IFORMFL_CMOVL_LAST = 257,
    XED_IFORMFL_CMOVLE_FIRST = 258,
    XED_IFORMFL_CMOVLE_LAST = 259,
    XED_IFORMFL_CMOVNB_FIRST = 260,
    XED_IFORMFL_CMOVNB_LAST = 261,
    XED_IFORMFL_CMOVNBE_FIRST = 262,
    XED_IFORMFL_CMOVNBE_LAST = 263,
    XED_IFORMFL_CMOVNL_FIRST = 264,
    XED_IFORMFL_CMOVNL_LAST = 265,
    XED_IFORMFL_CMOVNLE_FIRST = 266,
    XED_IFORMFL_CMOVNLE_LAST = 267,
    XED_IFORMFL_CMOVNO_FIRST = 268,
    XED_IFORMFL_CMOVNO_LAST = 269,
    XED_IFORMFL_CMOVNP_FIRST = 270,
    XED_IFORMFL_CMOVNP_LAST = 271,
    XED_IFORMFL_CMOVNS_FIRST = 272,
    XED_IFORMFL_CMOVNS_LAST = 273,
    XED_IFORMFL_CMOVNZ_FIRST = 274,
    XED_IFORMFL_CMOVNZ_LAST = 275,
    XED_IFORMFL_CMOVO_FIRST = 276,
    XED_IFORMFL_CMOVO_LAST = 277,
    XED_IFORMFL_CMOVP_FIRST = 278,
    XED_IFORMFL_CMOVP_LAST = 279,
    XED_IFORMFL_CMOVS_FIRST = 280,
    XED_IFORMFL_CMOVS_LAST = 281,
    XED_IFORMFL_CMOVZ_FIRST = 282,
    XED_IFORMFL_CMOVZ_LAST = 283,
    XED_IFORMFL_CMP_FIRST = 284,
    XED_IFORMFL_CMP_LAST = 301,
    XED_IFORMFL_CMPPD_FIRST = 302,
    XED_IFORMFL_CMPPD_LAST = 303,
    XED_IFORMFL_CMPPS_FIRST = 304,
    XED_IFORMFL_CMPPS_LAST = 305,
    XED_IFORMFL_CMPSB_FIRST = 306,
    XED_IFORMFL_CMPSD_FIRST = 307,
    XED_IFORMFL_CMPSD_XMM_FIRST = 308,
    XED_IFORMFL_CMPSD_XMM_LAST = 309,
    XED_IFORMFL_CMPSQ_FIRST = 310,
    XED_IFORMFL_CMPSS_FIRST = 311,
    XED_IFORMFL_CMPSS_LAST = 312,
    XED_IFORMFL_CMPSW_FIRST = 313,
    XED_IFORMFL_CMPXCHG_FIRST = 314,
    XED_IFORMFL_CMPXCHG_LAST = 317,
    XED_IFORMFL_CMPXCHG16B_FIRST = 318,
    XED_IFORMFL_CMPXCHG16B_LOCK_FIRST = 319,
    XED_IFORMFL_CMPXCHG8B_FIRST = 320,
    XED_IFORMFL_CMPXCHG8B_LOCK_FIRST = 321,
    XED_IFORMFL_CMPXCHG_LOCK_FIRST = 322,
    XED_IFORMFL_CMPXCHG_LOCK_LAST = 323,
    XED_IFORMFL_COMISD_FIRST = 324,
    XED_IFORMFL_COMISD_LAST = 325,
    XED_IFORMFL_COMISS_FIRST = 326,
    XED_IFORMFL_COMISS_LAST = 327,
    XED_IFORMFL_CPUID_FIRST = 328,
    XED_IFORMFL_CQO_FIRST = 329,
    XED_IFORMFL_CRC32_FIRST = 330,
    XED_IFORMFL_CRC32_LAST = 333,
    XED_IFORMFL_CVTDQ2PD_FIRST = 334,
    XED_IFORMFL_CVTDQ2PD_LAST = 335,
    XED_IFORMFL_CVTDQ2PS_FIRST = 336,
    XED_IFORMFL_CVTDQ2PS_LAST = 337,
    XED_IFORMFL_CVTPD2DQ_FIRST = 338,
    XED_IFORMFL_CVTPD2DQ_LAST = 339,
    XED_IFORMFL_CVTPD2PI_FIRST = 340,
    XED_IFORMFL_CVTPD2PI_LAST = 341,
    XED_IFORMFL_CVTPD2PS_FIRST = 342,
    XED_IFORMFL_CVTPD2PS_LAST = 343,
    XED_IFORMFL_CVTPI2PD_FIRST = 344,
    XED_IFORMFL_CVTPI2PD_LAST = 345,
    XED_IFORMFL_CVTPI2PS_FIRST = 346,
    XED_IFORMFL_CVTPI2PS_LAST = 347,
    XED_IFORMFL_CVTPS2DQ_FIRST = 348,
    XED_IFORMFL_CVTPS2DQ_LAST = 349,
    XED_IFORMFL_CVTPS2PD_FIRST = 350,
    XED_IFORMFL_CVTPS2PD_LAST = 351,
    XED_IFORMFL_CVTPS2PI_FIRST = 352,
    XED_IFORMFL_CVTPS2PI_LAST = 353,
    XED_IFORMFL_CVTSD2SI_FIRST = 354,
    XED_IFORMFL_CVTSD2SI_LAST = 357,
    XED_IFORMFL_CVTSD2SS_FIRST = 358,
    XED_IFORMFL_CVTSD2SS_LAST = 359,
    XED_IFORMFL_CVTSI2SD_FIRST = 360,
    XED_IFORMFL_CVTSI2SD_LAST = 363,
    XED_IFORMFL_CVTSI2SS_FIRST = 364,
    XED_IFORMFL_CVTSI2SS_LAST = 367,
    XED_IFORMFL_CVTSS2SD_FIRST = 368,
    XED_IFORMFL_CVTSS2SD_LAST = 369,
    XED_IFORMFL_CVTSS2SI_FIRST = 370,
    XED_IFORMFL_CVTSS2SI_LAST = 373,
    XED_IFORMFL_CVTTPD2DQ_FIRST = 374,
    XED_IFORMFL_CVTTPD2DQ_LAST = 375,
    XED_IFORMFL_CVTTPD2PI_FIRST = 376,
    XED_IFORMFL_CVTTPD2PI_LAST = 377,
    XED_IFORMFL_CVTTPS2DQ_FIRST = 378,
    XED_IFORMFL_CVTTPS2DQ_LAST = 379,
    XED_IFORMFL_CVTTPS2PI_FIRST = 380,
    XED_IFORMFL_CVTTPS2PI_LAST = 381,
    XED_IFORMFL_CVTTSD2SI_FIRST = 382,
    XED_IFORMFL_CVTTSD2SI_LAST = 385,
    XED_IFORMFL_CVTTSS2SI_FIRST = 386,
    XED_IFORMFL_CVTTSS2SI_LAST = 389,
    XED_IFORMFL_CWD_FIRST = 390,
    XED_IFORMFL_CWDE_FIRST = 391,
    XED_IFORMFL_DAA_FIRST = 392,
    XED_IFORMFL_DAS_FIRST = 393,
    XED_IFORMFL_DEC_FIRST = 394,
    XED_IFORMFL_DEC_LAST = 398,
    XED_IFORMFL_DEC_LOCK_FIRST = 399,
    XED_IFORMFL_DEC_LOCK_LAST = 400,
    XED_IFORMFL_DIV_FIRST = 401,
    XED_IFORMFL_DIV_LAST = 404,
    XED_IFORMFL_DIVPD_FIRST = 405,
    XED_IFORMFL_DIVPD_LAST = 406,
    XED_IFORMFL_DIVPS_FIRST = 407,
    XED_IFORMFL_DIVPS_LAST = 408,
    XED_IFORMFL_DIVSD_FIRST = 409,
    XED_IFORMFL_DIVSD_LAST = 410,
    XED_IFORMFL_DIVSS_FIRST = 411,
    XED_IFORMFL_DIVSS_LAST = 412,
    XED_IFORMFL_DPPD_FIRST = 413,
    XED_IFORMFL_DPPD_LAST = 414,
    XED_IFORMFL_DPPS_FIRST = 415,
    XED_IFORMFL_DPPS_LAST = 416,
    XED_IFORMFL_EMMS_FIRST = 417,
    XED_IFORMFL_ENCLS_FIRST = 418,
    XED_IFORMFL_ENCLU_FIRST = 419,
    XED_IFORMFL_ENDBR32_FIRST = 420,
    XED_IFORMFL_ENDBR64_FIRST = 421,
    XED_IFORMFL_ENTER_FIRST = 422,
    XED_IFORMFL_EXTRACTPS_FIRST = 423,
    XED_IFORMFL_EXTRACTPS_LAST = 424,
    XED_IFORMFL_EXTRQ_FIRST = 425,
    XED_IFORMFL_EXTRQ_LAST = 426,
    XED_IFORMFL_F2XM1_FIRST = 427,
    XED_IFORMFL_FABS_FIRST = 428,
    XED_IFORMFL_FADD_FIRST = 429,
    XED_IFORMFL_FADD_LAST = 432,
    XED_IFORMFL_FADDP_FIRST = 433,
    XED_IFORMFL_FBLD_FIRST = 434,
    XED_IFORMFL_FBSTP_FIRST = 435,
    XED_IFORMFL_FCHS_FIRST = 436,
    XED_IFORMFL_FCMOVB_FIRST = 437,
    XED_IFORMFL_FCMOVBE_FIRST = 438,
    XED_IFORMFL_FCMOVE_FIRST = 439,
    XED_IFORMFL_FCMOVNB_FIRST = 440,
    XED_IFORMFL_FCMOVNBE_FIRST = 441,
    XED_IFORMFL_FCMOVNE_FIRST = 442,
    XED_IFORMFL_FCMOVNU_FIRST = 443,
    XED_IFORMFL_FCMOVU_FIRST = 444,
    XED_IFORMFL_FCOM_FIRST = 445,
    XED_IFORMFL_FCOM_LAST = 448,
    XED_IFORMFL_FCOMI_FIRST = 449,
    XED_IFORMFL_FCOMIP_FIRST = 450,
    XED_IFORMFL_FCOMP_FIRST = 451,
    XED_IFORMFL_FCOMP_LAST = 455,
    XED_IFORMFL_FCOMPP_FIRST = 456,
    XED_IFORMFL_FCOS_FIRST = 457,
    XED_IFORMFL_FDECSTP_FIRST = 458,
    XED_IFORMFL_FDISI8087_NOP_FIRST = 459,
    XED_IFORMFL_FDIV_FIRST = 460,
    XED_IFORMFL_FDIV_LAST = 463,
    XED_IFORMFL_FDIVP_FIRST = 464,
    XED_IFORMFL_FDIVR_FIRST = 465,
    XED_IFORMFL_FDIVR_LAST = 468,
    XED_IFORMFL_FDIVRP_FIRST = 469,
    XED_IFORMFL_FEMMS_FIRST = 470,
    XED_IFORMFL_FENI8087_NOP_FIRST = 471,
    XED_IFORMFL_FFREE_FIRST = 472,
    XED_IFORMFL_FFREEP_FIRST = 473,
    XED_IFORMFL_FIADD_FIRST = 474,
    XED_IFORMFL_FIADD_LAST = 475,
    XED_IFORMFL_FICOM_FIRST = 476,
    XED_IFORMFL_FICOM_LAST = 477,
    XED_IFORMFL_FICOMP_FIRST = 478,
    XED_IFORMFL_FICOMP_LAST = 479,
    XED_IFORMFL_FIDIV_FIRST = 480,
    XED_IFORMFL_FIDIV_LAST = 481,
    XED_IFORMFL_FIDIVR_FIRST = 482,
    XED_IFORMFL_FIDIVR_LAST = 483,
    XED_IFORMFL_FILD_FIRST = 484,
    XED_IFORMFL_FILD_LAST = 486,
    XED_IFORMFL_FIMUL_FIRST = 487,
    XED_IFORMFL_FIMUL_LAST = 488,
    XED_IFORMFL_FINCSTP_FIRST = 489,
    XED_IFORMFL_FIST_FIRST = 490,
    XED_IFORMFL_FIST_LAST = 491,
    XED_IFORMFL_FISTP_FIRST = 492,
    XED_IFORMFL_FISTP_LAST = 494,
    XED_IFORMFL_FISTTP_FIRST = 495,
    XED_IFORMFL_FISTTP_LAST = 497,
    XED_IFORMFL_FISUB_FIRST = 498,
    XED_IFORMFL_FISUB_LAST = 499,
    XED_IFORMFL_FISUBR_FIRST = 500,
    XED_IFORMFL_FISUBR_LAST = 501,
    XED_IFORMFL_FLD_FIRST = 502,
    XED_IFORMFL_FLD_LAST = 505,
    XED_IFORMFL_FLD1_FIRST = 506,
    XED_IFORMFL_FLDCW_FIRST = 507,
    XED_IFORMFL_FLDENV_FIRST = 508,
    XED_IFORMFL_FLDENV_LAST = 509,
    XED_IFORMFL_FLDL2E_FIRST = 510,
    XED_IFORMFL_FLDL2T_FIRST = 511,
    XED_IFORMFL_FLDLG2_FIRST = 512,
    XED_IFORMFL_FLDLN2_FIRST = 513,
    XED_IFORMFL_FLDPI_FIRST = 514,
    XED_IFORMFL_FLDZ_FIRST = 515,
    XED_IFORMFL_FMUL_FIRST = 516,
    XED_IFORMFL_FMUL_LAST = 519,
    XED_IFORMFL_FMULP_FIRST = 520,
    XED_IFORMFL_FNCLEX_FIRST = 521,
    XED_IFORMFL_FNINIT_FIRST = 522,
    XED_IFORMFL_FNOP_FIRST = 523,
    XED_IFORMFL_FNSAVE_FIRST = 524,
    XED_IFORMFL_FNSAVE_LAST = 525,
    XED_IFORMFL_FNSTCW_FIRST = 526,
    XED_IFORMFL_FNSTENV_FIRST = 527,
    XED_IFORMFL_FNSTENV_LAST = 528,
    XED_IFORMFL_FNSTSW_FIRST = 529,
    XED_IFORMFL_FNSTSW_LAST = 530,
    XED_IFORMFL_FPATAN_FIRST = 531,
    XED_IFORMFL_FPREM_FIRST = 532,
    XED_IFORMFL_FPREM1_FIRST = 533,
    XED_IFORMFL_FPTAN_FIRST = 534,
    XED_IFORMFL_FRNDINT_FIRST = 535,
    XED_IFORMFL_FRSTOR_FIRST = 536,
    XED_IFORMFL_FRSTOR_LAST = 537,
    XED_IFORMFL_FSCALE_FIRST = 538,
    XED_IFORMFL_FSETPM287_NOP_FIRST = 539,
    XED_IFORMFL_FSIN_FIRST = 540,
    XED_IFORMFL_FSINCOS_FIRST = 541,
    XED_IFORMFL_FSQRT_FIRST = 542,
    XED_IFORMFL_FST_FIRST = 543,
    XED_IFORMFL_FST_LAST = 545,
    XED_IFORMFL_FSTP_FIRST = 546,
    XED_IFORMFL_FSTP_LAST = 551,
    XED_IFORMFL_FSTPNCE_FIRST = 552,
    XED_IFORMFL_FSUB_FIRST = 553,
    XED_IFORMFL_FSUB_LAST = 556,
    XED_IFORMFL_FSUBP_FIRST = 557,
    XED_IFORMFL_FSUBR_FIRST = 558,
    XED_IFORMFL_FSUBR_LAST = 561,
    XED_IFORMFL_FSUBRP_FIRST = 562,
    XED_IFORMFL_FTST_FIRST = 563,
    XED_IFORMFL_FUCOM_FIRST = 564,
    XED_IFORMFL_FUCOMI_FIRST = 565,
    XED_IFORMFL_FUCOMIP_FIRST = 566,
    XED_IFORMFL_FUCOMP_FIRST = 567,
    XED_IFORMFL_FUCOMPP_FIRST = 568,
    XED_IFORMFL_FWAIT_FIRST = 569,
    XED_IFORMFL_FXAM_FIRST = 570,
    XED_IFORMFL_FXCH_FIRST = 571,
    XED_IFORMFL_FXCH_LAST = 573,
    XED_IFORMFL_FXRSTOR_FIRST = 574,
    XED_IFORMFL_FXRSTOR64_FIRST = 575,
    XED_IFORMFL_FXSAVE_FIRST = 576,
    XED_IFORMFL_FXSAVE64_FIRST = 577,
    XED_IFORMFL_FXTRACT_FIRST = 578,
    XED_IFORMFL_FYL2X_FIRST = 579,
    XED_IFORMFL_FYL2XP1_FIRST = 580,
    XED_IFORMFL_GETSEC_FIRST = 581,
    XED_IFORMFL_HADDPD_FIRST = 582,
    XED_IFORMFL_HADDPD_LAST = 583,
    XED_IFORMFL_HADDPS_FIRST = 584,
    XED_IFORMFL_HADDPS_LAST = 585,
    XED_IFORMFL_HLT_FIRST = 586,
    XED_IFORMFL_HSUBPD_FIRST = 587,
    XED_IFORMFL_HSUBPD_LAST = 588,
    XED_IFORMFL_HSUBPS_FIRST = 589,
    XED_IFORMFL_HSUBPS_LAST = 590,
    XED_IFORMFL_IDIV_FIRST = 591,
    XED_IFORMFL_IDIV_LAST = 594,
    XED_IFORMFL_IMUL_FIRST = 595,
    XED_IFORMFL_IMUL_LAST = 604,
    XED_IFORMFL_IN_FIRST = 605,
    XED_IFORMFL_IN_LAST = 608,
    XED_IFORMFL_INC_FIRST = 609,
    XED_IFORMFL_INC_LAST = 613,
    XED_IFORMFL_INCSSPD_FIRST = 614,
    XED_IFORMFL_INCSSPQ_FIRST = 615,
    XED_IFORMFL_INC_LOCK_FIRST = 616,
    XED_IFORMFL_INC_LOCK_LAST = 617,
    XED_IFORMFL_INSB_FIRST = 618,
    XED_IFORMFL_INSD_FIRST = 619,
    XED_IFORMFL_INSERTPS_FIRST = 620,
    XED_IFORMFL_INSERTPS_LAST = 621,
    XED_IFORMFL_INSERTQ_FIRST = 622,
    XED_IFORMFL_INSERTQ_LAST = 623,
    XED_IFORMFL_INSW_FIRST = 624,
    XED_IFORMFL_INT_FIRST = 625,
    XED_IFORMFL_INT1_FIRST = 626,
    XED_IFORMFL_INT3_FIRST = 627,
    XED_IFORMFL_INTO_FIRST = 628,
    XED_IFORMFL_INVD_FIRST = 629,
    XED_IFORMFL_INVEPT_FIRST = 630,
    XED_IFORMFL_INVEPT_LAST = 631,
    XED_IFORMFL_INVLPG_FIRST = 632,
    XED_IFORMFL_INVLPGA_FIRST = 633,
    XED_IFORMFL_INVPCID_FIRST = 634,
    XED_IFORMFL_INVPCID_LAST = 635,
    XED_IFORMFL_INVVPID_FIRST = 636,
    XED_IFORMFL_INVVPID_LAST = 637,
    XED_IFORMFL_IRET_FIRST = 638,
    XED_IFORMFL_IRETD_FIRST = 639,
    XED_IFORMFL_IRETQ_FIRST = 640,
    XED_IFORMFL_JB_FIRST = 641,
    XED_IFORMFL_JB_LAST = 643,
    XED_IFORMFL_JBE_FIRST = 644,
    XED_IFORMFL_JBE_LAST = 646,
    XED_IFORMFL_JCXZ_FIRST = 647,
    XED_IFORMFL_JECXZ_FIRST = 648,
    XED_IFORMFL_JL_FIRST = 649,
    XED_IFORMFL_JL_LAST = 651,
    XED_IFORMFL_JLE_FIRST = 652,
    XED_IFORMFL_JLE_LAST = 654,
    XED_IFORMFL_JMP_FIRST = 655,
    XED_IFORMFL_JMP_LAST = 659,
    XED_IFORMFL_JMP_FAR_FIRST = 660,
    XED_IFORMFL_JMP_FAR_LAST = 661,
    XED_IFORMFL_JNB_FIRST = 662,
    XED_IFORMFL_JNB_LAST = 664,
    XED_IFORMFL_JNBE_FIRST = 665,
    XED_IFORMFL_JNBE_LAST = 667,
    XED_IFORMFL_JNL_FIRST = 668,
    XED_IFORMFL_JNL_LAST = 670,
    XED_IFORMFL_JNLE_FIRST = 671,
    XED_IFORMFL_JNLE_LAST = 673,
    XED_IFORMFL_JNO_FIRST = 674,
    XED_IFORMFL_JNO_LAST = 676,
    XED_IFORMFL_JNP_FIRST = 677,
    XED_IFORMFL_JNP_LAST = 679,
    XED_IFORMFL_JNS_FIRST = 680,
    XED_IFORMFL_JNS_LAST = 682,
    XED_IFORMFL_JNZ_FIRST = 683,
    XED_IFORMFL_JNZ_LAST = 685,
    XED_IFORMFL_JO_FIRST = 686,
    XED_IFORMFL_JO_LAST = 688,
    XED_IFORMFL_JP_FIRST = 689,
    XED_IFORMFL_JP_LAST = 691,
    XED_IFORMFL_JRCXZ_FIRST = 692,
    XED_IFORMFL_JS_FIRST = 693,
    XED_IFORMFL_JS_LAST = 695,
    XED_IFORMFL_JZ_FIRST = 696,
    XED_IFORMFL_JZ_LAST = 698,
    XED_IFORMFL_KADDB_FIRST = 699,
    XED_IFORMFL_KADDD_FIRST = 700,
    XED_IFORMFL_KADDQ_FIRST = 701,
    XED_IFORMFL_KADDW_FIRST = 702,
    XED_IFORMFL_KANDB_FIRST = 703,
    XED_IFORMFL_KANDD_FIRST = 704,
    XED_IFORMFL_KANDNB_FIRST = 705,
    XED_IFORMFL_KANDND_FIRST = 706,
    XED_IFORMFL_KANDNQ_FIRST = 707,
    XED_IFORMFL_KANDNW_FIRST = 708,
    XED_IFORMFL_KANDQ_FIRST = 709,
    XED_IFORMFL_KANDW_FIRST = 710,
    XED_IFORMFL_KMOVB_FIRST = 711,
    XED_IFORMFL_KMOVB_LAST = 715,
    XED_IFORMFL_KMOVD_FIRST = 716,
    XED_IFORMFL_KMOVD_LAST = 720,
    XED_IFORMFL_KMOVQ_FIRST = 721,
    XED_IFORMFL_KMOVQ_LAST = 725,
    XED_IFORMFL_KMOVW_FIRST = 726,
    XED_IFORMFL_KMOVW_LAST = 730,
    XED_IFORMFL_KNOTB_FIRST = 731,
    XED_IFORMFL_KNOTD_FIRST = 732,
    XED_IFORMFL_KNOTQ_FIRST = 733,
    XED_IFORMFL_KNOTW_FIRST = 734,
    XED_IFORMFL_KORB_FIRST = 735,
    XED_IFORMFL_KORD_FIRST = 736,
    XED_IFORMFL_KORQ_FIRST = 737,
    XED_IFORMFL_KORTESTB_FIRST = 738,
    XED_IFORMFL_KORTESTD_FIRST = 739,
    XED_IFORMFL_KORTESTQ_FIRST = 740,
    XED_IFORMFL_KORTESTW_FIRST = 741,
    XED_IFORMFL_KORW_FIRST = 742,
    XED_IFORMFL_KSHIFTLB_FIRST = 743,
    XED_IFORMFL_KSHIFTLD_FIRST = 744,
    XED_IFORMFL_KSHIFTLQ_FIRST = 745,
    XED_IFORMFL_KSHIFTLW_FIRST = 746,
    XED_IFORMFL_KSHIFTRB_FIRST = 747,
    XED_IFORMFL_KSHIFTRD_FIRST = 748,
    XED_IFORMFL_KSHIFTRQ_FIRST = 749,
    XED_IFORMFL_KSHIFTRW_FIRST = 750,
    XED_IFORMFL_KTESTB_FIRST = 751,
    XED_IFORMFL_KTESTD_FIRST = 752,
    XED_IFORMFL_KTESTQ_FIRST = 753,
    XED_IFORMFL_KTESTW_FIRST = 754,
    XED_IFORMFL_KUNPCKBW_FIRST = 755,
    XED_IFORMFL_KUNPCKDQ_FIRST = 756,
    XED_IFORMFL_KUNPCKWD_FIRST = 757,
    XED_IFORMFL_KXNORB_FIRST = 758,
    XED_IFORMFL_KXNORD_FIRST = 759,
    XED_IFORMFL_KXNORQ_FIRST = 760,
    XED_IFORMFL_KXNORW_FIRST = 761,
    XED_IFORMFL_KXORB_FIRST = 762,
    XED_IFORMFL_KXORD_FIRST = 763,
    XED_IFORMFL_KXORQ_FIRST = 764,
    XED_IFORMFL_KXORW_FIRST = 765,
    XED_IFORMFL_LAHF_FIRST = 766,
    XED_IFORMFL_LAR_FIRST = 767,
    XED_IFORMFL_LAR_LAST = 768,
    XED_IFORMFL_LDDQU_FIRST = 769,
    XED_IFORMFL_LDMXCSR_FIRST = 770,
    XED_IFORMFL_LDS_FIRST = 771,
    XED_IFORMFL_LEA_FIRST = 772,
    XED_IFORMFL_LEAVE_FIRST = 773,
    XED_IFORMFL_LES_FIRST = 774,
    XED_IFORMFL_LFENCE_FIRST = 775,
    XED_IFORMFL_LFS_FIRST = 776,
    XED_IFORMFL_LGDT_FIRST = 777,
    XED_IFORMFL_LGDT_LAST = 778,
    XED_IFORMFL_LGS_FIRST = 779,
    XED_IFORMFL_LIDT_FIRST = 780,
    XED_IFORMFL_LIDT_LAST = 781,
    XED_IFORMFL_LLDT_FIRST = 782,
    XED_IFORMFL_LLDT_LAST = 783,
    XED_IFORMFL_LLWPCB_FIRST = 784,
    XED_IFORMFL_LMSW_FIRST = 785,
    XED_IFORMFL_LMSW_LAST = 786,
    XED_IFORMFL_LODSB_FIRST = 787,
    XED_IFORMFL_LODSD_FIRST = 788,
    XED_IFORMFL_LODSQ_FIRST = 789,
    XED_IFORMFL_LODSW_FIRST = 790,
    XED_IFORMFL_LOOP_FIRST = 791,
    XED_IFORMFL_LOOPE_FIRST = 792,
    XED_IFORMFL_LOOPNE_FIRST = 793,
    XED_IFORMFL_LSL_FIRST = 794,
    XED_IFORMFL_LSL_LAST = 795,
    XED_IFORMFL_LSS_FIRST = 796,
    XED_IFORMFL_LTR_FIRST = 797,
    XED_IFORMFL_LTR_LAST = 798,
    XED_IFORMFL_LWPINS_FIRST = 799,
    XED_IFORMFL_LWPINS_LAST = 800,
    XED_IFORMFL_LWPVAL_FIRST = 801,
    XED_IFORMFL_LWPVAL_LAST = 802,
    XED_IFORMFL_LZCNT_FIRST = 803,
    XED_IFORMFL_LZCNT_LAST = 804,
    XED_IFORMFL_MASKMOVDQU_FIRST = 805,
    XED_IFORMFL_MASKMOVQ_FIRST = 806,
    XED_IFORMFL_MAXPD_FIRST = 807,
    XED_IFORMFL_MAXPD_LAST = 808,
    XED_IFORMFL_MAXPS_FIRST = 809,
    XED_IFORMFL_MAXPS_LAST = 810,
    XED_IFORMFL_MAXSD_FIRST = 811,
    XED_IFORMFL_MAXSD_LAST = 812,
    XED_IFORMFL_MAXSS_FIRST = 813,
    XED_IFORMFL_MAXSS_LAST = 814,
    XED_IFORMFL_MFENCE_FIRST = 815,
    XED_IFORMFL_MINPD_FIRST = 816,
    XED_IFORMFL_MINPD_LAST = 817,
    XED_IFORMFL_MINPS_FIRST = 818,
    XED_IFORMFL_MINPS_LAST = 819,
    XED_IFORMFL_MINSD_FIRST = 820,
    XED_IFORMFL_MINSD_LAST = 821,
    XED_IFORMFL_MINSS_FIRST = 822,
    XED_IFORMFL_MINSS_LAST = 823,
    XED_IFORMFL_MONITOR_FIRST = 824,
    XED_IFORMFL_MOV_FIRST = 825,
    XED_IFORMFL_MOV_LAST = 846,
    XED_IFORMFL_MOVAPD_FIRST = 847,
    XED_IFORMFL_MOVAPD_LAST = 850,
    XED_IFORMFL_MOVAPS_FIRST = 851,
    XED_IFORMFL_MOVAPS_LAST = 854,
    XED_IFORMFL_MOVBE_FIRST = 855,
    XED_IFORMFL_MOVBE_LAST = 856,
    XED_IFORMFL_MOVD_FIRST = 857,
    XED_IFORMFL_MOVD_LAST = 864,
    XED_IFORMFL_MOVDDUP_FIRST = 865,
    XED_IFORMFL_MOVDDUP_LAST = 866,
    XED_IFORMFL_MOVDQ2Q_FIRST = 867,
    XED_IFORMFL_MOVDQA_FIRST = 868,
    XED_IFORMFL_MOVDQA_LAST = 871,
    XED_IFORMFL_MOVDQU_FIRST = 872,
    XED_IFORMFL_MOVDQU_LAST = 875,
    XED_IFORMFL_MOVHLPS_FIRST = 876,
    XED_IFORMFL_MOVHPD_FIRST = 877,
    XED_IFORMFL_MOVHPD_LAST = 878,
    XED_IFORMFL_MOVHPS_FIRST = 879,
    XED_IFORMFL_MOVHPS_LAST = 880,
    XED_IFORMFL_MOVLHPS_FIRST = 881,
    XED_IFORMFL_MOVLPD_FIRST = 882,
    XED_IFORMFL_MOVLPD_LAST = 883,
    XED_IFORMFL_MOVLPS_FIRST = 884,
    XED_IFORMFL_MOVLPS_LAST = 885,
    XED_IFORMFL_MOVMSKPD_FIRST = 886,
    XED_IFORMFL_MOVMSKPS_FIRST = 887,
    XED_IFORMFL_MOVNTDQ_FIRST = 888,
    XED_IFORMFL_MOVNTDQA_FIRST = 889,
    XED_IFORMFL_MOVNTI_FIRST = 890,
    XED_IFORMFL_MOVNTI_LAST = 891,
    XED_IFORMFL_MOVNTPD_FIRST = 892,
    XED_IFORMFL_MOVNTPS_FIRST = 893,
    XED_IFORMFL_MOVNTQ_FIRST = 894,
    XED_IFORMFL_MOVNTSD_FIRST = 895,
    XED_IFORMFL_MOVNTSS_FIRST = 896,
    XED_IFORMFL_MOVQ_FIRST = 897,
    XED_IFORMFL_MOVQ_LAST = 912,
    XED_IFORMFL_MOVQ2DQ_FIRST = 913,
    XED_IFORMFL_MOVSB_FIRST = 914,
    XED_IFORMFL_MOVSD_FIRST = 915,
    XED_IFORMFL_MOVSD_XMM_FIRST = 916,
    XED_IFORMFL_MOVSD_XMM_LAST = 919,
    XED_IFORMFL_MOVSHDUP_FIRST = 920,
    XED_IFORMFL_MOVSHDUP_LAST = 921,
    XED_IFORMFL_MOVSLDUP_FIRST = 922,
    XED_IFORMFL_MOVSLDUP_LAST = 923,
    XED_IFORMFL_MOVSQ_FIRST = 924,
    XED_IFORMFL_MOVSS_FIRST = 925,
    XED_IFORMFL_MOVSS_LAST = 928,
    XED_IFORMFL_MOVSW_FIRST = 929,
    XED_IFORMFL_MOVSX_FIRST = 930,
    XED_IFORMFL_MOVSX_LAST = 933,
    XED_IFORMFL_MOVSXD_FIRST = 934,
    XED_IFORMFL_MOVSXD_LAST = 935,
    XED_IFORMFL_MOVUPD_FIRST = 936,
    XED_IFORMFL_MOVUPD_LAST = 939,
    XED_IFORMFL_MOVUPS_FIRST = 940,
    XED_IFORMFL_MOVUPS_LAST = 943,
    XED_IFORMFL_MOVZX_FIRST = 944,
    XED_IFORMFL_MOVZX_LAST = 947,
    XED_IFORMFL_MOV_CR_FIRST = 948,
    XED_IFORMFL_MOV_CR_LAST = 951,
    XED_IFORMFL_MOV_DR_FIRST = 952,
    XED_IFORMFL_MOV_DR_LAST = 955,
    XED_IFORMFL_MPSADBW_FIRST = 956,
    XED_IFORMFL_MPSADBW_LAST = 957,
    XED_IFORMFL_MUL_FIRST = 958,
    XED_IFORMFL_MUL_LAST = 961,
    XED_IFORMFL_MULPD_FIRST = 962,
    XED_IFORMFL_MULPD_LAST = 963,
    XED_IFORMFL_MULPS_FIRST = 964,
    XED_IFORMFL_MULPS_LAST = 965,
    XED_IFORMFL_MULSD_FIRST = 966,
    XED_IFORMFL_MULSD_LAST = 967,
    XED_IFORMFL_MULSS_FIRST = 968,
    XED_IFORMFL_MULSS_LAST = 969,
    XED_IFORMFL_MULX_FIRST = 970,
    XED_IFORMFL_MULX_LAST = 973,
    XED_IFORMFL_MWAIT_FIRST = 974,
    XED_IFORMFL_NEG_FIRST = 975,
    XED_IFORMFL_NEG_LAST = 978,
    XED_IFORMFL_NEG_LOCK_FIRST = 979,
    XED_IFORMFL_NEG_LOCK_LAST = 980,
    XED_IFORMFL_NOP_FIRST = 981,
    XED_IFORMFL_NOP_LAST = 1008,
    XED_IFORMFL_NOT_FIRST = 1009,
    XED_IFORMFL_NOT_LAST = 1012,
    XED_IFORMFL_NOT_LOCK_FIRST = 1013,
    XED_IFORMFL_NOT_LOCK_LAST = 1014,
    XED_IFORMFL_OR_FIRST = 1015,
    XED_IFORMFL_OR_LAST = 1032,
    XED_IFORMFL_ORPD_FIRST = 1033,
    XED_IFORMFL_ORPD_LAST = 1034,
    XED_IFORMFL_ORPS_FIRST = 1035,
    XED_IFORMFL_ORPS_LAST = 1036,
    XED_IFORMFL_OR_LOCK_FIRST = 1037,
    XED_IFORMFL_OR_LOCK_LAST = 1042,
    XED_IFORMFL_OUT_FIRST = 1043,
    XED_IFORMFL_OUT_LAST = 1046,
    XED_IFORMFL_OUTSB_FIRST = 1047,
    XED_IFORMFL_OUTSD_FIRST = 1048,
    XED_IFORMFL_OUTSW_FIRST = 1049,
    XED_IFORMFL_PABSB_FIRST = 1050,
    XED_IFORMFL_PABSB_LAST = 1053,
    XED_IFORMFL_PABSD_FIRST = 1054,
    XED_IFORMFL_PABSD_LAST = 1057,
    XED_IFORMFL_PABSW_FIRST = 1058,
    XED_IFORMFL_PABSW_LAST = 1061,
    XED_IFORMFL_PACKSSDW_FIRST = 1062,
    XED_IFORMFL_PACKSSDW_LAST = 1065,
    XED_IFORMFL_PACKSSWB_FIRST = 1066,
    XED_IFORMFL_PACKSSWB_LAST = 1069,
    XED_IFORMFL_PACKUSDW_FIRST = 1070,
    XED_IFORMFL_PACKUSDW_LAST = 1071,
    XED_IFORMFL_PACKUSWB_FIRST = 1072,
    XED_IFORMFL_PACKUSWB_LAST = 1075,
    XED_IFORMFL_PADDB_FIRST = 1076,
    XED_IFORMFL_PADDB_LAST = 1079,
    XED_IFORMFL_PADDD_FIRST = 1080,
    XED_IFORMFL_PADDD_LAST = 1083,
    XED_IFORMFL_PADDQ_FIRST = 1084,
    XED_IFORMFL_PADDQ_LAST = 1087,
    XED_IFORMFL_PADDSB_FIRST = 1088,
    XED_IFORMFL_PADDSB_LAST = 1091,
    XED_IFORMFL_PADDSW_FIRST = 1092,
    XED_IFORMFL_PADDSW_LAST = 1095,
    XED_IFORMFL_PADDUSB_FIRST = 1096,
    XED_IFORMFL_PADDUSB_LAST = 1099,
    XED_IFORMFL_PADDUSW_FIRST = 1100,
    XED_IFORMFL_PADDUSW_LAST = 1103,
    XED_IFORMFL_PADDW_FIRST = 1104,
    XED_IFORMFL_PADDW_LAST = 1107,
    XED_IFORMFL_PALIGNR_FIRST = 1108,
    XED_IFORMFL_PALIGNR_LAST = 1111,
    XED_IFORMFL_PAND_FIRST = 1112,
    XED_IFORMFL_PAND_LAST = 1115,
    XED_IFORMFL_PANDN_FIRST = 1116,
    XED_IFORMFL_PANDN_LAST = 1119,
    XED_IFORMFL_PAUSE_FIRST = 1120,
    XED_IFORMFL_PAVGB_FIRST = 1121,
    XED_IFORMFL_PAVGB_LAST = 1124,
    XED_IFORMFL_PAVGUSB_FIRST = 1125,
    XED_IFORMFL_PAVGUSB_LAST = 1126,
    XED_IFORMFL_PAVGW_FIRST = 1127,
    XED_IFORMFL_PAVGW_LAST = 1130,
    XED_IFORMFL_PBLENDVB_FIRST = 1131,
    XED_IFORMFL_PBLENDVB_LAST = 1132,
    XED_IFORMFL_PBLENDW_FIRST = 1133,
    XED_IFORMFL_PBLENDW_LAST = 1134,
    XED_IFORMFL_PCLMULQDQ_FIRST = 1135,
    XED_IFORMFL_PCLMULQDQ_LAST = 1136,
    XED_IFORMFL_PCMPEQB_FIRST = 1137,
    XED_IFORMFL_PCMPEQB_LAST = 1140,
    XED_IFORMFL_PCMPEQD_FIRST = 1141,
    XED_IFORMFL_PCMPEQD_LAST = 1144,
    XED_IFORMFL_PCMPEQQ_FIRST = 1145,
    XED_IFORMFL_PCMPEQQ_LAST = 1146,
    XED_IFORMFL_PCMPEQW_FIRST = 1147,
    XED_IFORMFL_PCMPEQW_LAST = 1150,
    XED_IFORMFL_PCMPESTRI_FIRST = 1151,
    XED_IFORMFL_PCMPESTRI_LAST = 1152,
    XED_IFORMFL_PCMPESTRM_FIRST = 1153,
    XED_IFORMFL_PCMPESTRM_LAST = 1154,
    XED_IFORMFL_PCMPGTB_FIRST = 1155,
    XED_IFORMFL_PCMPGTB_LAST = 1158,
    XED_IFORMFL_PCMPGTD_FIRST = 1159,
    XED_IFORMFL_PCMPGTD_LAST = 1162,
    XED_IFORMFL_PCMPGTQ_FIRST = 1163,
    XED_IFORMFL_PCMPGTQ_LAST = 1164,
    XED_IFORMFL_PCMPGTW_FIRST = 1165,
    XED_IFORMFL_PCMPGTW_LAST = 1168,
    XED_IFORMFL_PCMPISTRI_FIRST = 1169,
    XED_IFORMFL_PCMPISTRI_LAST = 1170,
    XED_IFORMFL_PCMPISTRM_FIRST = 1171,
    XED_IFORMFL_PCMPISTRM_LAST = 1172,
    XED_IFORMFL_PDEP_FIRST = 1173,
    XED_IFORMFL_PDEP_LAST = 1176,
    XED_IFORMFL_PEXT_FIRST = 1177,
    XED_IFORMFL_PEXT_LAST = 1180,
    XED_IFORMFL_PEXTRB_FIRST = 1181,
    XED_IFORMFL_PEXTRB_LAST = 1182,
    XED_IFORMFL_PEXTRD_FIRST = 1183,
    XED_IFORMFL_PEXTRD_LAST = 1184,
    XED_IFORMFL_PEXTRQ_FIRST = 1185,
    XED_IFORMFL_PEXTRQ_LAST = 1186,
    XED_IFORMFL_PEXTRW_FIRST = 1187,
    XED_IFORMFL_PEXTRW_LAST = 1188,
    XED_IFORMFL_PEXTRW_SSE4_FIRST = 1189,
    XED_IFORMFL_PEXTRW_SSE4_LAST = 1190,
    XED_IFORMFL_PF2ID_FIRST = 1191,
    XED_IFORMFL_PF2ID_LAST = 1192,
    XED_IFORMFL_PF2IW_FIRST = 1193,
    XED_IFORMFL_PF2IW_LAST = 1194,
    XED_IFORMFL_PFACC_FIRST = 1195,
    XED_IFORMFL_PFACC_LAST = 1196,
    XED_IFORMFL_PFADD_FIRST = 1197,
    XED_IFORMFL_PFADD_LAST = 1198,
    XED_IFORMFL_PFCMPEQ_FIRST = 1199,
    XED_IFORMFL_PFCMPEQ_LAST = 1200,
    XED_IFORMFL_PFCMPGE_FIRST = 1201,
    XED_IFORMFL_PFCMPGE_LAST = 1202,
    XED_IFORMFL_PFCMPGT_FIRST = 1203,
    XED_IFORMFL_PFCMPGT_LAST = 1204,
    XED_IFORMFL_PFCPIT1_FIRST = 1205,
    XED_IFORMFL_PFCPIT1_LAST = 1206,
    XED_IFORMFL_PFMAX_FIRST = 1207,
    XED_IFORMFL_PFMAX_LAST = 1208,
    XED_IFORMFL_PFMIN_FIRST = 1209,
    XED_IFORMFL_PFMIN_LAST = 1210,
    XED_IFORMFL_PFMUL_FIRST = 1211,
    XED_IFORMFL_PFMUL_LAST = 1212,
    XED_IFORMFL_PFNACC_FIRST = 1213,
    XED_IFORMFL_PFNACC_LAST = 1214,
    XED_IFORMFL_PFPNACC_FIRST = 1215,
    XED_IFORMFL_PFPNACC_LAST = 1216,
    XED_IFORMFL_PFRCP_FIRST = 1217,
    XED_IFORMFL_PFRCP_LAST = 1218,
    XED_IFORMFL_PFRCPIT2_FIRST = 1219,
    XED_IFORMFL_PFRCPIT2_LAST = 1220,
    XED_IFORMFL_PFRSQIT1_FIRST = 1221,
    XED_IFORMFL_PFRSQIT1_LAST = 1222,
    XED_IFORMFL_PFSQRT_FIRST = 1223,
    XED_IFORMFL_PFSQRT_LAST = 1224,
    XED_IFORMFL_PFSUB_FIRST = 1225,
    XED_IFORMFL_PFSUB_LAST = 1226,
    XED_IFORMFL_PFSUBR_FIRST = 1227,
    XED_IFORMFL_PFSUBR_LAST = 1228,
    XED_IFORMFL_PHADDD_FIRST = 1229,
    XED_IFORMFL_PHADDD_LAST = 1232,
    XED_IFORMFL_PHADDSW_FIRST = 1233,
    XED_IFORMFL_PHADDSW_LAST = 1236,
    XED_IFORMFL_PHADDW_FIRST = 1237,
    XED_IFORMFL_PHADDW_LAST = 1240,
    XED_IFORMFL_PHMINPOSUW_FIRST = 1241,
    XED_IFORMFL_PHMINPOSUW_LAST = 1242,
    XED_IFORMFL_PHSUBD_FIRST = 1243,
    XED_IFORMFL_PHSUBD_LAST = 1246,
    XED_IFORMFL_PHSUBSW_FIRST = 1247,
    XED_IFORMFL_PHSUBSW_LAST = 1250,
    XED_IFORMFL_PHSUBW_FIRST = 1251,
    XED_IFORMFL_PHSUBW_LAST = 1254,
    XED_IFORMFL_PI2FD_FIRST = 1255,
    XED_IFORMFL_PI2FD_LAST = 1256,
    XED_IFORMFL_PI2FW_FIRST = 1257,
    XED_IFORMFL_PI2FW_LAST = 1258,
    XED_IFORMFL_PINSRB_FIRST = 1259,
    XED_IFORMFL_PINSRB_LAST = 1260,
    XED_IFORMFL_PINSRD_FIRST = 1261,
    XED_IFORMFL_PINSRD_LAST = 1262,
    XED_IFORMFL_PINSRQ_FIRST = 1263,
    XED_IFORMFL_PINSRQ_LAST = 1264,
    XED_IFORMFL_PINSRW_FIRST = 1265,
    XED_IFORMFL_PINSRW_LAST = 1268,
    XED_IFORMFL_PMADDUBSW_FIRST = 1269,
    XED_IFORMFL_PMADDUBSW_LAST = 1272,
    XED_IFORMFL_PMADDWD_FIRST = 1273,
    XED_IFORMFL_PMADDWD_LAST = 1276,
    XED_IFORMFL_PMAXSB_FIRST = 1277,
    XED_IFORMFL_PMAXSB_LAST = 1278,
    XED_IFORMFL_PMAXSD_FIRST = 1279,
    XED_IFORMFL_PMAXSD_LAST = 1280,
    XED_IFORMFL_PMAXSW_FIRST = 1281,
    XED_IFORMFL_PMAXSW_LAST = 1284,
    XED_IFORMFL_PMAXUB_FIRST = 1285,
    XED_IFORMFL_PMAXUB_LAST = 1288,
    XED_IFORMFL_PMAXUD_FIRST = 1289,
    XED_IFORMFL_PMAXUD_LAST = 1290,
    XED_IFORMFL_PMAXUW_FIRST = 1291,
    XED_IFORMFL_PMAXUW_LAST = 1292,
    XED_IFORMFL_PMINSB_FIRST = 1293,
    XED_IFORMFL_PMINSB_LAST = 1294,
    XED_IFORMFL_PMINSD_FIRST = 1295,
    XED_IFORMFL_PMINSD_LAST = 1296,
    XED_IFORMFL_PMINSW_FIRST = 1297,
    XED_IFORMFL_PMINSW_LAST = 1300,
    XED_IFORMFL_PMINUB_FIRST = 1301,
    XED_IFORMFL_PMINUB_LAST = 1304,
    XED_IFORMFL_PMINUD_FIRST = 1305,
    XED_IFORMFL_PMINUD_LAST = 1306,
    XED_IFORMFL_PMINUW_FIRST = 1307,
    XED_IFORMFL_PMINUW_LAST = 1308,
    XED_IFORMFL_PMOVMSKB_FIRST = 1309,
    XED_IFORMFL_PMOVMSKB_LAST = 1310,
    XED_IFORMFL_PMOVSXBD_FIRST = 1311,
    XED_IFORMFL_PMOVSXBD_LAST = 1312,
    XED_IFORMFL_PMOVSXBQ_FIRST = 1313,
    XED_IFORMFL_PMOVSXBQ_LAST = 1314,
    XED_IFORMFL_PMOVSXBW_FIRST = 1315,
    XED_IFORMFL_PMOVSXBW_LAST = 1316,
    XED_IFORMFL_PMOVSXDQ_FIRST = 1317,
    XED_IFORMFL_PMOVSXDQ_LAST = 1318,
    XED_IFORMFL_PMOVSXWD_FIRST = 1319,
    XED_IFORMFL_PMOVSXWD_LAST = 1320,
    XED_IFORMFL_PMOVSXWQ_FIRST = 1321,
    XED_IFORMFL_PMOVSXWQ_LAST = 1322,
    XED_IFORMFL_PMOVZXBD_FIRST = 1323,
    XED_IFORMFL_PMOVZXBD_LAST = 1324,
    XED_IFORMFL_PMOVZXBQ_FIRST = 1325,
    XED_IFORMFL_PMOVZXBQ_LAST = 1326,
    XED_IFORMFL_PMOVZXBW_FIRST = 1327,
    XED_IFORMFL_PMOVZXBW_LAST = 1328,
    XED_IFORMFL_PMOVZXDQ_FIRST = 1329,
    XED_IFORMFL_PMOVZXDQ_LAST = 1330,
    XED_IFORMFL_PMOVZXWD_FIRST = 1331,
    XED_IFORMFL_PMOVZXWD_LAST = 1332,
    XED_IFORMFL_PMOVZXWQ_FIRST = 1333,
    XED_IFORMFL_PMOVZXWQ_LAST = 1334,
    XED_IFORMFL_PMULDQ_FIRST = 1335,
    XED_IFORMFL_PMULDQ_LAST = 1336,
    XED_IFORMFL_PMULHRSW_FIRST = 1337,
    XED_IFORMFL_PMULHRSW_LAST = 1340,
    XED_IFORMFL_PMULHRW_FIRST = 1341,
    XED_IFORMFL_PMULHRW_LAST = 1342,
    XED_IFORMFL_PMULHUW_FIRST = 1343,
    XED_IFORMFL_PMULHUW_LAST = 1346,
    XED_IFORMFL_PMULHW_FIRST = 1347,
    XED_IFORMFL_PMULHW_LAST = 1350,
    XED_IFORMFL_PMULLD_FIRST = 1351,
    XED_IFORMFL_PMULLD_LAST = 1352,
    XED_IFORMFL_PMULLW_FIRST = 1353,
    XED_IFORMFL_PMULLW_LAST = 1356,
    XED_IFORMFL_PMULUDQ_FIRST = 1357,
    XED_IFORMFL_PMULUDQ_LAST = 1360,
    XED_IFORMFL_POP_FIRST = 1361,
    XED_IFORMFL_POP_LAST = 1368,
    XED_IFORMFL_POPA_FIRST = 1369,
    XED_IFORMFL_POPAD_FIRST = 1370,
    XED_IFORMFL_POPCNT_FIRST = 1371,
    XED_IFORMFL_POPCNT_LAST = 1372,
    XED_IFORMFL_POPF_FIRST = 1373,
    XED_IFORMFL_POPFD_FIRST = 1374,
    XED_IFORMFL_POPFQ_FIRST = 1375,
    XED_IFORMFL_POR_FIRST = 1376,
    XED_IFORMFL_POR_LAST = 1379,
    XED_IFORMFL_PREFETCHNTA_FIRST = 1380,
    XED_IFORMFL_PREFETCHT0_FIRST = 1381,
    XED_IFORMFL_PREFETCHT1_FIRST = 1382,
    XED_IFORMFL_PREFETCHT2_FIRST = 1383,
    XED_IFORMFL_PREFETCHW_FIRST = 1384,
    XED_IFORMFL_PREFETCHW_LAST = 1385,
    XED_IFORMFL_PREFETCHWT1_FIRST = 1386,
    XED_IFORMFL_PREFETCH_EXCLUSIVE_FIRST = 1387,
    XED_IFORMFL_PREFETCH_RESERVED_FIRST = 1388,
    XED_IFORMFL_PREFETCH_RESERVED_LAST = 1391,
    XED_IFORMFL_PSADBW_FIRST = 1392,
    XED_IFORMFL_PSADBW_LAST = 1395,
    XED_IFORMFL_PSHUFB_FIRST = 1396,
    XED_IFORMFL_PSHUFB_LAST = 1399,
    XED_IFORMFL_PSHUFD_FIRST = 1400,
    XED_IFORMFL_PSHUFD_LAST = 1401,
    XED_IFORMFL_PSHUFHW_FIRST = 1402,
    XED_IFORMFL_PSHUFHW_LAST = 1403,
    XED_IFORMFL_PSHUFLW_FIRST = 1404,
    XED_IFORMFL_PSHUFLW_LAST = 1405,
    XED_IFORMFL_PSHUFW_FIRST = 1406,
    XED_IFORMFL_PSHUFW_LAST = 1407,
    XED_IFORMFL_PSIGNB_FIRST = 1408,
    XED_IFORMFL_PSIGNB_LAST = 1411,
    XED_IFORMFL_PSIGND_FIRST = 1412,
    XED_IFORMFL_PSIGND_LAST = 1415,
    XED_IFORMFL_PSIGNW_FIRST = 1416,
    XED_IFORMFL_PSIGNW_LAST = 1419,
    XED_IFORMFL_PSLLD_FIRST = 1420,
    XED_IFORMFL_PSLLD_LAST = 1425,
    XED_IFORMFL_PSLLDQ_FIRST = 1426,
    XED_IFORMFL_PSLLQ_FIRST = 1427,
    XED_IFORMFL_PSLLQ_LAST = 1432,
    XED_IFORMFL_PSLLW_FIRST = 1433,
    XED_IFORMFL_PSLLW_LAST = 1438,
    XED_IFORMFL_PSRAD_FIRST = 1439,
    XED_IFORMFL_PSRAD_LAST = 1444,
    XED_IFORMFL_PSRAW_FIRST = 1445,
    XED_IFORMFL_PSRAW_LAST = 1450,
    XED_IFORMFL_PSRLD_FIRST = 1451,
    XED_IFORMFL_PSRLD_LAST = 1456,
    XED_IFORMFL_PSRLDQ_FIRST = 1457,
    XED_IFORMFL_PSRLQ_FIRST = 1458,
    XED_IFORMFL_PSRLQ_LAST = 1463,
    XED_IFORMFL_PSRLW_FIRST = 1464,
    XED_IFORMFL_PSRLW_LAST = 1469,
    XED_IFORMFL_PSUBB_FIRST = 1470,
    XED_IFORMFL_PSUBB_LAST = 1473,
    XED_IFORMFL_PSUBD_FIRST = 1474,
    XED_IFORMFL_PSUBD_LAST = 1477,
    XED_IFORMFL_PSUBQ_FIRST = 1478,
    XED_IFORMFL_PSUBQ_LAST = 1481,
    XED_IFORMFL_PSUBSB_FIRST = 1482,
    XED_IFORMFL_PSUBSB_LAST = 1485,
    XED_IFORMFL_PSUBSW_FIRST = 1486,
    XED_IFORMFL_PSUBSW_LAST = 1489,
    XED_IFORMFL_PSUBUSB_FIRST = 1490,
    XED_IFORMFL_PSUBUSB_LAST = 1493,
    XED_IFORMFL_PSUBUSW_FIRST = 1494,
    XED_IFORMFL_PSUBUSW_LAST = 1497,
    XED_IFORMFL_PSUBW_FIRST = 1498,
    XED_IFORMFL_PSUBW_LAST = 1501,
    XED_IFORMFL_PSWAPD_FIRST = 1502,
    XED_IFORMFL_PSWAPD_LAST = 1503,
    XED_IFORMFL_PTEST_FIRST = 1504,
    XED_IFORMFL_PTEST_LAST = 1505,
    XED_IFORMFL_PTWRITE_FIRST = 1506,
    XED_IFORMFL_PTWRITE_LAST = 1507,
    XED_IFORMFL_PUNPCKHBW_FIRST = 1508,
    XED_IFORMFL_PUNPCKHBW_LAST = 1511,
    XED_IFORMFL_PUNPCKHDQ_FIRST = 1512,
    XED_IFORMFL_PUNPCKHDQ_LAST = 1515,
    XED_IFORMFL_PUNPCKHQDQ_FIRST = 1516,
    XED_IFORMFL_PUNPCKHQDQ_LAST = 1517,
    XED_IFORMFL_PUNPCKHWD_FIRST = 1518,
    XED_IFORMFL_PUNPCKHWD_LAST = 1521,
    XED_IFORMFL_PUNPCKLBW_FIRST = 1522,
    XED_IFORMFL_PUNPCKLBW_LAST = 1525,
    XED_IFORMFL_PUNPCKLDQ_FIRST = 1526,
    XED_IFORMFL_PUNPCKLDQ_LAST = 1529,
    XED_IFORMFL_PUNPCKLQDQ_FIRST = 1530,
    XED_IFORMFL_PUNPCKLQDQ_LAST = 1531,
    XED_IFORMFL_PUNPCKLWD_FIRST = 1532,
    XED_IFORMFL_PUNPCKLWD_LAST = 1535,
    XED_IFORMFL_PUSH_FIRST = 1536,
    XED_IFORMFL_PUSH_LAST = 1546,
    XED_IFORMFL_PUSHA_FIRST = 1547,
    XED_IFORMFL_PUSHAD_FIRST = 1548,
    XED_IFORMFL_PUSHF_FIRST = 1549,
    XED_IFORMFL_PUSHFD_FIRST = 1550,
    XED_IFORMFL_PUSHFQ_FIRST = 1551,
    XED_IFORMFL_PXOR_FIRST = 1552,
    XED_IFORMFL_PXOR_LAST = 1555,
    XED_IFORMFL_RCL_FIRST = 1556,
    XED_IFORMFL_RCL_LAST = 1567,
    XED_IFORMFL_RCPPS_FIRST = 1568,
    XED_IFORMFL_RCPPS_LAST = 1569,
    XED_IFORMFL_RCPSS_FIRST = 1570,
    XED_IFORMFL_RCPSS_LAST = 1571,
    XED_IFORMFL_RCR_FIRST = 1572,
    XED_IFORMFL_RCR_LAST = 1583,
    XED_IFORMFL_RDFSBASE_FIRST = 1584,
    XED_IFORMFL_RDGSBASE_FIRST = 1585,
    XED_IFORMFL_RDMSR_FIRST = 1586,
    XED_IFORMFL_RDPKRU_FIRST = 1587,
    XED_IFORMFL_RDPMC_FIRST = 1588,
    XED_IFORMFL_RDRAND_FIRST = 1589,
    XED_IFORMFL_RDSEED_FIRST = 1590,
    XED_IFORMFL_RDSSPD_FIRST = 1591,
    XED_IFORMFL_RDSSPQ_FIRST = 1592,
    XED_IFORMFL_RDTSC_FIRST = 1593,
    XED_IFORMFL_RDTSCP_FIRST = 1594,
    XED_IFORMFL_REPE_CMPSB_FIRST = 1595,
    XED_IFORMFL_REPE_CMPSD_FIRST = 1596,
    XED_IFORMFL_REPE_CMPSQ_FIRST = 1597,
    XED_IFORMFL_REPE_CMPSW_FIRST = 1598,
    XED_IFORMFL_REPE_SCASB_FIRST = 1599,
    XED_IFORMFL_REPE_SCASD_FIRST = 1600,
    XED_IFORMFL_REPE_SCASQ_FIRST = 1601,
    XED_IFORMFL_REPE_SCASW_FIRST = 1602,
    XED_IFORMFL_REPNE_CMPSB_FIRST = 1603,
    XED_IFORMFL_REPNE_CMPSD_FIRST = 1604,
    XED_IFORMFL_REPNE_CMPSQ_FIRST = 1605,
    XED_IFORMFL_REPNE_CMPSW_FIRST = 1606,
    XED_IFORMFL_REPNE_SCASB_FIRST = 1607,
    XED_IFORMFL_REPNE_SCASD_FIRST = 1608,
    XED_IFORMFL_REPNE_SCASQ_FIRST = 1609,
    XED_IFORMFL_REPNE_SCASW_FIRST = 1610,
    XED_IFORMFL_REP_INSB_FIRST = 1611,
    XED_IFORMFL_REP_INSD_FIRST = 1612,
    XED_IFORMFL_REP_INSW_FIRST = 1613,
    XED_IFORMFL_REP_LODSB_FIRST = 1614,
    XED_IFORMFL_REP_LODSD_FIRST = 1615,
    XED_IFORMFL_REP_LODSQ_FIRST = 1616,
    XED_IFORMFL_REP_LODSW_FIRST = 1617,
    XED_IFORMFL_REP_MOVSB_FIRST = 1618,
    XED_IFORMFL_REP_MOVSD_FIRST = 1619,
    XED_IFORMFL_REP_MOVSQ_FIRST = 1620,
    XED_IFORMFL_REP_MOVSW_FIRST = 1621,
    XED_IFORMFL_REP_OUTSB_FIRST = 1622,
    XED_IFORMFL_REP_OUTSD_FIRST = 1623,
    XED_IFORMFL_REP_OUTSW_FIRST = 1624,
    XED_IFORMFL_REP_STOSB_FIRST = 1625,
    XED_IFORMFL_REP_STOSD_FIRST = 1626,
    XED_IFORMFL_REP_STOSQ_FIRST = 1627,
    XED_IFORMFL_REP_STOSW_FIRST = 1628,
    XED_IFORMFL_RET_FAR_FIRST = 1629,
    XED_IFORMFL_RET_FAR_LAST = 1630,
    XED_IFORMFL_RET_NEAR_FIRST = 1631,
    XED_IFORMFL_RET_NEAR_LAST = 1632,
    XED_IFORMFL_ROL_FIRST = 1633,
    XED_IFORMFL_ROL_LAST = 1644,
    XED_IFORMFL_ROR_FIRST = 1645,
    XED_IFORMFL_ROR_LAST = 1656,
    XED_IFORMFL_RORX_FIRST = 1657,
    XED_IFORMFL_RORX_LAST = 1660,
    XED_IFORMFL_ROUNDPD_FIRST = 1661,
    XED_IFORMFL_ROUNDPD_LAST = 1662,
    XED_IFORMFL_ROUNDPS_FIRST = 1663,
    XED_IFORMFL_ROUNDPS_LAST = 1664,
    XED_IFORMFL_ROUNDSD_FIRST = 1665,
    XED_IFORMFL_ROUNDSD_LAST = 1666,
    XED_IFORMFL_ROUNDSS_FIRST = 1667,
    XED_IFORMFL_ROUNDSS_LAST = 1668,
    XED_IFORMFL_RSM_FIRST = 1669,
    XED_IFORMFL_RSQRTPS_FIRST = 1670,
    XED_IFORMFL_RSQRTPS_LAST = 1671,
    XED_IFORMFL_RSQRTSS_FIRST = 1672,
    XED_IFORMFL_RSQRTSS_LAST = 1673,
    XED_IFORMFL_RSTORSSP_FIRST = 1674,
    XED_IFORMFL_SAHF_FIRST = 1675,
    XED_IFORMFL_SALC_FIRST = 1676,
    XED_IFORMFL_SAR_FIRST = 1677,
    XED_IFORMFL_SAR_LAST = 1688,
    XED_IFORMFL_SARX_FIRST = 1689,
    XED_IFORMFL_SARX_LAST = 1692,
    XED_IFORMFL_SAVESSP_FIRST = 1693,
    XED_IFORMFL_SBB_FIRST = 1694,
    XED_IFORMFL_SBB_LAST = 1711,
    XED_IFORMFL_SBB_LOCK_FIRST = 1712,
    XED_IFORMFL_SBB_LOCK_LAST = 1717,
    XED_IFORMFL_SCASB_FIRST = 1718,
    XED_IFORMFL_SCASD_FIRST = 1719,
    XED_IFORMFL_SCASQ_FIRST = 1720,
    XED_IFORMFL_SCASW_FIRST = 1721,
    XED_IFORMFL_SETB_FIRST = 1722,
    XED_IFORMFL_SETB_LAST = 1723,
    XED_IFORMFL_SETBE_FIRST = 1724,
    XED_IFORMFL_SETBE_LAST = 1725,
    XED_IFORMFL_SETL_FIRST = 1726,
    XED_IFORMFL_SETL_LAST = 1727,
    XED_IFORMFL_SETLE_FIRST = 1728,
    XED_IFORMFL_SETLE_LAST = 1729,
    XED_IFORMFL_SETNB_FIRST = 1730,
    XED_IFORMFL_SETNB_LAST = 1731,
    XED_IFORMFL_SETNBE_FIRST = 1732,
    XED_IFORMFL_SETNBE_LAST = 1733,
    XED_IFORMFL_SETNL_FIRST = 1734,
    XED_IFORMFL_SETNL_LAST = 1735,
    XED_IFORMFL_SETNLE_FIRST = 1736,
    XED_IFORMFL_SETNLE_LAST = 1737,
    XED_IFORMFL_SETNO_FIRST = 1738,
    XED_IFORMFL_SETNO_LAST = 1739,
    XED_IFORMFL_SETNP_FIRST = 1740,
    XED_IFORMFL_SETNP_LAST = 1741,
    XED_IFORMFL_SETNS_FIRST = 1742,
    XED_IFORMFL_SETNS_LAST = 1743,
    XED_IFORMFL_SETNZ_FIRST = 1744,
    XED_IFORMFL_SETNZ_LAST = 1745,
    XED_IFORMFL_SETO_FIRST = 1746,
    XED_IFORMFL_SETO_LAST = 1747,
    XED_IFORMFL_SETP_FIRST = 1748,
    XED_IFORMFL_SETP_LAST = 1749,
    XED_IFORMFL_SETS_FIRST = 1750,
    XED_IFORMFL_SETS_LAST = 1751,
    XED_IFORMFL_SETSSBSY_FIRST = 1752,
    XED_IFORMFL_SETZ_FIRST = 1753,
    XED_IFORMFL_SETZ_LAST = 1754,
    XED_IFORMFL_SFENCE_FIRST = 1755,
    XED_IFORMFL_SGDT_FIRST = 1756,
    XED_IFORMFL_SGDT_LAST = 1757,
    XED_IFORMFL_SHA1MSG1_FIRST = 1758,
    XED_IFORMFL_SHA1MSG1_LAST = 1759,
    XED_IFORMFL_SHA1MSG2_FIRST = 1760,
    XED_IFORMFL_SHA1MSG2_LAST = 1761,
    XED_IFORMFL_SHA1NEXTE_FIRST = 1762,
    XED_IFORMFL_SHA1NEXTE_LAST = 1763,
    XED_IFORMFL_SHA1RNDS4_FIRST = 1764,
    XED_IFORMFL_SHA1RNDS4_LAST = 1765,
    XED_IFORMFL_SHA256MSG1_FIRST = 1766,
    XED_IFORMFL_SHA256MSG1_LAST = 1767,
    XED_IFORMFL_SHA256MSG2_FIRST = 1768,
    XED_IFORMFL_SHA256MSG2_LAST = 1769,
    XED_IFORMFL_SHA256RNDS2_FIRST = 1770,
    XED_IFORMFL_SHA256RNDS2_LAST = 1771,
    XED_IFORMFL_SHL_FIRST = 1772,
    XED_IFORMFL_SHL_LAST = 1795,
    XED_IFORMFL_SHLD_FIRST = 1796,
    XED_IFORMFL_SHLD_LAST = 1799,
    XED_IFORMFL_SHLX_FIRST = 1800,
    XED_IFORMFL_SHLX_LAST = 1803,
    XED_IFORMFL_SHR_FIRST = 1804,
    XED_IFORMFL_SHR_LAST = 1815,
    XED_IFORMFL_SHRD_FIRST = 1816,
    XED_IFORMFL_SHRD_LAST = 1819,
    XED_IFORMFL_SHRX_FIRST = 1820,
    XED_IFORMFL_SHRX_LAST = 1823,
    XED_IFORMFL_SHUFPD_FIRST = 1824,
    XED_IFORMFL_SHUFPD_LAST = 1825,
    XED_IFORMFL_SHUFPS_FIRST = 1826,
    XED_IFORMFL_SHUFPS_LAST = 1827,
    XED_IFORMFL_SIDT_FIRST = 1828,
    XED_IFORMFL_SIDT_LAST = 1829,
    XED_IFORMFL_SKINIT_FIRST = 1830,
    XED_IFORMFL_SLDT_FIRST = 1831,
    XED_IFORMFL_SLDT_LAST = 1832,
    XED_IFORMFL_SLWPCB_FIRST = 1833,
    XED_IFORMFL_SMSW_FIRST = 1834,
    XED_IFORMFL_SMSW_LAST = 1835,
    XED_IFORMFL_SQRTPD_FIRST = 1836,
    XED_IFORMFL_SQRTPD_LAST = 1837,
    XED_IFORMFL_SQRTPS_FIRST = 1838,
    XED_IFORMFL_SQRTPS_LAST = 1839,
    XED_IFORMFL_SQRTSD_FIRST = 1840,
    XED_IFORMFL_SQRTSD_LAST = 1841,
    XED_IFORMFL_SQRTSS_FIRST = 1842,
    XED_IFORMFL_SQRTSS_LAST = 1843,
    XED_IFORMFL_STAC_FIRST = 1844,
    XED_IFORMFL_STC_FIRST = 1845,
    XED_IFORMFL_STD_FIRST = 1846,
    XED_IFORMFL_STGI_FIRST = 1847,
    XED_IFORMFL_STI_FIRST = 1848,
    XED_IFORMFL_STMXCSR_FIRST = 1849,
    XED_IFORMFL_STOSB_FIRST = 1850,
    XED_IFORMFL_STOSD_FIRST = 1851,
    XED_IFORMFL_STOSQ_FIRST = 1852,
    XED_IFORMFL_STOSW_FIRST = 1853,
    XED_IFORMFL_STR_FIRST = 1854,
    XED_IFORMFL_STR_LAST = 1855,
    XED_IFORMFL_SUB_FIRST = 1856,
    XED_IFORMFL_SUB_LAST = 1873,
    XED_IFORMFL_SUBPD_FIRST = 1874,
    XED_IFORMFL_SUBPD_LAST = 1875,
    XED_IFORMFL_SUBPS_FIRST = 1876,
    XED_IFORMFL_SUBPS_LAST = 1877,
    XED_IFORMFL_SUBSD_FIRST = 1878,
    XED_IFORMFL_SUBSD_LAST = 1879,
    XED_IFORMFL_SUBSS_FIRST = 1880,
    XED_IFORMFL_SUBSS_LAST = 1881,
    XED_IFORMFL_SUB_LOCK_FIRST = 1882,
    XED_IFORMFL_SUB_LOCK_LAST = 1887,
    XED_IFORMFL_SWAPGS_FIRST = 1888,
    XED_IFORMFL_SYSCALL_FIRST = 1889,
    XED_IFORMFL_SYSCALL_AMD_FIRST = 1890,
    XED_IFORMFL_SYSENTER_FIRST = 1891,
    XED_IFORMFL_SYSEXIT_FIRST = 1892,
    XED_IFORMFL_SYSRET_FIRST = 1893,
    XED_IFORMFL_SYSRET_AMD_FIRST = 1894,
    XED_IFORMFL_T1MSKC_FIRST = 1895,
    XED_IFORMFL_T1MSKC_LAST = 1898,
    XED_IFORMFL_TEST_FIRST = 1899,
    XED_IFORMFL_TEST_LAST = 1912,
    XED_IFORMFL_TZCNT_FIRST = 1913,
    XED_IFORMFL_TZCNT_LAST = 1914,
    XED_IFORMFL_TZMSK_FIRST = 1915,
    XED_IFORMFL_TZMSK_LAST = 1918,
    XED_IFORMFL_UCOMISD_FIRST = 1919,
    XED_IFORMFL_UCOMISD_LAST = 1920,
    XED_IFORMFL_UCOMISS_FIRST = 1921,
    XED_IFORMFL_UCOMISS_LAST = 1922,
    XED_IFORMFL_UD0_FIRST = 1923,
    XED_IFORMFL_UD1_FIRST = 1924,
    XED_IFORMFL_UD1_LAST = 1925,
    XED_IFORMFL_UD2_FIRST = 1926,
    XED_IFORMFL_UNPCKHPD_FIRST = 1927,
    XED_IFORMFL_UNPCKHPD_LAST = 1928,
    XED_IFORMFL_UNPCKHPS_FIRST = 1929,
    XED_IFORMFL_UNPCKHPS_LAST = 1930,
    XED_IFORMFL_UNPCKLPD_FIRST = 1931,
    XED_IFORMFL_UNPCKLPD_LAST = 1932,
    XED_IFORMFL_UNPCKLPS_FIRST = 1933,
    XED_IFORMFL_UNPCKLPS_LAST = 1934,
    XED_IFORMFL_V4FMADDPS_FIRST = 1935,
    XED_IFORMFL_V4FMADDSS_FIRST = 1936,
    XED_IFORMFL_V4FNMADDPS_FIRST = 1937,
    XED_IFORMFL_V4FNMADDSS_FIRST = 1938,
    XED_IFORMFL_VADDPD_FIRST = 1939,
    XED_IFORMFL_VADDPD_LAST = 1948,
    XED_IFORMFL_VADDPS_FIRST = 1949,
    XED_IFORMFL_VADDPS_LAST = 1958,
    XED_IFORMFL_VADDSD_FIRST = 1959,
    XED_IFORMFL_VADDSD_LAST = 1962,
    XED_IFORMFL_VADDSS_FIRST = 1963,
    XED_IFORMFL_VADDSS_LAST = 1966,
    XED_IFORMFL_VADDSUBPD_FIRST = 1967,
    XED_IFORMFL_VADDSUBPD_LAST = 1970,
    XED_IFORMFL_VADDSUBPS_FIRST = 1971,
    XED_IFORMFL_VADDSUBPS_LAST = 1974,
    XED_IFORMFL_VAESDEC_FIRST = 1975,
    XED_IFORMFL_VAESDEC_LAST = 1976,
    XED_IFORMFL_VAESDECLAST_FIRST = 1977,
    XED_IFORMFL_VAESDECLAST_LAST = 1978,
    XED_IFORMFL_VAESENC_FIRST = 1979,
    XED_IFORMFL_VAESENC_LAST = 1980,
    XED_IFORMFL_VAESENCLAST_FIRST = 1981,
    XED_IFORMFL_VAESENCLAST_LAST = 1982,
    XED_IFORMFL_VAESIMC_FIRST = 1983,
    XED_IFORMFL_VAESIMC_LAST = 1984,
    XED_IFORMFL_VAESKEYGENASSIST_FIRST = 1985,
    XED_IFORMFL_VAESKEYGENASSIST_LAST = 1986,
    XED_IFORMFL_VALIGND_FIRST = 1987,
    XED_IFORMFL_VALIGND_LAST = 1992,
    XED_IFORMFL_VALIGNQ_FIRST = 1993,
    XED_IFORMFL_VALIGNQ_LAST = 1998,
    XED_IFORMFL_VANDNPD_FIRST = 1999,
    XED_IFORMFL_VANDNPD_LAST = 2008,
    XED_IFORMFL_VANDNPS_FIRST = 2009,
    XED_IFORMFL_VANDNPS_LAST = 2018,
    XED_IFORMFL_VANDPD_FIRST = 2019,
    XED_IFORMFL_VANDPD_LAST = 2028,
    XED_IFORMFL_VANDPS_FIRST = 2029,
    XED_IFORMFL_VANDPS_LAST = 2038,
    XED_IFORMFL_VBLENDMPD_FIRST = 2039,
    XED_IFORMFL_VBLENDMPD_LAST = 2044,
    XED_IFORMFL_VBLENDMPS_FIRST = 2045,
    XED_IFORMFL_VBLENDMPS_LAST = 2050,
    XED_IFORMFL_VBLENDPD_FIRST = 2051,
    XED_IFORMFL_VBLENDPD_LAST = 2054,
    XED_IFORMFL_VBLENDPS_FIRST = 2055,
    XED_IFORMFL_VBLENDPS_LAST = 2058,
    XED_IFORMFL_VBLENDVPD_FIRST = 2059,
    XED_IFORMFL_VBLENDVPD_LAST = 2062,
    XED_IFORMFL_VBLENDVPS_FIRST = 2063,
    XED_IFORMFL_VBLENDVPS_LAST = 2066,
    XED_IFORMFL_VBROADCASTF128_FIRST = 2067,
    XED_IFORMFL_VBROADCASTF32X2_FIRST = 2068,
    XED_IFORMFL_VBROADCASTF32X2_LAST = 2071,
    XED_IFORMFL_VBROADCASTF32X4_FIRST = 2072,
    XED_IFORMFL_VBROADCASTF32X4_LAST = 2073,
    XED_IFORMFL_VBROADCASTF32X8_FIRST = 2074,
    XED_IFORMFL_VBROADCASTF64X2_FIRST = 2075,
    XED_IFORMFL_VBROADCASTF64X2_LAST = 2076,
    XED_IFORMFL_VBROADCASTF64X4_FIRST = 2077,
    XED_IFORMFL_VBROADCASTI128_FIRST = 2078,
    XED_IFORMFL_VBROADCASTI32X2_FIRST = 2079,
    XED_IFORMFL_VBROADCASTI32X2_LAST = 2084,
    XED_IFORMFL_VBROADCASTI32X4_FIRST = 2085,
    XED_IFORMFL_VBROADCASTI32X4_LAST = 2086,
    XED_IFORMFL_VBROADCASTI32X8_FIRST = 2087,
    XED_IFORMFL_VBROADCASTI64X2_FIRST = 2088,
    XED_IFORMFL_VBROADCASTI64X2_LAST = 2089,
    XED_IFORMFL_VBROADCASTI64X4_FIRST = 2090,
    XED_IFORMFL_VBROADCASTSD_FIRST = 2091,
    XED_IFORMFL_VBROADCASTSD_LAST = 2096,
    XED_IFORMFL_VBROADCASTSS_FIRST = 2097,
    XED_IFORMFL_VBROADCASTSS_LAST = 2106,
    XED_IFORMFL_VCMPPD_FIRST = 2107,
    XED_IFORMFL_VCMPPD_LAST = 2116,
    XED_IFORMFL_VCMPPS_FIRST = 2117,
    XED_IFORMFL_VCMPPS_LAST = 2126,
    XED_IFORMFL_VCMPSD_FIRST = 2127,
    XED_IFORMFL_VCMPSD_LAST = 2130,
    XED_IFORMFL_VCMPSS_FIRST = 2131,
    XED_IFORMFL_VCMPSS_LAST = 2134,
    XED_IFORMFL_VCOMISD_FIRST = 2135,
    XED_IFORMFL_VCOMISD_LAST = 2138,
    XED_IFORMFL_VCOMISS_FIRST = 2139,
    XED_IFORMFL_VCOMISS_LAST = 2142,
    XED_IFORMFL_VCOMPRESSPD_FIRST = 2143,
    XED_IFORMFL_VCOMPRESSPD_LAST = 2148,
    XED_IFORMFL_VCOMPRESSPS_FIRST = 2149,
    XED_IFORMFL_VCOMPRESSPS_LAST = 2154,
    XED_IFORMFL_VCVTDQ2PD_FIRST = 2155,
    XED_IFORMFL_VCVTDQ2PD_LAST = 2164,
    XED_IFORMFL_VCVTDQ2PS_FIRST = 2165,
    XED_IFORMFL_VCVTDQ2PS_LAST = 2174,
    XED_IFORMFL_VCVTPD2DQ_FIRST = 2175,
    XED_IFORMFL_VCVTPD2DQ_LAST = 2184,
    XED_IFORMFL_VCVTPD2PS_FIRST = 2185,
    XED_IFORMFL_VCVTPD2PS_LAST = 2194,
    XED_IFORMFL_VCVTPD2QQ_FIRST = 2195,
    XED_IFORMFL_VCVTPD2QQ_LAST = 2200,
    XED_IFORMFL_VCVTPD2UDQ_FIRST = 2201,
    XED_IFORMFL_VCVTPD2UDQ_LAST = 2206,
    XED_IFORMFL_VCVTPD2UQQ_FIRST = 2207,
    XED_IFORMFL_VCVTPD2UQQ_LAST = 2212,
    XED_IFORMFL_VCVTPH2PS_FIRST = 2213,
    XED_IFORMFL_VCVTPH2PS_LAST = 2222,
    XED_IFORMFL_VCVTPS2DQ_FIRST = 2223,
    XED_IFORMFL_VCVTPS2DQ_LAST = 2232,
    XED_IFORMFL_VCVTPS2PD_FIRST = 2233,
    XED_IFORMFL_VCVTPS2PD_LAST = 2242,
    XED_IFORMFL_VCVTPS2PH_FIRST = 2243,
    XED_IFORMFL_VCVTPS2PH_LAST = 2252,
    XED_IFORMFL_VCVTPS2QQ_FIRST = 2253,
    XED_IFORMFL_VCVTPS2QQ_LAST = 2258,
    XED_IFORMFL_VCVTPS2UDQ_FIRST = 2259,
    XED_IFORMFL_VCVTPS2UDQ_LAST = 2264,
    XED_IFORMFL_VCVTPS2UQQ_FIRST = 2265,
    XED_IFORMFL_VCVTPS2UQQ_LAST = 2270,
    XED_IFORMFL_VCVTQQ2PD_FIRST = 2271,
    XED_IFORMFL_VCVTQQ2PD_LAST = 2276,
    XED_IFORMFL_VCVTQQ2PS_FIRST = 2277,
    XED_IFORMFL_VCVTQQ2PS_LAST = 2282,
    XED_IFORMFL_VCVTSD2SI_FIRST = 2283,
    XED_IFORMFL_VCVTSD2SI_LAST = 2290,
    XED_IFORMFL_VCVTSD2SS_FIRST = 2291,
    XED_IFORMFL_VCVTSD2SS_LAST = 2294,
    XED_IFORMFL_VCVTSD2USI_FIRST = 2295,
    XED_IFORMFL_VCVTSD2USI_LAST = 2298,
    XED_IFORMFL_VCVTSI2SD_FIRST = 2299,
    XED_IFORMFL_VCVTSI2SD_LAST = 2306,
    XED_IFORMFL_VCVTSI2SS_FIRST = 2307,
    XED_IFORMFL_VCVTSI2SS_LAST = 2314,
    XED_IFORMFL_VCVTSS2SD_FIRST = 2315,
    XED_IFORMFL_VCVTSS2SD_LAST = 2318,
    XED_IFORMFL_VCVTSS2SI_FIRST = 2319,
    XED_IFORMFL_VCVTSS2SI_LAST = 2326,
    XED_IFORMFL_VCVTSS2USI_FIRST = 2327,
    XED_IFORMFL_VCVTSS2USI_LAST = 2330,
    XED_IFORMFL_VCVTTPD2DQ_FIRST = 2331,
    XED_IFORMFL_VCVTTPD2DQ_LAST = 2340,
    XED_IFORMFL_VCVTTPD2QQ_FIRST = 2341,
    XED_IFORMFL_VCVTTPD2QQ_LAST = 2346,
    XED_IFORMFL_VCVTTPD2UDQ_FIRST = 2347,
    XED_IFORMFL_VCVTTPD2UDQ_LAST = 2352,
    XED_IFORMFL_VCVTTPD2UQQ_FIRST = 2353,
    XED_IFORMFL_VCVTTPD2UQQ_LAST = 2358,
    XED_IFORMFL_VCVTTPS2DQ_FIRST = 2359,
    XED_IFORMFL_VCVTTPS2DQ_LAST = 2368,
    XED_IFORMFL_VCVTTPS2QQ_FIRST = 2369,
    XED_IFORMFL_VCVTTPS2QQ_LAST = 2374,
    XED_IFORMFL_VCVTTPS2UDQ_FIRST = 2375,
    XED_IFORMFL_VCVTTPS2UDQ_LAST = 2380,
    XED_IFORMFL_VCVTTPS2UQQ_FIRST = 2381,
    XED_IFORMFL_VCVTTPS2UQQ_LAST = 2386,
    XED_IFORMFL_VCVTTSD2SI_FIRST = 2387,
    XED_IFORMFL_VCVTTSD2SI_LAST = 2394,
    XED_IFORMFL_VCVTTSD2USI_FIRST = 2395,
    XED_IFORMFL_VCVTTSD2USI_LAST = 2398,
    XED_IFORMFL_VCVTTSS2SI_FIRST = 2399,
    XED_IFORMFL_VCVTTSS2SI_LAST = 2406,
    XED_IFORMFL_VCVTTSS2USI_FIRST = 2407,
    XED_IFORMFL_VCVTTSS2USI_LAST = 2410,
    XED_IFORMFL_VCVTUDQ2PD_FIRST = 2411,
    XED_IFORMFL_VCVTUDQ2PD_LAST = 2416,
    XED_IFORMFL_VCVTUDQ2PS_FIRST = 2417,
    XED_IFORMFL_VCVTUDQ2PS_LAST = 2422,
    XED_IFORMFL_VCVTUQQ2PD_FIRST = 2423,
    XED_IFORMFL_VCVTUQQ2PD_LAST = 2428,
    XED_IFORMFL_VCVTUQQ2PS_FIRST = 2429,
    XED_IFORMFL_VCVTUQQ2PS_LAST = 2434,
    XED_IFORMFL_VCVTUSI2SD_FIRST = 2435,
    XED_IFORMFL_VCVTUSI2SD_LAST = 2438,
    XED_IFORMFL_VCVTUSI2SS_FIRST = 2439,
    XED_IFORMFL_VCVTUSI2SS_LAST = 2442,
    XED_IFORMFL_VDBPSADBW_FIRST = 2443,
    XED_IFORMFL_VDBPSADBW_LAST = 2448,
    XED_IFORMFL_VDIVPD_FIRST = 2449,
    XED_IFORMFL_VDIVPD_LAST = 2458,
    XED_IFORMFL_VDIVPS_FIRST = 2459,
    XED_IFORMFL_VDIVPS_LAST = 2468,
    XED_IFORMFL_VDIVSD_FIRST = 2469,
    XED_IFORMFL_VDIVSD_LAST = 2472,
    XED_IFORMFL_VDIVSS_FIRST = 2473,
    XED_IFORMFL_VDIVSS_LAST = 2476,
    XED_IFORMFL_VDPPD_FIRST = 2477,
    XED_IFORMFL_VDPPD_LAST = 2478,
    XED_IFORMFL_VDPPS_FIRST = 2479,
    XED_IFORMFL_VDPPS_LAST = 2482,
    XED_IFORMFL_VERR_FIRST = 2483,
    XED_IFORMFL_VERR_LAST = 2484,
    XED_IFORMFL_VERW_FIRST = 2485,
    XED_IFORMFL_VERW_LAST = 2486,
    XED_IFORMFL_VEXP2PD_FIRST = 2487,
    XED_IFORMFL_VEXP2PD_LAST = 2488,
    XED_IFORMFL_VEXP2PS_FIRST = 2489,
    XED_IFORMFL_VEXP2PS_LAST = 2490,
    XED_IFORMFL_VEXPANDPD_FIRST = 2491,
    XED_IFORMFL_VEXPANDPD_LAST = 2496,
    XED_IFORMFL_VEXPANDPS_FIRST = 2497,
    XED_IFORMFL_VEXPANDPS_LAST = 2502,
    XED_IFORMFL_VEXTRACTF128_FIRST = 2503,
    XED_IFORMFL_VEXTRACTF128_LAST = 2504,
    XED_IFORMFL_VEXTRACTF32X4_FIRST = 2505,
    XED_IFORMFL_VEXTRACTF32X4_LAST = 2508,
    XED_IFORMFL_VEXTRACTF32X8_FIRST = 2509,
    XED_IFORMFL_VEXTRACTF32X8_LAST = 2510,
    XED_IFORMFL_VEXTRACTF64X2_FIRST = 2511,
    XED_IFORMFL_VEXTRACTF64X2_LAST = 2514,
    XED_IFORMFL_VEXTRACTF64X4_FIRST = 2515,
    XED_IFORMFL_VEXTRACTF64X4_LAST = 2516,
    XED_IFORMFL_VEXTRACTI128_FIRST = 2517,
    XED_IFORMFL_VEXTRACTI128_LAST = 2518,
    XED_IFORMFL_VEXTRACTI32X4_FIRST = 2519,
    XED_IFORMFL_VEXTRACTI32X4_LAST = 2522,
    XED_IFORMFL_VEXTRACTI32X8_FIRST = 2523,
    XED_IFORMFL_VEXTRACTI32X8_LAST = 2524,
    XED_IFORMFL_VEXTRACTI64X2_FIRST = 2525,
    XED_IFORMFL_VEXTRACTI64X2_LAST = 2528,
    XED_IFORMFL_VEXTRACTI64X4_FIRST = 2529,
    XED_IFORMFL_VEXTRACTI64X4_LAST = 2530,
    XED_IFORMFL_VEXTRACTPS_FIRST = 2531,
    XED_IFORMFL_VEXTRACTPS_LAST = 2534,
    XED_IFORMFL_VFIXUPIMMPD_FIRST = 2535,
    XED_IFORMFL_VFIXUPIMMPD_LAST = 2540,
    XED_IFORMFL_VFIXUPIMMPS_FIRST = 2541,
    XED_IFORMFL_VFIXUPIMMPS_LAST = 2546,
    XED_IFORMFL_VFIXUPIMMSD_FIRST = 2547,
    XED_IFORMFL_VFIXUPIMMSD_LAST = 2548,
    XED_IFORMFL_VFIXUPIMMSS_FIRST = 2549,
    XED_IFORMFL_VFIXUPIMMSS_LAST = 2550,
    XED_IFORMFL_VFMADD132PD_FIRST = 2551,
    XED_IFORMFL_VFMADD132PD_LAST = 2560,
    XED_IFORMFL_VFMADD132PS_FIRST = 2561,
    XED_IFORMFL_VFMADD132PS_LAST = 2570,
    XED_IFORMFL_VFMADD132SD_FIRST = 2571,
    XED_IFORMFL_VFMADD132SD_LAST = 2574,
    XED_IFORMFL_VFMADD132SS_FIRST = 2575,
    XED_IFORMFL_VFMADD132SS_LAST = 2578,
    XED_IFORMFL_VFMADD213PD_FIRST = 2579,
    XED_IFORMFL_VFMADD213PD_LAST = 2588,
    XED_IFORMFL_VFMADD213PS_FIRST = 2589,
    XED_IFORMFL_VFMADD213PS_LAST = 2598,
    XED_IFORMFL_VFMADD213SD_FIRST = 2599,
    XED_IFORMFL_VFMADD213SD_LAST = 2602,
    XED_IFORMFL_VFMADD213SS_FIRST = 2603,
    XED_IFORMFL_VFMADD213SS_LAST = 2606,
    XED_IFORMFL_VFMADD231PD_FIRST = 2607,
    XED_IFORMFL_VFMADD231PD_LAST = 2616,
    XED_IFORMFL_VFMADD231PS_FIRST = 2617,
    XED_IFORMFL_VFMADD231PS_LAST = 2626,
    XED_IFORMFL_VFMADD231SD_FIRST = 2627,
    XED_IFORMFL_VFMADD231SD_LAST = 2630,
    XED_IFORMFL_VFMADD231SS_FIRST = 2631,
    XED_IFORMFL_VFMADD231SS_LAST = 2634,
    XED_IFORMFL_VFMADDPD_FIRST = 2635,
    XED_IFORMFL_VFMADDPD_LAST = 2640,
    XED_IFORMFL_VFMADDPS_FIRST = 2641,
    XED_IFORMFL_VFMADDPS_LAST = 2646,
    XED_IFORMFL_VFMADDSD_FIRST = 2647,
    XED_IFORMFL_VFMADDSD_LAST = 2650,
    XED_IFORMFL_VFMADDSS_FIRST = 2651,
    XED_IFORMFL_VFMADDSS_LAST = 2654,
    XED_IFORMFL_VFMADDSUB132PD_FIRST = 2655,
    XED_IFORMFL_VFMADDSUB132PD_LAST = 2664,
    XED_IFORMFL_VFMADDSUB132PS_FIRST = 2665,
    XED_IFORMFL_VFMADDSUB132PS_LAST = 2674,
    XED_IFORMFL_VFMADDSUB213PD_FIRST = 2675,
    XED_IFORMFL_VFMADDSUB213PD_LAST = 2684,
    XED_IFORMFL_VFMADDSUB213PS_FIRST = 2685,
    XED_IFORMFL_VFMADDSUB213PS_LAST = 2694,
    XED_IFORMFL_VFMADDSUB231PD_FIRST = 2695,
    XED_IFORMFL_VFMADDSUB231PD_LAST = 2704,
    XED_IFORMFL_VFMADDSUB231PS_FIRST = 2705,
    XED_IFORMFL_VFMADDSUB231PS_LAST = 2714,
    XED_IFORMFL_VFMADDSUBPD_FIRST = 2715,
    XED_IFORMFL_VFMADDSUBPD_LAST = 2720,
    XED_IFORMFL_VFMADDSUBPS_FIRST = 2721,
    XED_IFORMFL_VFMADDSUBPS_LAST = 2726,
    XED_IFORMFL_VFMSUB132PD_FIRST = 2727,
    XED_IFORMFL_VFMSUB132PD_LAST = 2736,
    XED_IFORMFL_VFMSUB132PS_FIRST = 2737,
    XED_IFORMFL_VFMSUB132PS_LAST = 2746,
    XED_IFORMFL_VFMSUB132SD_FIRST = 2747,
    XED_IFORMFL_VFMSUB132SD_LAST = 2750,
    XED_IFORMFL_VFMSUB132SS_FIRST = 2751,
    XED_IFORMFL_VFMSUB132SS_LAST = 2754,
    XED_IFORMFL_VFMSUB213PD_FIRST = 2755,
    XED_IFORMFL_VFMSUB213PD_LAST = 2764,
    XED_IFORMFL_VFMSUB213PS_FIRST = 2765,
    XED_IFORMFL_VFMSUB213PS_LAST = 2774,
    XED_IFORMFL_VFMSUB213SD_FIRST = 2775,
    XED_IFORMFL_VFMSUB213SD_LAST = 2778,
    XED_IFORMFL_VFMSUB213SS_FIRST = 2779,
    XED_IFORMFL_VFMSUB213SS_LAST = 2782,
    XED_IFORMFL_VFMSUB231PD_FIRST = 2783,
    XED_IFORMFL_VFMSUB231PD_LAST = 2792,
    XED_IFORMFL_VFMSUB231PS_FIRST = 2793,
    XED_IFORMFL_VFMSUB231PS_LAST = 2802,
    XED_IFORMFL_VFMSUB231SD_FIRST = 2803,
    XED_IFORMFL_VFMSUB231SD_LAST = 2806,
    XED_IFORMFL_VFMSUB231SS_FIRST = 2807,
    XED_IFORMFL_VFMSUB231SS_LAST = 2810,
    XED_IFORMFL_VFMSUBADD132PD_FIRST = 2811,
    XED_IFORMFL_VFMSUBADD132PD_LAST = 2820,
    XED_IFORMFL_VFMSUBADD132PS_FIRST = 2821,
    XED_IFORMFL_VFMSUBADD132PS_LAST = 2830,
    XED_IFORMFL_VFMSUBADD213PD_FIRST = 2831,
    XED_IFORMFL_VFMSUBADD213PD_LAST = 2840,
    XED_IFORMFL_VFMSUBADD213PS_FIRST = 2841,
    XED_IFORMFL_VFMSUBADD213PS_LAST = 2850,
    XED_IFORMFL_VFMSUBADD231PD_FIRST = 2851,
    XED_IFORMFL_VFMSUBADD231PD_LAST = 2860,
    XED_IFORMFL_VFMSUBADD231PS_FIRST = 2861,
    XED_IFORMFL_VFMSUBADD231PS_LAST = 2870,
    XED_IFORMFL_VFMSUBADDPD_FIRST = 2871,
    XED_IFORMFL_VFMSUBADDPD_LAST = 2876,
    XED_IFORMFL_VFMSUBADDPS_FIRST = 2877,
    XED_IFORMFL_VFMSUBADDPS_LAST = 2882,
    XED_IFORMFL_VFMSUBPD_FIRST = 2883,
    XED_IFORMFL_VFMSUBPD_LAST = 2888,
    XED_IFORMFL_VFMSUBPS_FIRST = 2889,
    XED_IFORMFL_VFMSUBPS_LAST = 2894,
    XED_IFORMFL_VFMSUBSD_FIRST = 2895,
    XED_IFORMFL_VFMSUBSD_LAST = 2898,
    XED_IFORMFL_VFMSUBSS_FIRST = 2899,
    XED_IFORMFL_VFMSUBSS_LAST = 2902,
    XED_IFORMFL_VFNMADD132PD_FIRST = 2903,
    XED_IFORMFL_VFNMADD132PD_LAST = 2912,
    XED_IFORMFL_VFNMADD132PS_FIRST = 2913,
    XED_IFORMFL_VFNMADD132PS_LAST = 2922,
    XED_IFORMFL_VFNMADD132SD_FIRST = 2923,
    XED_IFORMFL_VFNMADD132SD_LAST = 2926,
    XED_IFORMFL_VFNMADD132SS_FIRST = 2927,
    XED_IFORMFL_VFNMADD132SS_LAST = 2930,
    XED_IFORMFL_VFNMADD213PD_FIRST = 2931,
    XED_IFORMFL_VFNMADD213PD_LAST = 2940,
    XED_IFORMFL_VFNMADD213PS_FIRST = 2941,
    XED_IFORMFL_VFNMADD213PS_LAST = 2950,
    XED_IFORMFL_VFNMADD213SD_FIRST = 2951,
    XED_IFORMFL_VFNMADD213SD_LAST = 2954,
    XED_IFORMFL_VFNMADD213SS_FIRST = 2955,
    XED_IFORMFL_VFNMADD213SS_LAST = 2958,
    XED_IFORMFL_VFNMADD231PD_FIRST = 2959,
    XED_IFORMFL_VFNMADD231PD_LAST = 2968,
    XED_IFORMFL_VFNMADD231PS_FIRST = 2969,
    XED_IFORMFL_VFNMADD231PS_LAST = 2978,
    XED_IFORMFL_VFNMADD231SD_FIRST = 2979,
    XED_IFORMFL_VFNMADD231SD_LAST = 2982,
    XED_IFORMFL_VFNMADD231SS_FIRST = 2983,
    XED_IFORMFL_VFNMADD231SS_LAST = 2986,
    XED_IFORMFL_VFNMADDPD_FIRST = 2987,
    XED_IFORMFL_VFNMADDPD_LAST = 2992,
    XED_IFORMFL_VFNMADDPS_FIRST = 2993,
    XED_IFORMFL_VFNMADDPS_LAST = 2998,
    XED_IFORMFL_VFNMADDSD_FIRST = 2999,
    XED_IFORMFL_VFNMADDSD_LAST = 3002,
    XED_IFORMFL_VFNMADDSS_FIRST = 3003,
    XED_IFORMFL_VFNMADDSS_LAST = 3006,
    XED_IFORMFL_VFNMSUB132PD_FIRST = 3007,
    XED_IFORMFL_VFNMSUB132PD_LAST = 3016,
    XED_IFORMFL_VFNMSUB132PS_FIRST = 3017,
    XED_IFORMFL_VFNMSUB132PS_LAST = 3026,
    XED_IFORMFL_VFNMSUB132SD_FIRST = 3027,
    XED_IFORMFL_VFNMSUB132SD_LAST = 3030,
    XED_IFORMFL_VFNMSUB132SS_FIRST = 3031,
    XED_IFORMFL_VFNMSUB132SS_LAST = 3034,
    XED_IFORMFL_VFNMSUB213PD_FIRST = 3035,
    XED_IFORMFL_VFNMSUB213PD_LAST = 3044,
    XED_IFORMFL_VFNMSUB213PS_FIRST = 3045,
    XED_IFORMFL_VFNMSUB213PS_LAST = 3054,
    XED_IFORMFL_VFNMSUB213SD_FIRST = 3055,
    XED_IFORMFL_VFNMSUB213SD_LAST = 3058,
    XED_IFORMFL_VFNMSUB213SS_FIRST = 3059,
    XED_IFORMFL_VFNMSUB213SS_LAST = 3062,
    XED_IFORMFL_VFNMSUB231PD_FIRST = 3063,
    XED_IFORMFL_VFNMSUB231PD_LAST = 3072,
    XED_IFORMFL_VFNMSUB231PS_FIRST = 3073,
    XED_IFORMFL_VFNMSUB231PS_LAST = 3082,
    XED_IFORMFL_VFNMSUB231SD_FIRST = 3083,
    XED_IFORMFL_VFNMSUB231SD_LAST = 3086,
    XED_IFORMFL_VFNMSUB231SS_FIRST = 3087,
    XED_IFORMFL_VFNMSUB231SS_LAST = 3090,
    XED_IFORMFL_VFNMSUBPD_FIRST = 3091,
    XED_IFORMFL_VFNMSUBPD_LAST = 3096,
    XED_IFORMFL_VFNMSUBPS_FIRST = 3097,
    XED_IFORMFL_VFNMSUBPS_LAST = 3102,
    XED_IFORMFL_VFNMSUBSD_FIRST = 3103,
    XED_IFORMFL_VFNMSUBSD_LAST = 3106,
    XED_IFORMFL_VFNMSUBSS_FIRST = 3107,
    XED_IFORMFL_VFNMSUBSS_LAST = 3110,
    XED_IFORMFL_VFPCLASSPD_FIRST = 3111,
    XED_IFORMFL_VFPCLASSPD_LAST = 3116,
    XED_IFORMFL_VFPCLASSPS_FIRST = 3117,
    XED_IFORMFL_VFPCLASSPS_LAST = 3122,
    XED_IFORMFL_VFPCLASSSD_FIRST = 3123,
    XED_IFORMFL_VFPCLASSSD_LAST = 3124,
    XED_IFORMFL_VFPCLASSSS_FIRST = 3125,
    XED_IFORMFL_VFPCLASSSS_LAST = 3126,
    XED_IFORMFL_VFRCZPD_FIRST = 3127,
    XED_IFORMFL_VFRCZPD_LAST = 3130,
    XED_IFORMFL_VFRCZPS_FIRST = 3131,
    XED_IFORMFL_VFRCZPS_LAST = 3134,
    XED_IFORMFL_VFRCZSD_FIRST = 3135,
    XED_IFORMFL_VFRCZSD_LAST = 3136,
    XED_IFORMFL_VFRCZSS_FIRST = 3137,
    XED_IFORMFL_VFRCZSS_LAST = 3138,
    XED_IFORMFL_VGATHERDPD_FIRST = 3139,
    XED_IFORMFL_VGATHERDPD_LAST = 3143,
    XED_IFORMFL_VGATHERDPS_FIRST = 3144,
    XED_IFORMFL_VGATHERDPS_LAST = 3148,
    XED_IFORMFL_VGATHERPF0DPD_FIRST = 3149,
    XED_IFORMFL_VGATHERPF0DPS_FIRST = 3150,
    XED_IFORMFL_VGATHERPF0QPD_FIRST = 3151,
    XED_IFORMFL_VGATHERPF0QPS_FIRST = 3152,
    XED_IFORMFL_VGATHERPF1DPD_FIRST = 3153,
    XED_IFORMFL_VGATHERPF1DPS_FIRST = 3154,
    XED_IFORMFL_VGATHERPF1QPD_FIRST = 3155,
    XED_IFORMFL_VGATHERPF1QPS_FIRST = 3156,
    XED_IFORMFL_VGATHERQPD_FIRST = 3157,
    XED_IFORMFL_VGATHERQPD_LAST = 3161,
    XED_IFORMFL_VGATHERQPS_FIRST = 3162,
    XED_IFORMFL_VGATHERQPS_LAST = 3166,
    XED_IFORMFL_VGETEXPPD_FIRST = 3167,
    XED_IFORMFL_VGETEXPPD_LAST = 3172,
    XED_IFORMFL_VGETEXPPS_FIRST = 3173,
    XED_IFORMFL_VGETEXPPS_LAST = 3178,
    XED_IFORMFL_VGETEXPSD_FIRST = 3179,
    XED_IFORMFL_VGETEXPSD_LAST = 3180,
    XED_IFORMFL_VGETEXPSS_FIRST = 3181,
    XED_IFORMFL_VGETEXPSS_LAST = 3182,
    XED_IFORMFL_VGETMANTPD_FIRST = 3183,
    XED_IFORMFL_VGETMANTPD_LAST = 3188,
    XED_IFORMFL_VGETMANTPS_FIRST = 3189,
    XED_IFORMFL_VGETMANTPS_LAST = 3194,
    XED_IFORMFL_VGETMANTSD_FIRST = 3195,
    XED_IFORMFL_VGETMANTSD_LAST = 3196,
    XED_IFORMFL_VGETMANTSS_FIRST = 3197,
    XED_IFORMFL_VGETMANTSS_LAST = 3198,
    XED_IFORMFL_VHADDPD_FIRST = 3199,
    XED_IFORMFL_VHADDPD_LAST = 3202,
    XED_IFORMFL_VHADDPS_FIRST = 3203,
    XED_IFORMFL_VHADDPS_LAST = 3206,
    XED_IFORMFL_VHSUBPD_FIRST = 3207,
    XED_IFORMFL_VHSUBPD_LAST = 3210,
    XED_IFORMFL_VHSUBPS_FIRST = 3211,
    XED_IFORMFL_VHSUBPS_LAST = 3214,
    XED_IFORMFL_VINSERTF128_FIRST = 3215,
    XED_IFORMFL_VINSERTF128_LAST = 3216,
    XED_IFORMFL_VINSERTF32X4_FIRST = 3217,
    XED_IFORMFL_VINSERTF32X4_LAST = 3220,
    XED_IFORMFL_VINSERTF32X8_FIRST = 3221,
    XED_IFORMFL_VINSERTF32X8_LAST = 3222,
    XED_IFORMFL_VINSERTF64X2_FIRST = 3223,
    XED_IFORMFL_VINSERTF64X2_LAST = 3226,
    XED_IFORMFL_VINSERTF64X4_FIRST = 3227,
    XED_IFORMFL_VINSERTF64X4_LAST = 3228,
    XED_IFORMFL_VINSERTI128_FIRST = 3229,
    XED_IFORMFL_VINSERTI128_LAST = 3230,
    XED_IFORMFL_VINSERTI32X4_FIRST = 3231,
    XED_IFORMFL_VINSERTI32X4_LAST = 3234,
    XED_IFORMFL_VINSERTI32X8_FIRST = 3235,
    XED_IFORMFL_VINSERTI32X8_LAST = 3236,
    XED_IFORMFL_VINSERTI64X2_FIRST = 3237,
    XED_IFORMFL_VINSERTI64X2_LAST = 3240,
    XED_IFORMFL_VINSERTI64X4_FIRST = 3241,
    XED_IFORMFL_VINSERTI64X4_LAST = 3242,
    XED_IFORMFL_VINSERTPS_FIRST = 3243,
    XED_IFORMFL_VINSERTPS_LAST = 3246,
    XED_IFORMFL_VLDDQU_FIRST = 3247,
    XED_IFORMFL_VLDDQU_LAST = 3248,
    XED_IFORMFL_VLDMXCSR_FIRST = 3249,
    XED_IFORMFL_VMASKMOVDQU_FIRST = 3250,
    XED_IFORMFL_VMASKMOVPD_FIRST = 3251,
    XED_IFORMFL_VMASKMOVPD_LAST = 3254,
    XED_IFORMFL_VMASKMOVPS_FIRST = 3255,
    XED_IFORMFL_VMASKMOVPS_LAST = 3258,
    XED_IFORMFL_VMAXPD_FIRST = 3259,
    XED_IFORMFL_VMAXPD_LAST = 3268,
    XED_IFORMFL_VMAXPS_FIRST = 3269,
    XED_IFORMFL_VMAXPS_LAST = 3278,
    XED_IFORMFL_VMAXSD_FIRST = 3279,
    XED_IFORMFL_VMAXSD_LAST = 3282,
    XED_IFORMFL_VMAXSS_FIRST = 3283,
    XED_IFORMFL_VMAXSS_LAST = 3286,
    XED_IFORMFL_VMCALL_FIRST = 3287,
    XED_IFORMFL_VMCLEAR_FIRST = 3288,
    XED_IFORMFL_VMFUNC_FIRST = 3289,
    XED_IFORMFL_VMINPD_FIRST = 3290,
    XED_IFORMFL_VMINPD_LAST = 3299,
    XED_IFORMFL_VMINPS_FIRST = 3300,
    XED_IFORMFL_VMINPS_LAST = 3309,
    XED_IFORMFL_VMINSD_FIRST = 3310,
    XED_IFORMFL_VMINSD_LAST = 3313,
    XED_IFORMFL_VMINSS_FIRST = 3314,
    XED_IFORMFL_VMINSS_LAST = 3317,
    XED_IFORMFL_VMLAUNCH_FIRST = 3318,
    XED_IFORMFL_VMLOAD_FIRST = 3319,
    XED_IFORMFL_VMMCALL_FIRST = 3320,
    XED_IFORMFL_VMOVAPD_FIRST = 3321,
    XED_IFORMFL_VMOVAPD_LAST = 3337,
    XED_IFORMFL_VMOVAPS_FIRST = 3338,
    XED_IFORMFL_VMOVAPS_LAST = 3354,
    XED_IFORMFL_VMOVD_FIRST = 3355,
    XED_IFORMFL_VMOVD_LAST = 3362,
    XED_IFORMFL_VMOVDDUP_FIRST = 3363,
    XED_IFORMFL_VMOVDDUP_LAST = 3372,
    XED_IFORMFL_VMOVDQA_FIRST = 3373,
    XED_IFORMFL_VMOVDQA_LAST = 3380,
    XED_IFORMFL_VMOVDQA32_FIRST = 3381,
    XED_IFORMFL_VMOVDQA32_LAST = 3389,
    XED_IFORMFL_VMOVDQA64_FIRST = 3390,
    XED_IFORMFL_VMOVDQA64_LAST = 3398,
    XED_IFORMFL_VMOVDQU_FIRST = 3399,
    XED_IFORMFL_VMOVDQU_LAST = 3406,
    XED_IFORMFL_VMOVDQU16_FIRST = 3407,
    XED_IFORMFL_VMOVDQU16_LAST = 3415,
    XED_IFORMFL_VMOVDQU32_FIRST = 3416,
    XED_IFORMFL_VMOVDQU32_LAST = 3424,
    XED_IFORMFL_VMOVDQU64_FIRST = 3425,
    XED_IFORMFL_VMOVDQU64_LAST = 3433,
    XED_IFORMFL_VMOVDQU8_FIRST = 3434,
    XED_IFORMFL_VMOVDQU8_LAST = 3442,
    XED_IFORMFL_VMOVHLPS_FIRST = 3443,
    XED_IFORMFL_VMOVHLPS_LAST = 3444,
    XED_IFORMFL_VMOVHPD_FIRST = 3445,
    XED_IFORMFL_VMOVHPD_LAST = 3448,
    XED_IFORMFL_VMOVHPS_FIRST = 3449,
    XED_IFORMFL_VMOVHPS_LAST = 3452,
    XED_IFORMFL_VMOVLHPS_FIRST = 3453,
    XED_IFORMFL_VMOVLHPS_LAST = 3454,
    XED_IFORMFL_VMOVLPD_FIRST = 3455,
    XED_IFORMFL_VMOVLPD_LAST = 3458,
    XED_IFORMFL_VMOVLPS_FIRST = 3459,
    XED_IFORMFL_VMOVLPS_LAST = 3462,
    XED_IFORMFL_VMOVMSKPD_FIRST = 3463,
    XED_IFORMFL_VMOVMSKPD_LAST = 3464,
    XED_IFORMFL_VMOVMSKPS_FIRST = 3465,
    XED_IFORMFL_VMOVMSKPS_LAST = 3466,
    XED_IFORMFL_VMOVNTDQ_FIRST = 3467,
    XED_IFORMFL_VMOVNTDQ_LAST = 3471,
    XED_IFORMFL_VMOVNTDQA_FIRST = 3472,
    XED_IFORMFL_VMOVNTDQA_LAST = 3476,
    XED_IFORMFL_VMOVNTPD_FIRST = 3477,
    XED_IFORMFL_VMOVNTPD_LAST = 3481,
    XED_IFORMFL_VMOVNTPS_FIRST = 3482,
    XED_IFORMFL_VMOVNTPS_LAST = 3486,
    XED_IFORMFL_VMOVQ_FIRST = 3487,
    XED_IFORMFL_VMOVQ_LAST = 3499,
    XED_IFORMFL_VMOVSD_FIRST = 3500,
    XED_IFORMFL_VMOVSD_LAST = 3506,
    XED_IFORMFL_VMOVSHDUP_FIRST = 3507,
    XED_IFORMFL_VMOVSHDUP_LAST = 3516,
    XED_IFORMFL_VMOVSLDUP_FIRST = 3517,
    XED_IFORMFL_VMOVSLDUP_LAST = 3526,
    XED_IFORMFL_VMOVSS_FIRST = 3527,
    XED_IFORMFL_VMOVSS_LAST = 3533,
    XED_IFORMFL_VMOVUPD_FIRST = 3534,
    XED_IFORMFL_VMOVUPD_LAST = 3550,
    XED_IFORMFL_VMOVUPS_FIRST = 3551,
    XED_IFORMFL_VMOVUPS_LAST = 3567,
    XED_IFORMFL_VMPSADBW_FIRST = 3568,
    XED_IFORMFL_VMPSADBW_LAST = 3571,
    XED_IFORMFL_VMPTRLD_FIRST = 3572,
    XED_IFORMFL_VMPTRST_FIRST = 3573,
    XED_IFORMFL_VMREAD_FIRST = 3574,
    XED_IFORMFL_VMREAD_LAST = 3577,
    XED_IFORMFL_VMRESUME_FIRST = 3578,
    XED_IFORMFL_VMRUN_FIRST = 3579,
    XED_IFORMFL_VMSAVE_FIRST = 3580,
    XED_IFORMFL_VMULPD_FIRST = 3581,
    XED_IFORMFL_VMULPD_LAST = 3590,
    XED_IFORMFL_VMULPS_FIRST = 3591,
    XED_IFORMFL_VMULPS_LAST = 3600,
    XED_IFORMFL_VMULSD_FIRST = 3601,
    XED_IFORMFL_VMULSD_LAST = 3604,
    XED_IFORMFL_VMULSS_FIRST = 3605,
    XED_IFORMFL_VMULSS_LAST = 3608,
    XED_IFORMFL_VMWRITE_FIRST = 3609,
    XED_IFORMFL_VMWRITE_LAST = 3612,
    XED_IFORMFL_VMXOFF_FIRST = 3613,
    XED_IFORMFL_VMXON_FIRST = 3614,
    XED_IFORMFL_VORPD_FIRST = 3615,
    XED_IFORMFL_VORPD_LAST = 3624,
    XED_IFORMFL_VORPS_FIRST = 3625,
    XED_IFORMFL_VORPS_LAST = 3634,
    XED_IFORMFL_VP4DPWSSD_FIRST = 3635,
    XED_IFORMFL_VP4DPWSSDS_FIRST = 3636,
    XED_IFORMFL_VPABSB_FIRST = 3637,
    XED_IFORMFL_VPABSB_LAST = 3646,
    XED_IFORMFL_VPABSD_FIRST = 3647,
    XED_IFORMFL_VPABSD_LAST = 3656,
    XED_IFORMFL_VPABSQ_FIRST = 3657,
    XED_IFORMFL_VPABSQ_LAST = 3662,
    XED_IFORMFL_VPABSW_FIRST = 3663,
    XED_IFORMFL_VPABSW_LAST = 3672,
    XED_IFORMFL_VPACKSSDW_FIRST = 3673,
    XED_IFORMFL_VPACKSSDW_LAST = 3682,
    XED_IFORMFL_VPACKSSWB_FIRST = 3683,
    XED_IFORMFL_VPACKSSWB_LAST = 3692,
    XED_IFORMFL_VPACKUSDW_FIRST = 3693,
    XED_IFORMFL_VPACKUSDW_LAST = 3702,
    XED_IFORMFL_VPACKUSWB_FIRST = 3703,
    XED_IFORMFL_VPACKUSWB_LAST = 3712,
    XED_IFORMFL_VPADDB_FIRST = 3713,
    XED_IFORMFL_VPADDB_LAST = 3722,
    XED_IFORMFL_VPADDD_FIRST = 3723,
    XED_IFORMFL_VPADDD_LAST = 3732,
    XED_IFORMFL_VPADDQ_FIRST = 3733,
    XED_IFORMFL_VPADDQ_LAST = 3742,
    XED_IFORMFL_VPADDSB_FIRST = 3743,
    XED_IFORMFL_VPADDSB_LAST = 3752,
    XED_IFORMFL_VPADDSW_FIRST = 3753,
    XED_IFORMFL_VPADDSW_LAST = 3762,
    XED_IFORMFL_VPADDUSB_FIRST = 3763,
    XED_IFORMFL_VPADDUSB_LAST = 3772,
    XED_IFORMFL_VPADDUSW_FIRST = 3773,
    XED_IFORMFL_VPADDUSW_LAST = 3782,
    XED_IFORMFL_VPADDW_FIRST = 3783,
    XED_IFORMFL_VPADDW_LAST = 3792,
    XED_IFORMFL_VPALIGNR_FIRST = 3793,
    XED_IFORMFL_VPALIGNR_LAST = 3802,
    XED_IFORMFL_VPAND_FIRST = 3803,
    XED_IFORMFL_VPAND_LAST = 3806,
    XED_IFORMFL_VPANDD_FIRST = 3807,
    XED_IFORMFL_VPANDD_LAST = 3812,
    XED_IFORMFL_VPANDN_FIRST = 3813,
    XED_IFORMFL_VPANDN_LAST = 3816,
    XED_IFORMFL_VPANDND_FIRST = 3817,
    XED_IFORMFL_VPANDND_LAST = 3822,
    XED_IFORMFL_VPANDNQ_FIRST = 3823,
    XED_IFORMFL_VPANDNQ_LAST = 3828,
    XED_IFORMFL_VPANDQ_FIRST = 3829,
    XED_IFORMFL_VPANDQ_LAST = 3834,
    XED_IFORMFL_VPAVGB_FIRST = 3835,
    XED_IFORMFL_VPAVGB_LAST = 3844,
    XED_IFORMFL_VPAVGW_FIRST = 3845,
    XED_IFORMFL_VPAVGW_LAST = 3854,
    XED_IFORMFL_VPBLENDD_FIRST = 3855,
    XED_IFORMFL_VPBLENDD_LAST = 3858,
    XED_IFORMFL_VPBLENDMB_FIRST = 3859,
    XED_IFORMFL_VPBLENDMB_LAST = 3864,
    XED_IFORMFL_VPBLENDMD_FIRST = 3865,
    XED_IFORMFL_VPBLENDMD_LAST = 3870,
    XED_IFORMFL_VPBLENDMQ_FIRST = 3871,
    XED_IFORMFL_VPBLENDMQ_LAST = 3876,
    XED_IFORMFL_VPBLENDMW_FIRST = 3877,
    XED_IFORMFL_VPBLENDMW_LAST = 3882,
    XED_IFORMFL_VPBLENDVB_FIRST = 3883,
    XED_IFORMFL_VPBLENDVB_LAST = 3886,
    XED_IFORMFL_VPBLENDW_FIRST = 3887,
    XED_IFORMFL_VPBLENDW_LAST = 3890,
    XED_IFORMFL_VPBROADCASTB_FIRST = 3891,
    XED_IFORMFL_VPBROADCASTB_LAST = 3903,
    XED_IFORMFL_VPBROADCASTD_FIRST = 3904,
    XED_IFORMFL_VPBROADCASTD_LAST = 3916,
    XED_IFORMFL_VPBROADCASTMB2Q_FIRST = 3917,
    XED_IFORMFL_VPBROADCASTMB2Q_LAST = 3919,
    XED_IFORMFL_VPBROADCASTMW2D_FIRST = 3920,
    XED_IFORMFL_VPBROADCASTMW2D_LAST = 3922,
    XED_IFORMFL_VPBROADCASTQ_FIRST = 3923,
    XED_IFORMFL_VPBROADCASTQ_LAST = 3935,
    XED_IFORMFL_VPBROADCASTW_FIRST = 3936,
    XED_IFORMFL_VPBROADCASTW_LAST = 3948,
    XED_IFORMFL_VPCLMULQDQ_FIRST = 3949,
    XED_IFORMFL_VPCLMULQDQ_LAST = 3950,
    XED_IFORMFL_VPCMOV_FIRST = 3951,
    XED_IFORMFL_VPCMOV_LAST = 3956,
    XED_IFORMFL_VPCMPB_FIRST = 3957,
    XED_IFORMFL_VPCMPB_LAST = 3962,
    XED_IFORMFL_VPCMPD_FIRST = 3963,
    XED_IFORMFL_VPCMPD_LAST = 3968,
    XED_IFORMFL_VPCMPEQB_FIRST = 3969,
    XED_IFORMFL_VPCMPEQB_LAST = 3978,
    XED_IFORMFL_VPCMPEQD_FIRST = 3979,
    XED_IFORMFL_VPCMPEQD_LAST = 3988,
    XED_IFORMFL_VPCMPEQQ_FIRST = 3989,
    XED_IFORMFL_VPCMPEQQ_LAST = 3998,
    XED_IFORMFL_VPCMPEQW_FIRST = 3999,
    XED_IFORMFL_VPCMPEQW_LAST = 4008,
    XED_IFORMFL_VPCMPESTRI_FIRST = 4009,
    XED_IFORMFL_VPCMPESTRI_LAST = 4010,
    XED_IFORMFL_VPCMPESTRM_FIRST = 4011,
    XED_IFORMFL_VPCMPESTRM_LAST = 4012,
    XED_IFORMFL_VPCMPGTB_FIRST = 4013,
    XED_IFORMFL_VPCMPGTB_LAST = 4022,
    XED_IFORMFL_VPCMPGTD_FIRST = 4023,
    XED_IFORMFL_VPCMPGTD_LAST = 4032,
    XED_IFORMFL_VPCMPGTQ_FIRST = 4033,
    XED_IFORMFL_VPCMPGTQ_LAST = 4042,
    XED_IFORMFL_VPCMPGTW_FIRST = 4043,
    XED_IFORMFL_VPCMPGTW_LAST = 4052,
    XED_IFORMFL_VPCMPISTRI_FIRST = 4053,
    XED_IFORMFL_VPCMPISTRI_LAST = 4054,
    XED_IFORMFL_VPCMPISTRM_FIRST = 4055,
    XED_IFORMFL_VPCMPISTRM_LAST = 4056,
    XED_IFORMFL_VPCMPQ_FIRST = 4057,
    XED_IFORMFL_VPCMPQ_LAST = 4062,
    XED_IFORMFL_VPCMPUB_FIRST = 4063,
    XED_IFORMFL_VPCMPUB_LAST = 4068,
    XED_IFORMFL_VPCMPUD_FIRST = 4069,
    XED_IFORMFL_VPCMPUD_LAST = 4074,
    XED_IFORMFL_VPCMPUQ_FIRST = 4075,
    XED_IFORMFL_VPCMPUQ_LAST = 4080,
    XED_IFORMFL_VPCMPUW_FIRST = 4081,
    XED_IFORMFL_VPCMPUW_LAST = 4086,
    XED_IFORMFL_VPCMPW_FIRST = 4087,
    XED_IFORMFL_VPCMPW_LAST = 4092,
    XED_IFORMFL_VPCOMB_FIRST = 4093,
    XED_IFORMFL_VPCOMB_LAST = 4094,
    XED_IFORMFL_VPCOMD_FIRST = 4095,
    XED_IFORMFL_VPCOMD_LAST = 4096,
    XED_IFORMFL_VPCOMPRESSD_FIRST = 4097,
    XED_IFORMFL_VPCOMPRESSD_LAST = 4102,
    XED_IFORMFL_VPCOMPRESSQ_FIRST = 4103,
    XED_IFORMFL_VPCOMPRESSQ_LAST = 4108,
    XED_IFORMFL_VPCOMQ_FIRST = 4109,
    XED_IFORMFL_VPCOMQ_LAST = 4110,
    XED_IFORMFL_VPCOMUB_FIRST = 4111,
    XED_IFORMFL_VPCOMUB_LAST = 4112,
    XED_IFORMFL_VPCOMUD_FIRST = 4113,
    XED_IFORMFL_VPCOMUD_LAST = 4114,
    XED_IFORMFL_VPCOMUQ_FIRST = 4115,
    XED_IFORMFL_VPCOMUQ_LAST = 4116,
    XED_IFORMFL_VPCOMUW_FIRST = 4117,
    XED_IFORMFL_VPCOMUW_LAST = 4118,
    XED_IFORMFL_VPCOMW_FIRST = 4119,
    XED_IFORMFL_VPCOMW_LAST = 4120,
    XED_IFORMFL_VPCONFLICTD_FIRST = 4121,
    XED_IFORMFL_VPCONFLICTD_LAST = 4126,
    XED_IFORMFL_VPCONFLICTQ_FIRST = 4127,
    XED_IFORMFL_VPCONFLICTQ_LAST = 4132,
    XED_IFORMFL_VPERM2F128_FIRST = 4133,
    XED_IFORMFL_VPERM2F128_LAST = 4134,
    XED_IFORMFL_VPERM2I128_FIRST = 4135,
    XED_IFORMFL_VPERM2I128_LAST = 4136,
    XED_IFORMFL_VPERMB_FIRST = 4137,
    XED_IFORMFL_VPERMB_LAST = 4142,
    XED_IFORMFL_VPERMD_FIRST = 4143,
    XED_IFORMFL_VPERMD_LAST = 4148,
    XED_IFORMFL_VPERMI2B_FIRST = 4149,
    XED_IFORMFL_VPERMI2B_LAST = 4154,
    XED_IFORMFL_VPERMI2D_FIRST = 4155,
    XED_IFORMFL_VPERMI2D_LAST = 4160,
    XED_IFORMFL_VPERMI2PD_FIRST = 4161,
    XED_IFORMFL_VPERMI2PD_LAST = 4166,
    XED_IFORMFL_VPERMI2PS_FIRST = 4167,
    XED_IFORMFL_VPERMI2PS_LAST = 4172,
    XED_IFORMFL_VPERMI2Q_FIRST = 4173,
    XED_IFORMFL_VPERMI2Q_LAST = 4178,
    XED_IFORMFL_VPERMI2W_FIRST = 4179,
    XED_IFORMFL_VPERMI2W_LAST = 4184,
    XED_IFORMFL_VPERMIL2PD_FIRST = 4185,
    XED_IFORMFL_VPERMIL2PD_LAST = 4190,
    XED_IFORMFL_VPERMIL2PS_FIRST = 4191,
    XED_IFORMFL_VPERMIL2PS_LAST = 4196,
    XED_IFORMFL_VPERMILPD_FIRST = 4197,
    XED_IFORMFL_VPERMILPD_LAST = 4216,
    XED_IFORMFL_VPERMILPS_FIRST = 4217,
    XED_IFORMFL_VPERMILPS_LAST = 4236,
    XED_IFORMFL_VPERMPD_FIRST = 4237,
    XED_IFORMFL_VPERMPD_LAST = 4246,
    XED_IFORMFL_VPERMPS_FIRST = 4247,
    XED_IFORMFL_VPERMPS_LAST = 4252,
    XED_IFORMFL_VPERMQ_FIRST = 4253,
    XED_IFORMFL_VPERMQ_LAST = 4262,
    XED_IFORMFL_VPERMT2B_FIRST = 4263,
    XED_IFORMFL_VPERMT2B_LAST = 4268,
    XED_IFORMFL_VPERMT2D_FIRST = 4269,
    XED_IFORMFL_VPERMT2D_LAST = 4274,
    XED_IFORMFL_VPERMT2PD_FIRST = 4275,
    XED_IFORMFL_VPERMT2PD_LAST = 4280,
    XED_IFORMFL_VPERMT2PS_FIRST = 4281,
    XED_IFORMFL_VPERMT2PS_LAST = 4286,
    XED_IFORMFL_VPERMT2Q_FIRST = 4287,
    XED_IFORMFL_VPERMT2Q_LAST = 4292,
    XED_IFORMFL_VPERMT2W_FIRST = 4293,
    XED_IFORMFL_VPERMT2W_LAST = 4298,
    XED_IFORMFL_VPERMW_FIRST = 4299,
    XED_IFORMFL_VPERMW_LAST = 4304,
    XED_IFORMFL_VPEXPANDD_FIRST = 4305,
    XED_IFORMFL_VPEXPANDD_LAST = 4310,
    XED_IFORMFL_VPEXPANDQ_FIRST = 4311,
    XED_IFORMFL_VPEXPANDQ_LAST = 4316,
    XED_IFORMFL_VPEXTRB_FIRST = 4317,
    XED_IFORMFL_VPEXTRB_LAST = 4320,
    XED_IFORMFL_VPEXTRD_FIRST = 4321,
    XED_IFORMFL_VPEXTRD_LAST = 4324,
    XED_IFORMFL_VPEXTRQ_FIRST = 4325,
    XED_IFORMFL_VPEXTRQ_LAST = 4328,
    XED_IFORMFL_VPEXTRW_FIRST = 4329,
    XED_IFORMFL_VPEXTRW_LAST = 4333,
    XED_IFORMFL_VPGATHERDD_FIRST = 4334,
    XED_IFORMFL_VPGATHERDD_LAST = 4338,
    XED_IFORMFL_VPGATHERDQ_FIRST = 4339,
    XED_IFORMFL_VPGATHERDQ_LAST = 4343,
    XED_IFORMFL_VPGATHERQD_FIRST = 4344,
    XED_IFORMFL_VPGATHERQD_LAST = 4348,
    XED_IFORMFL_VPGATHERQQ_FIRST = 4349,
    XED_IFORMFL_VPGATHERQQ_LAST = 4353,
    XED_IFORMFL_VPHADDBD_FIRST = 4354,
    XED_IFORMFL_VPHADDBD_LAST = 4355,
    XED_IFORMFL_VPHADDBQ_FIRST = 4356,
    XED_IFORMFL_VPHADDBQ_LAST = 4357,
    XED_IFORMFL_VPHADDBW_FIRST = 4358,
    XED_IFORMFL_VPHADDBW_LAST = 4359,
    XED_IFORMFL_VPHADDD_FIRST = 4360,
    XED_IFORMFL_VPHADDD_LAST = 4363,
    XED_IFORMFL_VPHADDDQ_FIRST = 4364,
    XED_IFORMFL_VPHADDDQ_LAST = 4365,
    XED_IFORMFL_VPHADDSW_FIRST = 4366,
    XED_IFORMFL_VPHADDSW_LAST = 4369,
    XED_IFORMFL_VPHADDUBD_FIRST = 4370,
    XED_IFORMFL_VPHADDUBD_LAST = 4371,
    XED_IFORMFL_VPHADDUBQ_FIRST = 4372,
    XED_IFORMFL_VPHADDUBQ_LAST = 4373,
    XED_IFORMFL_VPHADDUBW_FIRST = 4374,
    XED_IFORMFL_VPHADDUBW_LAST = 4375,
    XED_IFORMFL_VPHADDUDQ_FIRST = 4376,
    XED_IFORMFL_VPHADDUDQ_LAST = 4377,
    XED_IFORMFL_VPHADDUWD_FIRST = 4378,
    XED_IFORMFL_VPHADDUWD_LAST = 4379,
    XED_IFORMFL_VPHADDUWQ_FIRST = 4380,
    XED_IFORMFL_VPHADDUWQ_LAST = 4381,
    XED_IFORMFL_VPHADDW_FIRST = 4382,
    XED_IFORMFL_VPHADDW_LAST = 4385,
    XED_IFORMFL_VPHADDWD_FIRST = 4386,
    XED_IFORMFL_VPHADDWD_LAST = 4387,
    XED_IFORMFL_VPHADDWQ_FIRST = 4388,
    XED_IFORMFL_VPHADDWQ_LAST = 4389,
    XED_IFORMFL_VPHMINPOSUW_FIRST = 4390,
    XED_IFORMFL_VPHMINPOSUW_LAST = 4391,
    XED_IFORMFL_VPHSUBBW_FIRST = 4392,
    XED_IFORMFL_VPHSUBBW_LAST = 4393,
    XED_IFORMFL_VPHSUBD_FIRST = 4394,
    XED_IFORMFL_VPHSUBD_LAST = 4397,
    XED_IFORMFL_VPHSUBDQ_FIRST = 4398,
    XED_IFORMFL_VPHSUBDQ_LAST = 4399,
    XED_IFORMFL_VPHSUBSW_FIRST = 4400,
    XED_IFORMFL_VPHSUBSW_LAST = 4403,
    XED_IFORMFL_VPHSUBW_FIRST = 4404,
    XED_IFORMFL_VPHSUBW_LAST = 4407,
    XED_IFORMFL_VPHSUBWD_FIRST = 4408,
    XED_IFORMFL_VPHSUBWD_LAST = 4409,
    XED_IFORMFL_VPINSRB_FIRST = 4410,
    XED_IFORMFL_VPINSRB_LAST = 4413,
    XED_IFORMFL_VPINSRD_FIRST = 4414,
    XED_IFORMFL_VPINSRD_LAST = 4417,
    XED_IFORMFL_VPINSRQ_FIRST = 4418,
    XED_IFORMFL_VPINSRQ_LAST = 4421,
    XED_IFORMFL_VPINSRW_FIRST = 4422,
    XED_IFORMFL_VPINSRW_LAST = 4425,
    XED_IFORMFL_VPLZCNTD_FIRST = 4426,
    XED_IFORMFL_VPLZCNTD_LAST = 4431,
    XED_IFORMFL_VPLZCNTQ_FIRST = 4432,
    XED_IFORMFL_VPLZCNTQ_LAST = 4437,
    XED_IFORMFL_VPMACSDD_FIRST = 4438,
    XED_IFORMFL_VPMACSDD_LAST = 4439,
    XED_IFORMFL_VPMACSDQH_FIRST = 4440,
    XED_IFORMFL_VPMACSDQH_LAST = 4441,
    XED_IFORMFL_VPMACSDQL_FIRST = 4442,
    XED_IFORMFL_VPMACSDQL_LAST = 4443,
    XED_IFORMFL_VPMACSSDD_FIRST = 4444,
    XED_IFORMFL_VPMACSSDD_LAST = 4445,
    XED_IFORMFL_VPMACSSDQH_FIRST = 4446,
    XED_IFORMFL_VPMACSSDQH_LAST = 4447,
    XED_IFORMFL_VPMACSSDQL_FIRST = 4448,
    XED_IFORMFL_VPMACSSDQL_LAST = 4449,
    XED_IFORMFL_VPMACSSWD_FIRST = 4450,
    XED_IFORMFL_VPMACSSWD_LAST = 4451,
    XED_IFORMFL_VPMACSSWW_FIRST = 4452,
    XED_IFORMFL_VPMACSSWW_LAST = 4453,
    XED_IFORMFL_VPMACSWD_FIRST = 4454,
    XED_IFORMFL_VPMACSWD_LAST = 4455,
    XED_IFORMFL_VPMACSWW_FIRST = 4456,
    XED_IFORMFL_VPMACSWW_LAST = 4457,
    XED_IFORMFL_VPMADCSSWD_FIRST = 4458,
    XED_IFORMFL_VPMADCSSWD_LAST = 4459,
    XED_IFORMFL_VPMADCSWD_FIRST = 4460,
    XED_IFORMFL_VPMADCSWD_LAST = 4461,
    XED_IFORMFL_VPMADD52HUQ_FIRST = 4462,
    XED_IFORMFL_VPMADD52HUQ_LAST = 4467,
    XED_IFORMFL_VPMADD52LUQ_FIRST = 4468,
    XED_IFORMFL_VPMADD52LUQ_LAST = 4473,
    XED_IFORMFL_VPMADDUBSW_FIRST = 4474,
    XED_IFORMFL_VPMADDUBSW_LAST = 4483,
    XED_IFORMFL_VPMADDWD_FIRST = 4484,
    XED_IFORMFL_VPMADDWD_LAST = 4493,
    XED_IFORMFL_VPMASKMOVD_FIRST = 4494,
    XED_IFORMFL_VPMASKMOVD_LAST = 4497,
    XED_IFORMFL_VPMASKMOVQ_FIRST = 4498,
    XED_IFORMFL_VPMASKMOVQ_LAST = 4501,
    XED_IFORMFL_VPMAXSB_FIRST = 4502,
    XED_IFORMFL_VPMAXSB_LAST = 4511,
    XED_IFORMFL_VPMAXSD_FIRST = 4512,
    XED_IFORMFL_VPMAXSD_LAST = 4521,
    XED_IFORMFL_VPMAXSQ_FIRST = 4522,
    XED_IFORMFL_VPMAXSQ_LAST = 4527,
    XED_IFORMFL_VPMAXSW_FIRST = 4528,
    XED_IFORMFL_VPMAXSW_LAST = 4537,
    XED_IFORMFL_VPMAXUB_FIRST = 4538,
    XED_IFORMFL_VPMAXUB_LAST = 4547,
    XED_IFORMFL_VPMAXUD_FIRST = 4548,
    XED_IFORMFL_VPMAXUD_LAST = 4557,
    XED_IFORMFL_VPMAXUQ_FIRST = 4558,
    XED_IFORMFL_VPMAXUQ_LAST = 4563,
    XED_IFORMFL_VPMAXUW_FIRST = 4564,
    XED_IFORMFL_VPMAXUW_LAST = 4573,
    XED_IFORMFL_VPMINSB_FIRST = 4574,
    XED_IFORMFL_VPMINSB_LAST = 4583,
    XED_IFORMFL_VPMINSD_FIRST = 4584,
    XED_IFORMFL_VPMINSD_LAST = 4593,
    XED_IFORMFL_VPMINSQ_FIRST = 4594,
    XED_IFORMFL_VPMINSQ_LAST = 4599,
    XED_IFORMFL_VPMINSW_FIRST = 4600,
    XED_IFORMFL_VPMINSW_LAST = 4609,
    XED_IFORMFL_VPMINUB_FIRST = 4610,
    XED_IFORMFL_VPMINUB_LAST = 4619,
    XED_IFORMFL_VPMINUD_FIRST = 4620,
    XED_IFORMFL_VPMINUD_LAST = 4629,
    XED_IFORMFL_VPMINUQ_FIRST = 4630,
    XED_IFORMFL_VPMINUQ_LAST = 4635,
    XED_IFORMFL_VPMINUW_FIRST = 4636,
    XED_IFORMFL_VPMINUW_LAST = 4645,
    XED_IFORMFL_VPMOVB2M_FIRST = 4646,
    XED_IFORMFL_VPMOVB2M_LAST = 4648,
    XED_IFORMFL_VPMOVD2M_FIRST = 4649,
    XED_IFORMFL_VPMOVD2M_LAST = 4651,
    XED_IFORMFL_VPMOVDB_FIRST = 4652,
    XED_IFORMFL_VPMOVDB_LAST = 4657,
    XED_IFORMFL_VPMOVDW_FIRST = 4658,
    XED_IFORMFL_VPMOVDW_LAST = 4663,
    XED_IFORMFL_VPMOVM2B_FIRST = 4664,
    XED_IFORMFL_VPMOVM2B_LAST = 4666,
    XED_IFORMFL_VPMOVM2D_FIRST = 4667,
    XED_IFORMFL_VPMOVM2D_LAST = 4669,
    XED_IFORMFL_VPMOVM2Q_FIRST = 4670,
    XED_IFORMFL_VPMOVM2Q_LAST = 4672,
    XED_IFORMFL_VPMOVM2W_FIRST = 4673,
    XED_IFORMFL_VPMOVM2W_LAST = 4675,
    XED_IFORMFL_VPMOVMSKB_FIRST = 4676,
    XED_IFORMFL_VPMOVMSKB_LAST = 4677,
    XED_IFORMFL_VPMOVQ2M_FIRST = 4678,
    XED_IFORMFL_VPMOVQ2M_LAST = 4680,
    XED_IFORMFL_VPMOVQB_FIRST = 4681,
    XED_IFORMFL_VPMOVQB_LAST = 4686,
    XED_IFORMFL_VPMOVQD_FIRST = 4687,
    XED_IFORMFL_VPMOVQD_LAST = 4692,
    XED_IFORMFL_VPMOVQW_FIRST = 4693,
    XED_IFORMFL_VPMOVQW_LAST = 4698,
    XED_IFORMFL_VPMOVSDB_FIRST = 4699,
    XED_IFORMFL_VPMOVSDB_LAST = 4704,
    XED_IFORMFL_VPMOVSDW_FIRST = 4705,
    XED_IFORMFL_VPMOVSDW_LAST = 4710,
    XED_IFORMFL_VPMOVSQB_FIRST = 4711,
    XED_IFORMFL_VPMOVSQB_LAST = 4716,
    XED_IFORMFL_VPMOVSQD_FIRST = 4717,
    XED_IFORMFL_VPMOVSQD_LAST = 4722,
    XED_IFORMFL_VPMOVSQW_FIRST = 4723,
    XED_IFORMFL_VPMOVSQW_LAST = 4728,
    XED_IFORMFL_VPMOVSWB_FIRST = 4729,
    XED_IFORMFL_VPMOVSWB_LAST = 4734,
    XED_IFORMFL_VPMOVSXBD_FIRST = 4735,
    XED_IFORMFL_VPMOVSXBD_LAST = 4744,
    XED_IFORMFL_VPMOVSXBQ_FIRST = 4745,
    XED_IFORMFL_VPMOVSXBQ_LAST = 4754,
    XED_IFORMFL_VPMOVSXBW_FIRST = 4755,
    XED_IFORMFL_VPMOVSXBW_LAST = 4764,
    XED_IFORMFL_VPMOVSXDQ_FIRST = 4765,
    XED_IFORMFL_VPMOVSXDQ_LAST = 4774,
    XED_IFORMFL_VPMOVSXWD_FIRST = 4775,
    XED_IFORMFL_VPMOVSXWD_LAST = 4784,
    XED_IFORMFL_VPMOVSXWQ_FIRST = 4785,
    XED_IFORMFL_VPMOVSXWQ_LAST = 4794,
    XED_IFORMFL_VPMOVUSDB_FIRST = 4795,
    XED_IFORMFL_VPMOVUSDB_LAST = 4800,
    XED_IFORMFL_VPMOVUSDW_FIRST = 4801,
    XED_IFORMFL_VPMOVUSDW_LAST = 4806,
    XED_IFORMFL_VPMOVUSQB_FIRST = 4807,
    XED_IFORMFL_VPMOVUSQB_LAST = 4812,
    XED_IFORMFL_VPMOVUSQD_FIRST = 4813,
    XED_IFORMFL_VPMOVUSQD_LAST = 4818,
    XED_IFORMFL_VPMOVUSQW_FIRST = 4819,
    XED_IFORMFL_VPMOVUSQW_LAST = 4824,
    XED_IFORMFL_VPMOVUSWB_FIRST = 4825,
    XED_IFORMFL_VPMOVUSWB_LAST = 4830,
    XED_IFORMFL_VPMOVW2M_FIRST = 4831,
    XED_IFORMFL_VPMOVW2M_LAST = 4833,
    XED_IFORMFL_VPMOVWB_FIRST = 4834,
    XED_IFORMFL_VPMOVWB_LAST = 4839,
    XED_IFORMFL_VPMOVZXBD_FIRST = 4840,
    XED_IFORMFL_VPMOVZXBD_LAST = 4849,
    XED_IFORMFL_VPMOVZXBQ_FIRST = 4850,
    XED_IFORMFL_VPMOVZXBQ_LAST = 4859,
    XED_IFORMFL_VPMOVZXBW_FIRST = 4860,
    XED_IFORMFL_VPMOVZXBW_LAST = 4869,
    XED_IFORMFL_VPMOVZXDQ_FIRST = 4870,
    XED_IFORMFL_VPMOVZXDQ_LAST = 4879,
    XED_IFORMFL_VPMOVZXWD_FIRST = 4880,
    XED_IFORMFL_VPMOVZXWD_LAST = 4889,
    XED_IFORMFL_VPMOVZXWQ_FIRST = 4890,
    XED_IFORMFL_VPMOVZXWQ_LAST = 4899,
    XED_IFORMFL_VPMULDQ_FIRST = 4900,
    XED_IFORMFL_VPMULDQ_LAST = 4909,
    XED_IFORMFL_VPMULHRSW_FIRST = 4910,
    XED_IFORMFL_VPMULHRSW_LAST = 4919,
    XED_IFORMFL_VPMULHUW_FIRST = 4920,
    XED_IFORMFL_VPMULHUW_LAST = 4929,
    XED_IFORMFL_VPMULHW_FIRST = 4930,
    XED_IFORMFL_VPMULHW_LAST = 4939,
    XED_IFORMFL_VPMULLD_FIRST = 4940,
    XED_IFORMFL_VPMULLD_LAST = 4949,
    XED_IFORMFL_VPMULLQ_FIRST = 4950,
    XED_IFORMFL_VPMULLQ_LAST = 4955,
    XED_IFORMFL_VPMULLW_FIRST = 4956,
    XED_IFORMFL_VPMULLW_LAST = 4965,
    XED_IFORMFL_VPMULTISHIFTQB_FIRST = 4966,
    XED_IFORMFL_VPMULTISHIFTQB_LAST = 4971,
    XED_IFORMFL_VPMULUDQ_FIRST = 4972,
    XED_IFORMFL_VPMULUDQ_LAST = 4981,
    XED_IFORMFL_VPOPCNTD_FIRST = 4982,
    XED_IFORMFL_VPOPCNTD_LAST = 4983,
    XED_IFORMFL_VPOPCNTQ_FIRST = 4984,
    XED_IFORMFL_VPOPCNTQ_LAST = 4985,
    XED_IFORMFL_VPOR_FIRST = 4986,
    XED_IFORMFL_VPOR_LAST = 4989,
    XED_IFORMFL_VPORD_FIRST = 4990,
    XED_IFORMFL_VPORD_LAST = 4995,
    XED_IFORMFL_VPORQ_FIRST = 4996,
    XED_IFORMFL_VPORQ_LAST = 5001,
    XED_IFORMFL_VPPERM_FIRST = 5002,
    XED_IFORMFL_VPPERM_LAST = 5004,
    XED_IFORMFL_VPROLD_FIRST = 5005,
    XED_IFORMFL_VPROLD_LAST = 5010,
    XED_IFORMFL_VPROLQ_FIRST = 5011,
    XED_IFORMFL_VPROLQ_LAST = 5016,
    XED_IFORMFL_VPROLVD_FIRST = 5017,
    XED_IFORMFL_VPROLVD_LAST = 5022,
    XED_IFORMFL_VPROLVQ_FIRST = 5023,
    XED_IFORMFL_VPROLVQ_LAST = 5028,
    XED_IFORMFL_VPRORD_FIRST = 5029,
    XED_IFORMFL_VPRORD_LAST = 5034,
    XED_IFORMFL_VPRORQ_FIRST = 5035,
    XED_IFORMFL_VPRORQ_LAST = 5040,
    XED_IFORMFL_VPRORVD_FIRST = 5041,
    XED_IFORMFL_VPRORVD_LAST = 5046,
    XED_IFORMFL_VPRORVQ_FIRST = 5047,
    XED_IFORMFL_VPRORVQ_LAST = 5052,
    XED_IFORMFL_VPROTB_FIRST = 5053,
    XED_IFORMFL_VPROTB_LAST = 5057,
    XED_IFORMFL_VPROTD_FIRST = 5058,
    XED_IFORMFL_VPROTD_LAST = 5062,
    XED_IFORMFL_VPROTQ_FIRST = 5063,
    XED_IFORMFL_VPROTQ_LAST = 5067,
    XED_IFORMFL_VPROTW_FIRST = 5068,
    XED_IFORMFL_VPROTW_LAST = 5072,
    XED_IFORMFL_VPSADBW_FIRST = 5073,
    XED_IFORMFL_VPSADBW_LAST = 5082,
    XED_IFORMFL_VPSCATTERDD_FIRST = 5083,
    XED_IFORMFL_VPSCATTERDD_LAST = 5085,
    XED_IFORMFL_VPSCATTERDQ_FIRST = 5086,
    XED_IFORMFL_VPSCATTERDQ_LAST = 5088,
    XED_IFORMFL_VPSCATTERQD_FIRST = 5089,
    XED_IFORMFL_VPSCATTERQD_LAST = 5091,
    XED_IFORMFL_VPSCATTERQQ_FIRST = 5092,
    XED_IFORMFL_VPSCATTERQQ_LAST = 5094,
    XED_IFORMFL_VPSHAB_FIRST = 5095,
    XED_IFORMFL_VPSHAB_LAST = 5097,
    XED_IFORMFL_VPSHAD_FIRST = 5098,
    XED_IFORMFL_VPSHAD_LAST = 5100,
    XED_IFORMFL_VPSHAQ_FIRST = 5101,
    XED_IFORMFL_VPSHAQ_LAST = 5103,
    XED_IFORMFL_VPSHAW_FIRST = 5104,
    XED_IFORMFL_VPSHAW_LAST = 5106,
    XED_IFORMFL_VPSHLB_FIRST = 5107,
    XED_IFORMFL_VPSHLB_LAST = 5109,
    XED_IFORMFL_VPSHLD_FIRST = 5110,
    XED_IFORMFL_VPSHLD_LAST = 5112,
    XED_IFORMFL_VPSHLQ_FIRST = 5113,
    XED_IFORMFL_VPSHLQ_LAST = 5115,
    XED_IFORMFL_VPSHLW_FIRST = 5116,
    XED_IFORMFL_VPSHLW_LAST = 5118,
    XED_IFORMFL_VPSHUFB_FIRST = 5119,
    XED_IFORMFL_VPSHUFB_LAST = 5128,
    XED_IFORMFL_VPSHUFD_FIRST = 5129,
    XED_IFORMFL_VPSHUFD_LAST = 5138,
    XED_IFORMFL_VPSHUFHW_FIRST = 5139,
    XED_IFORMFL_VPSHUFHW_LAST = 5148,
    XED_IFORMFL_VPSHUFLW_FIRST = 5149,
    XED_IFORMFL_VPSHUFLW_LAST = 5158,
    XED_IFORMFL_VPSIGNB_FIRST = 5159,
    XED_IFORMFL_VPSIGNB_LAST = 5162,
    XED_IFORMFL_VPSIGND_FIRST = 5163,
    XED_IFORMFL_VPSIGND_LAST = 5166,
    XED_IFORMFL_VPSIGNW_FIRST = 5167,
    XED_IFORMFL_VPSIGNW_LAST = 5170,
    XED_IFORMFL_VPSLLD_FIRST = 5171,
    XED_IFORMFL_VPSLLD_LAST = 5188,
    XED_IFORMFL_VPSLLDQ_FIRST = 5189,
    XED_IFORMFL_VPSLLDQ_LAST = 5196,
    XED_IFORMFL_VPSLLQ_FIRST = 5197,
    XED_IFORMFL_VPSLLQ_LAST = 5214,
    XED_IFORMFL_VPSLLVD_FIRST = 5215,
    XED_IFORMFL_VPSLLVD_LAST = 5224,
    XED_IFORMFL_VPSLLVQ_FIRST = 5225,
    XED_IFORMFL_VPSLLVQ_LAST = 5234,
    XED_IFORMFL_VPSLLVW_FIRST = 5235,
    XED_IFORMFL_VPSLLVW_LAST = 5240,
    XED_IFORMFL_VPSLLW_FIRST = 5241,
    XED_IFORMFL_VPSLLW_LAST = 5258,
    XED_IFORMFL_VPSRAD_FIRST = 5259,
    XED_IFORMFL_VPSRAD_LAST = 5276,
    XED_IFORMFL_VPSRAQ_FIRST = 5277,
    XED_IFORMFL_VPSRAQ_LAST = 5288,
    XED_IFORMFL_VPSRAVD_FIRST = 5289,
    XED_IFORMFL_VPSRAVD_LAST = 5298,
    XED_IFORMFL_VPSRAVQ_FIRST = 5299,
    XED_IFORMFL_VPSRAVQ_LAST = 5304,
    XED_IFORMFL_VPSRAVW_FIRST = 5305,
    XED_IFORMFL_VPSRAVW_LAST = 5310,
    XED_IFORMFL_VPSRAW_FIRST = 5311,
    XED_IFORMFL_VPSRAW_LAST = 5328,
    XED_IFORMFL_VPSRLD_FIRST = 5329,
    XED_IFORMFL_VPSRLD_LAST = 5346,
    XED_IFORMFL_VPSRLDQ_FIRST = 5347,
    XED_IFORMFL_VPSRLDQ_LAST = 5354,
    XED_IFORMFL_VPSRLQ_FIRST = 5355,
    XED_IFORMFL_VPSRLQ_LAST = 5372,
    XED_IFORMFL_VPSRLVD_FIRST = 5373,
    XED_IFORMFL_VPSRLVD_LAST = 5382,
    XED_IFORMFL_VPSRLVQ_FIRST = 5383,
    XED_IFORMFL_VPSRLVQ_LAST = 5392,
    XED_IFORMFL_VPSRLVW_FIRST = 5393,
    XED_IFORMFL_VPSRLVW_LAST = 5398,
    XED_IFORMFL_VPSRLW_FIRST = 5399,
    XED_IFORMFL_VPSRLW_LAST = 5416,
    XED_IFORMFL_VPSUBB_FIRST = 5417,
    XED_IFORMFL_VPSUBB_LAST = 5426,
    XED_IFORMFL_VPSUBD_FIRST = 5427,
    XED_IFORMFL_VPSUBD_LAST = 5436,
    XED_IFORMFL_VPSUBQ_FIRST = 5437,
    XED_IFORMFL_VPSUBQ_LAST = 5446,
    XED_IFORMFL_VPSUBSB_FIRST = 5447,
    XED_IFORMFL_VPSUBSB_LAST = 5456,
    XED_IFORMFL_VPSUBSW_FIRST = 5457,
    XED_IFORMFL_VPSUBSW_LAST = 5466,
    XED_IFORMFL_VPSUBUSB_FIRST = 5467,
    XED_IFORMFL_VPSUBUSB_LAST = 5476,
    XED_IFORMFL_VPSUBUSW_FIRST = 5477,
    XED_IFORMFL_VPSUBUSW_LAST = 5486,
    XED_IFORMFL_VPSUBW_FIRST = 5487,
    XED_IFORMFL_VPSUBW_LAST = 5496,
    XED_IFORMFL_VPTERNLOGD_FIRST = 5497,
    XED_IFORMFL_VPTERNLOGD_LAST = 5502,
    XED_IFORMFL_VPTERNLOGQ_FIRST = 5503,
    XED_IFORMFL_VPTERNLOGQ_LAST = 5508,
    XED_IFORMFL_VPTEST_FIRST = 5509,
    XED_IFORMFL_VPTEST_LAST = 5512,
    XED_IFORMFL_VPTESTMB_FIRST = 5513,
    XED_IFORMFL_VPTESTMB_LAST = 5518,
    XED_IFORMFL_VPTESTMD_FIRST = 5519,
    XED_IFORMFL_VPTESTMD_LAST = 5524,
    XED_IFORMFL_VPTESTMQ_FIRST = 5525,
    XED_IFORMFL_VPTESTMQ_LAST = 5530,
    XED_IFORMFL_VPTESTMW_FIRST = 5531,
    XED_IFORMFL_VPTESTMW_LAST = 5536,
    XED_IFORMFL_VPTESTNMB_FIRST = 5537,
    XED_IFORMFL_VPTESTNMB_LAST = 5542,
    XED_IFORMFL_VPTESTNMD_FIRST = 5543,
    XED_IFORMFL_VPTESTNMD_LAST = 5548,
    XED_IFORMFL_VPTESTNMQ_FIRST = 5549,
    XED_IFORMFL_VPTESTNMQ_LAST = 5554,
    XED_IFORMFL_VPTESTNMW_FIRST = 5555,
    XED_IFORMFL_VPTESTNMW_LAST = 5560,
    XED_IFORMFL_VPUNPCKHBW_FIRST = 5561,
    XED_IFORMFL_VPUNPCKHBW_LAST = 5570,
    XED_IFORMFL_VPUNPCKHDQ_FIRST = 5571,
    XED_IFORMFL_VPUNPCKHDQ_LAST = 5580,
    XED_IFORMFL_VPUNPCKHQDQ_FIRST = 5581,
    XED_IFORMFL_VPUNPCKHQDQ_LAST = 5590,
    XED_IFORMFL_VPUNPCKHWD_FIRST = 5591,
    XED_IFORMFL_VPUNPCKHWD_LAST = 5600,
    XED_IFORMFL_VPUNPCKLBW_FIRST = 5601,
    XED_IFORMFL_VPUNPCKLBW_LAST = 5610,
    XED_IFORMFL_VPUNPCKLDQ_FIRST = 5611,
    XED_IFORMFL_VPUNPCKLDQ_LAST = 5620,
    XED_IFORMFL_VPUNPCKLQDQ_FIRST = 5621,
    XED_IFORMFL_VPUNPCKLQDQ_LAST = 5630,
    XED_IFORMFL_VPUNPCKLWD_FIRST = 5631,
    XED_IFORMFL_VPUNPCKLWD_LAST = 5640,
    XED_IFORMFL_VPXOR_FIRST = 5641,
    XED_IFORMFL_VPXOR_LAST = 5644,
    XED_IFORMFL_VPXORD_FIRST = 5645,
    XED_IFORMFL_VPXORD_LAST = 5650,
    XED_IFORMFL_VPXORQ_FIRST = 5651,
    XED_IFORMFL_VPXORQ_LAST = 5656,
    XED_IFORMFL_VRANGEPD_FIRST = 5657,
    XED_IFORMFL_VRANGEPD_LAST = 5662,
    XED_IFORMFL_VRANGEPS_FIRST = 5663,
    XED_IFORMFL_VRANGEPS_LAST = 5668,
    XED_IFORMFL_VRANGESD_FIRST = 5669,
    XED_IFORMFL_VRANGESD_LAST = 5670,
    XED_IFORMFL_VRANGESS_FIRST = 5671,
    XED_IFORMFL_VRANGESS_LAST = 5672,
    XED_IFORMFL_VRCP14PD_FIRST = 5673,
    XED_IFORMFL_VRCP14PD_LAST = 5678,
    XED_IFORMFL_VRCP14PS_FIRST = 5679,
    XED_IFORMFL_VRCP14PS_LAST = 5684,
    XED_IFORMFL_VRCP14SD_FIRST = 5685,
    XED_IFORMFL_VRCP14SD_LAST = 5686,
    XED_IFORMFL_VRCP14SS_FIRST = 5687,
    XED_IFORMFL_VRCP14SS_LAST = 5688,
    XED_IFORMFL_VRCP28PD_FIRST = 5689,
    XED_IFORMFL_VRCP28PD_LAST = 5690,
    XED_IFORMFL_VRCP28PS_FIRST = 5691,
    XED_IFORMFL_VRCP28PS_LAST = 5692,
    XED_IFORMFL_VRCP28SD_FIRST = 5693,
    XED_IFORMFL_VRCP28SD_LAST = 5694,
    XED_IFORMFL_VRCP28SS_FIRST = 5695,
    XED_IFORMFL_VRCP28SS_LAST = 5696,
    XED_IFORMFL_VRCPPS_FIRST = 5697,
    XED_IFORMFL_VRCPPS_LAST = 5700,
    XED_IFORMFL_VRCPSS_FIRST = 5701,
    XED_IFORMFL_VRCPSS_LAST = 5702,
    XED_IFORMFL_VREDUCEPD_FIRST = 5703,
    XED_IFORMFL_VREDUCEPD_LAST = 5708,
    XED_IFORMFL_VREDUCEPS_FIRST = 5709,
    XED_IFORMFL_VREDUCEPS_LAST = 5714,
    XED_IFORMFL_VREDUCESD_FIRST = 5715,
    XED_IFORMFL_VREDUCESD_LAST = 5716,
    XED_IFORMFL_VREDUCESS_FIRST = 5717,
    XED_IFORMFL_VREDUCESS_LAST = 5718,
    XED_IFORMFL_VRNDSCALEPD_FIRST = 5719,
    XED_IFORMFL_VRNDSCALEPD_LAST = 5724,
    XED_IFORMFL_VRNDSCALEPS_FIRST = 5725,
    XED_IFORMFL_VRNDSCALEPS_LAST = 5730,
    XED_IFORMFL_VRNDSCALESD_FIRST = 5731,
    XED_IFORMFL_VRNDSCALESD_LAST = 5732,
    XED_IFORMFL_VRNDSCALESS_FIRST = 5733,
    XED_IFORMFL_VRNDSCALESS_LAST = 5734,
    XED_IFORMFL_VROUNDPD_FIRST = 5735,
    XED_IFORMFL_VROUNDPD_LAST = 5738,
    XED_IFORMFL_VROUNDPS_FIRST = 5739,
    XED_IFORMFL_VROUNDPS_LAST = 5742,
    XED_IFORMFL_VROUNDSD_FIRST = 5743,
    XED_IFORMFL_VROUNDSD_LAST = 5744,
    XED_IFORMFL_VROUNDSS_FIRST = 5745,
    XED_IFORMFL_VROUNDSS_LAST = 5746,
    XED_IFORMFL_VRSQRT14PD_FIRST = 5747,
    XED_IFORMFL_VRSQRT14PD_LAST = 5752,
    XED_IFORMFL_VRSQRT14PS_FIRST = 5753,
    XED_IFORMFL_VRSQRT14PS_LAST = 5758,
    XED_IFORMFL_VRSQRT14SD_FIRST = 5759,
    XED_IFORMFL_VRSQRT14SD_LAST = 5760,
    XED_IFORMFL_VRSQRT14SS_FIRST = 5761,
    XED_IFORMFL_VRSQRT14SS_LAST = 5762,
    XED_IFORMFL_VRSQRT28PD_FIRST = 5763,
    XED_IFORMFL_VRSQRT28PD_LAST = 5764,
    XED_IFORMFL_VRSQRT28PS_FIRST = 5765,
    XED_IFORMFL_VRSQRT28PS_LAST = 5766,
    XED_IFORMFL_VRSQRT28SD_FIRST = 5767,
    XED_IFORMFL_VRSQRT28SD_LAST = 5768,
    XED_IFORMFL_VRSQRT28SS_FIRST = 5769,
    XED_IFORMFL_VRSQRT28SS_LAST = 5770,
    XED_IFORMFL_VRSQRTPS_FIRST = 5771,
    XED_IFORMFL_VRSQRTPS_LAST = 5774,
    XED_IFORMFL_VRSQRTSS_FIRST = 5775,
    XED_IFORMFL_VRSQRTSS_LAST = 5776,
    XED_IFORMFL_VSCALEFPD_FIRST = 5777,
    XED_IFORMFL_VSCALEFPD_LAST = 5782,
    XED_IFORMFL_VSCALEFPS_FIRST = 5783,
    XED_IFORMFL_VSCALEFPS_LAST = 5788,
    XED_IFORMFL_VSCALEFSD_FIRST = 5789,
    XED_IFORMFL_VSCALEFSD_LAST = 5790,
    XED_IFORMFL_VSCALEFSS_FIRST = 5791,
    XED_IFORMFL_VSCALEFSS_LAST = 5792,
    XED_IFORMFL_VSCATTERDPD_FIRST = 5793,
    XED_IFORMFL_VSCATTERDPD_LAST = 5795,
    XED_IFORMFL_VSCATTERDPS_FIRST = 5796,
    XED_IFORMFL_VSCATTERDPS_LAST = 5798,
    XED_IFORMFL_VSCATTERPF0DPD_FIRST = 5799,
    XED_IFORMFL_VSCATTERPF0DPS_FIRST = 5800,
    XED_IFORMFL_VSCATTERPF0QPD_FIRST = 5801,
    XED_IFORMFL_VSCATTERPF0QPS_FIRST = 5802,
    XED_IFORMFL_VSCATTERPF1DPD_FIRST = 5803,
    XED_IFORMFL_VSCATTERPF1DPS_FIRST = 5804,
    XED_IFORMFL_VSCATTERPF1QPD_FIRST = 5805,
    XED_IFORMFL_VSCATTERPF1QPS_FIRST = 5806,
    XED_IFORMFL_VSCATTERQPD_FIRST = 5807,
    XED_IFORMFL_VSCATTERQPD_LAST = 5809,
    XED_IFORMFL_VSCATTERQPS_FIRST = 5810,
    XED_IFORMFL_VSCATTERQPS_LAST = 5812,
    XED_IFORMFL_VSHUFF32X4_FIRST = 5813,
    XED_IFORMFL_VSHUFF32X4_LAST = 5816,
    XED_IFORMFL_VSHUFF64X2_FIRST = 5817,
    XED_IFORMFL_VSHUFF64X2_LAST = 5820,
    XED_IFORMFL_VSHUFI32X4_FIRST = 5821,
    XED_IFORMFL_VSHUFI32X4_LAST = 5824,
    XED_IFORMFL_VSHUFI64X2_FIRST = 5825,
    XED_IFORMFL_VSHUFI64X2_LAST = 5828,
    XED_IFORMFL_VSHUFPD_FIRST = 5829,
    XED_IFORMFL_VSHUFPD_LAST = 5838,
    XED_IFORMFL_VSHUFPS_FIRST = 5839,
    XED_IFORMFL_VSHUFPS_LAST = 5848,
    XED_IFORMFL_VSQRTPD_FIRST = 5849,
    XED_IFORMFL_VSQRTPD_LAST = 5858,
    XED_IFORMFL_VSQRTPS_FIRST = 5859,
    XED_IFORMFL_VSQRTPS_LAST = 5868,
    XED_IFORMFL_VSQRTSD_FIRST = 5869,
    XED_IFORMFL_VSQRTSD_LAST = 5872,
    XED_IFORMFL_VSQRTSS_FIRST = 5873,
    XED_IFORMFL_VSQRTSS_LAST = 5876,
    XED_IFORMFL_VSTMXCSR_FIRST = 5877,
    XED_IFORMFL_VSUBPD_FIRST = 5878,
    XED_IFORMFL_VSUBPD_LAST = 5887,
    XED_IFORMFL_VSUBPS_FIRST = 5888,
    XED_IFORMFL_VSUBPS_LAST = 5897,
    XED_IFORMFL_VSUBSD_FIRST = 5898,
    XED_IFORMFL_VSUBSD_LAST = 5901,
    XED_IFORMFL_VSUBSS_FIRST = 5902,
    XED_IFORMFL_VSUBSS_LAST = 5905,
    XED_IFORMFL_VTESTPD_FIRST = 5906,
    XED_IFORMFL_VTESTPD_LAST = 5909,
    XED_IFORMFL_VTESTPS_FIRST = 5910,
    XED_IFORMFL_VTESTPS_LAST = 5913,
    XED_IFORMFL_VUCOMISD_FIRST = 5914,
    XED_IFORMFL_VUCOMISD_LAST = 5917,
    XED_IFORMFL_VUCOMISS_FIRST = 5918,
    XED_IFORMFL_VUCOMISS_LAST = 5921,
    XED_IFORMFL_VUNPCKHPD_FIRST = 5922,
    XED_IFORMFL_VUNPCKHPD_LAST = 5931,
    XED_IFORMFL_VUNPCKHPS_FIRST = 5932,
    XED_IFORMFL_VUNPCKHPS_LAST = 5941,
    XED_IFORMFL_VUNPCKLPD_FIRST = 5942,
    XED_IFORMFL_VUNPCKLPD_LAST = 5951,
    XED_IFORMFL_VUNPCKLPS_FIRST = 5952,
    XED_IFORMFL_VUNPCKLPS_LAST = 5961,
    XED_IFORMFL_VXORPD_FIRST = 5962,
    XED_IFORMFL_VXORPD_LAST = 5971,
    XED_IFORMFL_VXORPS_FIRST = 5972,
    XED_IFORMFL_VXORPS_LAST = 5981,
    XED_IFORMFL_VZEROALL_FIRST = 5982,
    XED_IFORMFL_VZEROUPPER_FIRST = 5983,
    XED_IFORMFL_WBINVD_FIRST = 5984,
    XED_IFORMFL_WRFSBASE_FIRST = 5985,
    XED_IFORMFL_WRGSBASE_FIRST = 5986,
    XED_IFORMFL_WRMSR_FIRST = 5987,
    XED_IFORMFL_WRPKRU_FIRST = 5988,
    XED_IFORMFL_WRSSD_FIRST = 5989,
    XED_IFORMFL_WRSSQ_FIRST = 5990,
    XED_IFORMFL_WRUSSD_FIRST = 5991,
    XED_IFORMFL_WRUSSQ_FIRST = 5992,
    XED_IFORMFL_XABORT_FIRST = 5993,
    XED_IFORMFL_XADD_FIRST = 5994,
    XED_IFORMFL_XADD_LAST = 5997,
    XED_IFORMFL_XADD_LOCK_FIRST = 5998,
    XED_IFORMFL_XADD_LOCK_LAST = 5999,
    XED_IFORMFL_XBEGIN_FIRST = 6000,
    XED_IFORMFL_XCHG_FIRST = 6001,
    XED_IFORMFL_XCHG_LAST = 6005,
    XED_IFORMFL_XEND_FIRST = 6006,
    XED_IFORMFL_XGETBV_FIRST = 6007,
    XED_IFORMFL_XLAT_FIRST = 6008,
    XED_IFORMFL_XOR_FIRST = 6009,
    XED_IFORMFL_XOR_LAST = 6026,
    XED_IFORMFL_XORPD_FIRST = 6027,
    XED_IFORMFL_XORPD_LAST = 6028,
    XED_IFORMFL_XORPS_FIRST = 6029,
    XED_IFORMFL_XORPS_LAST = 6030,
    XED_IFORMFL_XOR_LOCK_FIRST = 6031,
    XED_IFORMFL_XOR_LOCK_LAST = 6036,
    XED_IFORMFL_XRSTOR_FIRST = 6037,
    XED_IFORMFL_XRSTOR64_FIRST = 6038,
    XED_IFORMFL_XRSTORS_FIRST = 6039,
    XED_IFORMFL_XRSTORS64_FIRST = 6040,
    XED_IFORMFL_XSAVE_FIRST = 6041,
    XED_IFORMFL_XSAVE64_FIRST = 6042,
    XED_IFORMFL_XSAVEC_FIRST = 6043,
    XED_IFORMFL_XSAVEC64_FIRST = 6044,
    XED_IFORMFL_XSAVEOPT_FIRST = 6045,
    XED_IFORMFL_XSAVEOPT64_FIRST = 6046,
    XED_IFORMFL_XSAVES_FIRST = 6047,
    XED_IFORMFL_XSAVES64_FIRST = 6048,
    XED_IFORMFL_XSETBV_FIRST = 6049,
    XED_IFORMFL_XTEST_FIRST = 6050,
    XED_IFORMFL_LAST = 6051,
}
extern "C" {
    pub fn xed_iformfl_enum_t_last() -> xed_iformfl_enum_t;
}
extern "C" {
    /// @ingroup DEC Take an instruction with a REP/REPE/REPNE prefix and
/// return the corresponding xed_iclass_enum_t without that prefix. The
/// return value differs from the other functions in this group: If the
/// input iclass does not have REP/REPNE/REPE prefix, the function returns
/// the original instruction.
    pub fn xed_rep_remove(x: xed_iclass_enum_t) -> xed_iclass_enum_t;
}
extern "C" {
    /// @ingroup DEC Take an #xed_iclass_enum_t value without a REPE prefix and
/// return the corresponding #xed_iclass_enum_t with a REPE prefix. If the
/// input instruction cannot have have a REPE prefix, this function returns
/// XED_ICLASS_INVALID.
    pub fn xed_repe_map(iclass: xed_iclass_enum_t) -> xed_iclass_enum_t;
}
extern "C" {
    /// @ingroup DEC Take an #xed_iclass_enum_t value without a REPNE prefix
/// and return the corresponding #xed_iclass_enum_t with a REPNE prefix. If
/// the input instruction cannot have a REPNE prefix, this function returns
/// XED_ICLASS_INVALID.
    pub fn xed_repne_map(iclass: xed_iclass_enum_t) -> xed_iclass_enum_t;
}
extern "C" {
    /// @ingroup DEC Take an #xed_iclass_enum_t value without a REP prefix and
/// return the corresponding #xed_iclass_enum_t with a REP prefix. If the
/// input instruction cannot have a REP prefix, this function returns
/// XED_ICLASS_INVALID.
    pub fn xed_rep_map(iclass: xed_iclass_enum_t) -> xed_iclass_enum_t;
}
extern "C" {
    /// @ingroup DEC Take an #xed_iclass_enum_t value for an instruction with a
/// REP/REPNE/REPE prefix and return the corresponding #xed_iclass_enum_t
/// without that prefix. If the input instruction does not have a
/// REP/REPNE/REPE prefix, this function returns XED_ICLASS_INVALID.
    pub fn xed_norep_map(iclass: xed_iclass_enum_t) -> xed_iclass_enum_t;
}
/// A function for obtaining register values. 32b return values should be
/// zero extended to 64b. The error value is set to nonzero if the callback
/// experiences some sort of problem.  @ingroup AGEN
pub type xed_register_callback_fn_t =
    ::std::option::Option<unsafe extern "C" fn(reg: xed_reg_enum_t,
                                               context:
                                                   *mut ::std::os::raw::c_void,
                                               error: *mut xed_bool_t)
                              -> u64>;
/// A function for obtaining the segment base values. 32b return values
/// should be zero extended zero extended to 64b. The error value is set to
/// nonzero if the callback experiences some sort of problem. 
/// @ingroup AGEN
pub type xed_segment_base_callback_fn_t =
    ::std::option::Option<unsafe extern "C" fn(reg: xed_reg_enum_t,
                                               context:
                                                   *mut ::std::os::raw::c_void,
                                               error: *mut xed_bool_t)
                              -> u64>;
extern "C" {
    /// Initialize the callback functions. Tell XED what to call when using
/// #xed_agen. 
/// @ingroup AGEN
    pub fn xed_agen_register_callback(register_fn: xed_register_callback_fn_t,
                                      segment_fn:
                                          xed_segment_base_callback_fn_t);
}
extern "C" {
    /// Using the registered callbacks, compute the memory address for a
/// specified memop in a decoded instruction. memop_index can have the
/// value 0 for XED_OPERAND_MEM0, XED_OPERAND_AGEN, or 1 for
/// XED_OPERAND_MEM1. Any other value results in an error being
/// returned. The context parameter which is passed to the registered
/// callbacks can be used to identify which thread's state is being
/// referenced. The context parameter can also be used to specify which
/// element of a vector register should be returned for gather an scatter
/// operations.
/// @ingroup AGEN
    pub fn xed_agen(xedd: *mut xed_decoded_inst_t,
                    memop_index: ::std::os::raw::c_uint,
                    context: *mut ::std::os::raw::c_void,
                    out_address: *mut u64) -> xed_error_enum_t;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum xed_cpuid_bit_enum_t {
    XED_CPUID_BIT_INVALID = 0,
    XED_CPUID_BIT_ADOXADCX = 1,
    XED_CPUID_BIT_AES = 2,
    XED_CPUID_BIT_AVX = 3,
    XED_CPUID_BIT_AVX2 = 4,
    XED_CPUID_BIT_AVX512BW = 5,
    XED_CPUID_BIT_AVX512CD = 6,
    XED_CPUID_BIT_AVX512DQ = 7,
    XED_CPUID_BIT_AVX512ER = 8,
    XED_CPUID_BIT_AVX512F = 9,
    XED_CPUID_BIT_AVX512IFMA = 10,
    XED_CPUID_BIT_AVX512PF = 11,
    XED_CPUID_BIT_AVX512VBMI = 12,
    XED_CPUID_BIT_AVX512VL = 13,
    XED_CPUID_BIT_AVX512_4FMAPS = 14,
    XED_CPUID_BIT_AVX512_4VNNIW = 15,
    XED_CPUID_BIT_AVX512_VPOPCNTDQ = 16,
    XED_CPUID_BIT_BMI1 = 17,
    XED_CPUID_BIT_BMI2 = 18,
    XED_CPUID_BIT_CET = 19,
    XED_CPUID_BIT_CLFLUSH = 20,
    XED_CPUID_BIT_CLFLUSHOPT = 21,
    XED_CPUID_BIT_CLWB = 22,
    XED_CPUID_BIT_CMPXCHG16B = 23,
    XED_CPUID_BIT_F16C = 24,
    XED_CPUID_BIT_FMA = 25,
    XED_CPUID_BIT_FXSAVE = 26,
    XED_CPUID_BIT_INTEL64 = 27,
    XED_CPUID_BIT_INTELPT = 28,
    XED_CPUID_BIT_INVPCID = 29,
    XED_CPUID_BIT_LAHF = 30,
    XED_CPUID_BIT_LZCNT = 31,
    XED_CPUID_BIT_MONITOR = 32,
    XED_CPUID_BIT_MOVEBE = 33,
    XED_CPUID_BIT_MPX = 34,
    XED_CPUID_BIT_OSPKU = 35,
    XED_CPUID_BIT_OSXSAVE = 36,
    XED_CPUID_BIT_PCLMULQDQ = 37,
    XED_CPUID_BIT_PKU = 38,
    XED_CPUID_BIT_POPCNT = 39,
    XED_CPUID_BIT_PREFETCHW = 40,
    XED_CPUID_BIT_PREFETCHWT1 = 41,
    XED_CPUID_BIT_RDRAND = 42,
    XED_CPUID_BIT_RDSEED = 43,
    XED_CPUID_BIT_RDTSCP = 44,
    XED_CPUID_BIT_RDWRFSGS = 45,
    XED_CPUID_BIT_RTM = 46,
    XED_CPUID_BIT_SGX = 47,
    XED_CPUID_BIT_SHA = 48,
    XED_CPUID_BIT_SMAP = 49,
    XED_CPUID_BIT_SMX = 50,
    XED_CPUID_BIT_SSE = 51,
    XED_CPUID_BIT_SSE2 = 52,
    XED_CPUID_BIT_SSE3 = 53,
    XED_CPUID_BIT_SSE4 = 54,
    XED_CPUID_BIT_SSE42 = 55,
    XED_CPUID_BIT_SSSE3 = 56,
    XED_CPUID_BIT_VMX = 57,
    XED_CPUID_BIT_XSAVE = 58,
    XED_CPUID_BIT_XSAVEC = 59,
    XED_CPUID_BIT_XSAVEOPT = 60,
    XED_CPUID_BIT_XSAVES = 61,
    XED_CPUID_BIT_LAST = 62,
}
extern "C" {
    pub fn str2xed_cpuid_bit_enum_t(s: *const ::std::os::raw::c_char)
     -> xed_cpuid_bit_enum_t;
}
extern "C" {
    pub fn xed_cpuid_bit_enum_t2str(p: xed_cpuid_bit_enum_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xed_cpuid_bit_enum_t_last() -> xed_cpuid_bit_enum_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct xed_cpuid_rec_t {
    pub leaf: u32,
    pub subleaf: u32,
    pub bit: u32,
    pub reg: xed_reg_enum_t,
}
#[test]
fn bindgen_test_layout_xed_cpuid_rec_t() {
    assert_eq!(::std::mem::size_of::<xed_cpuid_rec_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( xed_cpuid_rec_t ) ));
    assert_eq! (::std::mem::align_of::<xed_cpuid_rec_t>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( xed_cpuid_rec_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_cpuid_rec_t ) ) . leaf as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_cpuid_rec_t ) ,
                "::" , stringify ! ( leaf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_cpuid_rec_t ) ) . subleaf as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_cpuid_rec_t ) ,
                "::" , stringify ! ( subleaf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_cpuid_rec_t ) ) . bit as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_cpuid_rec_t ) ,
                "::" , stringify ! ( bit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const xed_cpuid_rec_t ) ) . reg as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( xed_cpuid_rec_t ) ,
                "::" , stringify ! ( reg ) ));
}
impl Clone for xed_cpuid_rec_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    /// Returns the name of the i'th cpuid bit associated with this isa-set.
/// Call this repeatedly, with 0 <= i <
/// XED_MAX_CPUID_BITS_PER_ISA_SET. Give up when i ==
/// XED_MAX_CPUID_BITS_PER_ISA_SET or the return value is
/// XED_CPUID_BIT_INVALID.
    pub fn xed_get_cpuid_bit_for_isa_set(isaset: xed_isa_set_enum_t,
                                         i: xed_uint_t)
     -> xed_cpuid_bit_enum_t;
}
extern "C" {
    /// This provides the details of the CPUID bit specification, if the
/// enumeration value is not sufficient.  Returns 1 on success and fills in
/// the structure pointed to by p. Returns 0 on failure.
    pub fn xed_get_cpuid_rec(cpuid_bit: xed_cpuid_bit_enum_t,
                             p: *mut xed_cpuid_rec_t) -> xed_int_t;
}
